// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module matmul_optimized_matmul_optimized_Pipeline_VITIS_LOOP_47_6 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_dataAB_AWVALID,
        m_axi_dataAB_AWREADY,
        m_axi_dataAB_AWADDR,
        m_axi_dataAB_AWID,
        m_axi_dataAB_AWLEN,
        m_axi_dataAB_AWSIZE,
        m_axi_dataAB_AWBURST,
        m_axi_dataAB_AWLOCK,
        m_axi_dataAB_AWCACHE,
        m_axi_dataAB_AWPROT,
        m_axi_dataAB_AWQOS,
        m_axi_dataAB_AWREGION,
        m_axi_dataAB_AWUSER,
        m_axi_dataAB_WVALID,
        m_axi_dataAB_WREADY,
        m_axi_dataAB_WDATA,
        m_axi_dataAB_WSTRB,
        m_axi_dataAB_WLAST,
        m_axi_dataAB_WID,
        m_axi_dataAB_WUSER,
        m_axi_dataAB_ARVALID,
        m_axi_dataAB_ARREADY,
        m_axi_dataAB_ARADDR,
        m_axi_dataAB_ARID,
        m_axi_dataAB_ARLEN,
        m_axi_dataAB_ARSIZE,
        m_axi_dataAB_ARBURST,
        m_axi_dataAB_ARLOCK,
        m_axi_dataAB_ARCACHE,
        m_axi_dataAB_ARPROT,
        m_axi_dataAB_ARQOS,
        m_axi_dataAB_ARREGION,
        m_axi_dataAB_ARUSER,
        m_axi_dataAB_RVALID,
        m_axi_dataAB_RREADY,
        m_axi_dataAB_RDATA,
        m_axi_dataAB_RLAST,
        m_axi_dataAB_RID,
        m_axi_dataAB_RFIFONUM,
        m_axi_dataAB_RUSER,
        m_axi_dataAB_RRESP,
        m_axi_dataAB_BVALID,
        m_axi_dataAB_BREADY,
        m_axi_dataAB_BRESP,
        m_axi_dataAB_BID,
        m_axi_dataAB_BUSER,
        sext_ln47,
        AB_local_address0,
        AB_local_ce0,
        AB_local_q0,
        AB_local_1_address0,
        AB_local_1_ce0,
        AB_local_1_q0,
        AB_local_2_address0,
        AB_local_2_ce0,
        AB_local_2_q0,
        AB_local_3_address0,
        AB_local_3_ce0,
        AB_local_3_q0,
        AB_local_4_address0,
        AB_local_4_ce0,
        AB_local_4_q0,
        AB_local_5_address0,
        AB_local_5_ce0,
        AB_local_5_q0,
        AB_local_6_address0,
        AB_local_6_ce0,
        AB_local_6_q0,
        AB_local_7_address0,
        AB_local_7_ce0,
        AB_local_7_q0,
        AB_local_8_address0,
        AB_local_8_ce0,
        AB_local_8_q0,
        AB_local_9_address0,
        AB_local_9_ce0,
        AB_local_9_q0,
        AB_local_10_address0,
        AB_local_10_ce0,
        AB_local_10_q0,
        AB_local_11_address0,
        AB_local_11_ce0,
        AB_local_11_q0,
        AB_local_12_address0,
        AB_local_12_ce0,
        AB_local_12_q0,
        AB_local_13_address0,
        AB_local_13_ce0,
        AB_local_13_q0,
        AB_local_14_address0,
        AB_local_14_ce0,
        AB_local_14_q0,
        AB_local_15_address0,
        AB_local_15_ce0,
        AB_local_15_q0
);

parameter    ap_ST_fsm_pp0_stage0 = 16'd1;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4;
parameter    ap_ST_fsm_pp0_stage3 = 16'd8;
parameter    ap_ST_fsm_pp0_stage4 = 16'd16;
parameter    ap_ST_fsm_pp0_stage5 = 16'd32;
parameter    ap_ST_fsm_pp0_stage6 = 16'd64;
parameter    ap_ST_fsm_pp0_stage7 = 16'd128;
parameter    ap_ST_fsm_pp0_stage8 = 16'd256;
parameter    ap_ST_fsm_pp0_stage9 = 16'd512;
parameter    ap_ST_fsm_pp0_stage10 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 16'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 16'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 16'd32768;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_dataAB_AWVALID;
input   m_axi_dataAB_AWREADY;
output  [63:0] m_axi_dataAB_AWADDR;
output  [0:0] m_axi_dataAB_AWID;
output  [31:0] m_axi_dataAB_AWLEN;
output  [2:0] m_axi_dataAB_AWSIZE;
output  [1:0] m_axi_dataAB_AWBURST;
output  [1:0] m_axi_dataAB_AWLOCK;
output  [3:0] m_axi_dataAB_AWCACHE;
output  [2:0] m_axi_dataAB_AWPROT;
output  [3:0] m_axi_dataAB_AWQOS;
output  [3:0] m_axi_dataAB_AWREGION;
output  [0:0] m_axi_dataAB_AWUSER;
output   m_axi_dataAB_WVALID;
input   m_axi_dataAB_WREADY;
output  [31:0] m_axi_dataAB_WDATA;
output  [3:0] m_axi_dataAB_WSTRB;
output   m_axi_dataAB_WLAST;
output  [0:0] m_axi_dataAB_WID;
output  [0:0] m_axi_dataAB_WUSER;
output   m_axi_dataAB_ARVALID;
input   m_axi_dataAB_ARREADY;
output  [63:0] m_axi_dataAB_ARADDR;
output  [0:0] m_axi_dataAB_ARID;
output  [31:0] m_axi_dataAB_ARLEN;
output  [2:0] m_axi_dataAB_ARSIZE;
output  [1:0] m_axi_dataAB_ARBURST;
output  [1:0] m_axi_dataAB_ARLOCK;
output  [3:0] m_axi_dataAB_ARCACHE;
output  [2:0] m_axi_dataAB_ARPROT;
output  [3:0] m_axi_dataAB_ARQOS;
output  [3:0] m_axi_dataAB_ARREGION;
output  [0:0] m_axi_dataAB_ARUSER;
input   m_axi_dataAB_RVALID;
output   m_axi_dataAB_RREADY;
input  [31:0] m_axi_dataAB_RDATA;
input   m_axi_dataAB_RLAST;
input  [0:0] m_axi_dataAB_RID;
input  [8:0] m_axi_dataAB_RFIFONUM;
input  [0:0] m_axi_dataAB_RUSER;
input  [1:0] m_axi_dataAB_RRESP;
input   m_axi_dataAB_BVALID;
output   m_axi_dataAB_BREADY;
input  [1:0] m_axi_dataAB_BRESP;
input  [0:0] m_axi_dataAB_BID;
input  [0:0] m_axi_dataAB_BUSER;
input  [61:0] sext_ln47;
output  [3:0] AB_local_address0;
output   AB_local_ce0;
input  [31:0] AB_local_q0;
output  [3:0] AB_local_1_address0;
output   AB_local_1_ce0;
input  [31:0] AB_local_1_q0;
output  [3:0] AB_local_2_address0;
output   AB_local_2_ce0;
input  [31:0] AB_local_2_q0;
output  [3:0] AB_local_3_address0;
output   AB_local_3_ce0;
input  [31:0] AB_local_3_q0;
output  [3:0] AB_local_4_address0;
output   AB_local_4_ce0;
input  [31:0] AB_local_4_q0;
output  [3:0] AB_local_5_address0;
output   AB_local_5_ce0;
input  [31:0] AB_local_5_q0;
output  [3:0] AB_local_6_address0;
output   AB_local_6_ce0;
input  [31:0] AB_local_6_q0;
output  [3:0] AB_local_7_address0;
output   AB_local_7_ce0;
input  [31:0] AB_local_7_q0;
output  [3:0] AB_local_8_address0;
output   AB_local_8_ce0;
input  [31:0] AB_local_8_q0;
output  [3:0] AB_local_9_address0;
output   AB_local_9_ce0;
input  [31:0] AB_local_9_q0;
output  [3:0] AB_local_10_address0;
output   AB_local_10_ce0;
input  [31:0] AB_local_10_q0;
output  [3:0] AB_local_11_address0;
output   AB_local_11_ce0;
input  [31:0] AB_local_11_q0;
output  [3:0] AB_local_12_address0;
output   AB_local_12_ce0;
input  [31:0] AB_local_12_q0;
output  [3:0] AB_local_13_address0;
output   AB_local_13_ce0;
input  [31:0] AB_local_13_q0;
output  [3:0] AB_local_14_address0;
output   AB_local_14_ce0;
input  [31:0] AB_local_14_q0;
output  [3:0] AB_local_15_address0;
output   AB_local_15_ce0;
input  [31:0] AB_local_15_q0;

reg ap_idle;
reg m_axi_dataAB_WVALID;
reg[31:0] m_axi_dataAB_WDATA;
reg AB_local_ce0;
reg AB_local_1_ce0;
reg AB_local_2_ce0;
reg AB_local_3_ce0;
reg AB_local_4_ce0;
reg AB_local_5_ce0;
reg AB_local_6_ce0;
reg AB_local_7_ce0;
reg AB_local_8_ce0;
reg AB_local_9_ce0;
reg AB_local_10_ce0;
reg AB_local_11_ce0;
reg AB_local_12_ce0;
reg AB_local_13_ce0;
reg AB_local_14_ce0;
reg AB_local_15_ce0;

(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_state2_pp0_stage1_iter0;
wire    ap_block_state18_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_subdone;
reg   [0:0] icmp_ln47_reg_576;
reg    ap_condition_exit_pp0_iter0_stage1;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_state16_pp0_stage15_iter0;
reg    ap_block_state16_io;
reg    ap_block_pp0_stage15_subdone;
reg    dataAB_blk_n_W;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage1;
wire    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln47_fu_448_p2;
reg   [31:0] AB_local_load_reg_660;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] AB_local_1_load_reg_665;
reg   [31:0] AB_local_2_load_reg_670;
reg   [31:0] AB_local_3_load_reg_675;
reg   [31:0] AB_local_4_load_reg_680;
reg   [31:0] AB_local_5_load_reg_685;
reg   [31:0] AB_local_6_load_reg_690;
reg   [31:0] AB_local_7_load_reg_695;
reg   [31:0] AB_local_8_load_reg_700;
reg   [31:0] AB_local_9_load_reg_705;
reg   [31:0] AB_local_10_load_reg_710;
reg   [31:0] AB_local_11_load_reg_715;
reg   [31:0] AB_local_12_load_reg_720;
reg   [31:0] AB_local_13_load_reg_725;
reg   [31:0] AB_local_14_load_reg_730;
reg   [31:0] AB_local_15_load_reg_735;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] i_2_cast_fu_460_p1;
wire    ap_block_state3_pp0_stage2_iter0;
reg    ap_block_state3_io;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] bitcast_ln49_fu_485_p1;
wire    ap_block_pp0_stage2_01001;
wire    ap_block_state4_pp0_stage3_iter0;
reg    ap_block_state4_io;
reg    ap_block_pp0_stage3_11001;
wire   [31:0] bitcast_ln49_1_fu_489_p1;
wire    ap_block_pp0_stage3_01001;
wire    ap_block_state5_pp0_stage4_iter0;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage4_11001;
wire   [31:0] bitcast_ln49_2_fu_493_p1;
wire    ap_block_pp0_stage4_01001;
wire    ap_block_state6_pp0_stage5_iter0;
reg    ap_block_state6_io;
reg    ap_block_pp0_stage5_11001;
wire   [31:0] bitcast_ln49_3_fu_497_p1;
wire    ap_block_pp0_stage5_01001;
wire    ap_block_state7_pp0_stage6_iter0;
reg    ap_block_state7_io;
reg    ap_block_pp0_stage6_11001;
wire   [31:0] bitcast_ln49_4_fu_501_p1;
wire    ap_block_pp0_stage6_01001;
wire    ap_block_state8_pp0_stage7_iter0;
reg    ap_block_state8_io;
reg    ap_block_pp0_stage7_11001;
wire   [31:0] bitcast_ln49_5_fu_505_p1;
wire    ap_block_pp0_stage7_01001;
wire    ap_block_state9_pp0_stage8_iter0;
reg    ap_block_state9_io;
reg    ap_block_pp0_stage8_11001;
wire   [31:0] bitcast_ln49_6_fu_509_p1;
wire    ap_block_pp0_stage8_01001;
wire    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_state10_io;
reg    ap_block_pp0_stage9_11001;
wire   [31:0] bitcast_ln49_7_fu_513_p1;
wire    ap_block_pp0_stage9_01001;
wire    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_state11_io;
reg    ap_block_pp0_stage10_11001;
wire   [31:0] bitcast_ln49_8_fu_517_p1;
wire    ap_block_pp0_stage10_01001;
wire    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_state12_io;
reg    ap_block_pp0_stage11_11001;
wire   [31:0] bitcast_ln49_9_fu_521_p1;
wire    ap_block_pp0_stage11_01001;
wire    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_state13_io;
reg    ap_block_pp0_stage12_11001;
wire   [31:0] bitcast_ln49_10_fu_525_p1;
wire    ap_block_pp0_stage12_01001;
wire    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_state14_io;
reg    ap_block_pp0_stage13_11001;
wire   [31:0] bitcast_ln49_11_fu_529_p1;
wire    ap_block_pp0_stage13_01001;
wire    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage14_11001;
wire   [31:0] bitcast_ln49_12_fu_533_p1;
wire    ap_block_pp0_stage14_01001;
reg    ap_block_pp0_stage15_11001;
wire   [31:0] bitcast_ln49_13_fu_537_p1;
wire    ap_block_pp0_stage15_01001;
wire   [31:0] bitcast_ln49_14_fu_541_p1;
wire    ap_block_pp0_stage0_01001;
wire   [31:0] bitcast_ln49_15_fu_545_p1;
wire    ap_block_pp0_stage1_01001;
reg   [4:0] i_fu_84;
wire   [4:0] add_ln47_fu_454_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_i_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg   [15:0] ap_NS_fsm;
reg    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to1;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage5_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 ap_done_reg = 1'b0;
end

matmul_optimized_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage1),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
            ap_enable_reg_pp0_iter0_reg <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if (((icmp_ln47_fu_448_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            i_fu_84 <= add_ln47_fu_454_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_84 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        AB_local_10_load_reg_710 <= AB_local_10_q0;
        AB_local_11_load_reg_715 <= AB_local_11_q0;
        AB_local_12_load_reg_720 <= AB_local_12_q0;
        AB_local_13_load_reg_725 <= AB_local_13_q0;
        AB_local_14_load_reg_730 <= AB_local_14_q0;
        AB_local_15_load_reg_735 <= AB_local_15_q0;
        AB_local_1_load_reg_665 <= AB_local_1_q0;
        AB_local_2_load_reg_670 <= AB_local_2_q0;
        AB_local_3_load_reg_675 <= AB_local_3_q0;
        AB_local_4_load_reg_680 <= AB_local_4_q0;
        AB_local_5_load_reg_685 <= AB_local_5_q0;
        AB_local_6_load_reg_690 <= AB_local_6_q0;
        AB_local_7_load_reg_695 <= AB_local_7_q0;
        AB_local_8_load_reg_700 <= AB_local_8_q0;
        AB_local_9_load_reg_705 <= AB_local_9_q0;
        AB_local_load_reg_660 <= AB_local_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        icmp_ln47_reg_576 <= icmp_ln47_fu_448_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_10_ce0 = 1'b1;
    end else begin
        AB_local_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_11_ce0 = 1'b1;
    end else begin
        AB_local_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_12_ce0 = 1'b1;
    end else begin
        AB_local_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_13_ce0 = 1'b1;
    end else begin
        AB_local_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_14_ce0 = 1'b1;
    end else begin
        AB_local_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_15_ce0 = 1'b1;
    end else begin
        AB_local_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_1_ce0 = 1'b1;
    end else begin
        AB_local_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_2_ce0 = 1'b1;
    end else begin
        AB_local_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_3_ce0 = 1'b1;
    end else begin
        AB_local_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_4_ce0 = 1'b1;
    end else begin
        AB_local_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_5_ce0 = 1'b1;
    end else begin
        AB_local_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_6_ce0 = 1'b1;
    end else begin
        AB_local_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_7_ce0 = 1'b1;
    end else begin
        AB_local_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_8_ce0 = 1'b1;
    end else begin
        AB_local_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_9_ce0 = 1'b1;
    end else begin
        AB_local_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        AB_local_ce0 = 1'b1;
    end else begin
        AB_local_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln47_reg_576 == 1'd1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (ap_loop_exit_ready == 1'b1) & (1'b0 == ap_block_pp0_stage1_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((ap_enable_reg_pp0_iter1 == 1'b0)) begin
        ap_idle_pp0_1to1 = 1'b1;
    end else begin
        ap_idle_pp0_1to1 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (1'b0 == ap_block_pp0_stage15_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_i_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_84;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage9)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage8)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln47_reg_576 
    == 1'd0) & (1'b0 == ap_block_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage15)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == 
    ap_block_pp0_stage0)))) begin
        dataAB_blk_n_W = m_axi_dataAB_WREADY;
    end else begin
        dataAB_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_15_fu_545_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_14_fu_541_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage15_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_13_fu_537_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage14_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_12_fu_533_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage13_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_11_fu_529_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage12_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_10_fu_525_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage11_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_9_fu_521_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage10_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_8_fu_517_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage9_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_7_fu_513_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage8_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_6_fu_509_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage7_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_5_fu_505_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage6_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_4_fu_501_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage5_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_3_fu_497_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage4_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_2_fu_493_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage3_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_1_fu_489_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage2_01001))) begin
        m_axi_dataAB_WDATA = bitcast_ln49_fu_485_p1;
    end else begin
        m_axi_dataAB_WDATA = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 
    == ap_CS_fsm_pp0_stage7) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15) & (icmp_ln47_reg_576 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) 
    | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        m_axi_dataAB_WVALID = 1'b1;
    end else begin
        m_axi_dataAB_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to1 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b1 == ap_condition_exit_pp0_iter0_stage1)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign AB_local_10_address0 = i_2_cast_fu_460_p1;

assign AB_local_11_address0 = i_2_cast_fu_460_p1;

assign AB_local_12_address0 = i_2_cast_fu_460_p1;

assign AB_local_13_address0 = i_2_cast_fu_460_p1;

assign AB_local_14_address0 = i_2_cast_fu_460_p1;

assign AB_local_15_address0 = i_2_cast_fu_460_p1;

assign AB_local_1_address0 = i_2_cast_fu_460_p1;

assign AB_local_2_address0 = i_2_cast_fu_460_p1;

assign AB_local_3_address0 = i_2_cast_fu_460_p1;

assign AB_local_4_address0 = i_2_cast_fu_460_p1;

assign AB_local_5_address0 = i_2_cast_fu_460_p1;

assign AB_local_6_address0 = i_2_cast_fu_460_p1;

assign AB_local_7_address0 = i_2_cast_fu_460_p1;

assign AB_local_8_address0 = i_2_cast_fu_460_p1;

assign AB_local_9_address0 = i_2_cast_fu_460_p1;

assign AB_local_address0 = i_2_cast_fu_460_p1;

assign add_ln47_fu_454_p2 = (ap_sig_allocacmp_i_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((m_axi_dataAB_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((m_axi_dataAB_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state11_io));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state11_io));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage11_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state12_io));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage12_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state13_io));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage13_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state14_io));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage14_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state15_io));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage15_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state16_io));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state16_io));
end

assign ap_block_pp0_stage1_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((m_axi_dataAB_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((m_axi_dataAB_WREADY == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state3_io));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage3_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state4_io));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage4_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state5_io));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage5_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state6_io));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage6_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state7_io));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage7_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state8_io));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage8_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state9_io));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage9_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state10_io));
end

always @ (*) begin
    ap_block_state10_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state10_pp0_stage9_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state11_pp0_stage10_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state12_pp0_stage11_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state13_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state13_pp0_stage12_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state14_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state14_pp0_stage13_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state15_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state15_pp0_stage14_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state16_pp0_stage15_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state1_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state3_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state4_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state5_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state6_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state7_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state8_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state8_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((m_axi_dataAB_WREADY == 1'b0) & (icmp_ln47_reg_576 == 1'd0));
end

assign ap_block_state9_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage1;

assign bitcast_ln49_10_fu_525_p1 = AB_local_10_load_reg_710;

assign bitcast_ln49_11_fu_529_p1 = AB_local_11_load_reg_715;

assign bitcast_ln49_12_fu_533_p1 = AB_local_12_load_reg_720;

assign bitcast_ln49_13_fu_537_p1 = AB_local_13_load_reg_725;

assign bitcast_ln49_14_fu_541_p1 = AB_local_14_load_reg_730;

assign bitcast_ln49_15_fu_545_p1 = AB_local_15_load_reg_735;

assign bitcast_ln49_1_fu_489_p1 = AB_local_1_load_reg_665;

assign bitcast_ln49_2_fu_493_p1 = AB_local_2_load_reg_670;

assign bitcast_ln49_3_fu_497_p1 = AB_local_3_load_reg_675;

assign bitcast_ln49_4_fu_501_p1 = AB_local_4_load_reg_680;

assign bitcast_ln49_5_fu_505_p1 = AB_local_5_load_reg_685;

assign bitcast_ln49_6_fu_509_p1 = AB_local_6_load_reg_690;

assign bitcast_ln49_7_fu_513_p1 = AB_local_7_load_reg_695;

assign bitcast_ln49_8_fu_517_p1 = AB_local_8_load_reg_700;

assign bitcast_ln49_9_fu_521_p1 = AB_local_9_load_reg_705;

assign bitcast_ln49_fu_485_p1 = AB_local_load_reg_660;

assign i_2_cast_fu_460_p1 = ap_sig_allocacmp_i_1;

assign icmp_ln47_fu_448_p2 = ((ap_sig_allocacmp_i_1 == 5'd16) ? 1'b1 : 1'b0);

assign m_axi_dataAB_ARADDR = 64'd0;

assign m_axi_dataAB_ARBURST = 2'd0;

assign m_axi_dataAB_ARCACHE = 4'd0;

assign m_axi_dataAB_ARID = 1'd0;

assign m_axi_dataAB_ARLEN = 32'd0;

assign m_axi_dataAB_ARLOCK = 2'd0;

assign m_axi_dataAB_ARPROT = 3'd0;

assign m_axi_dataAB_ARQOS = 4'd0;

assign m_axi_dataAB_ARREGION = 4'd0;

assign m_axi_dataAB_ARSIZE = 3'd0;

assign m_axi_dataAB_ARUSER = 1'd0;

assign m_axi_dataAB_ARVALID = 1'b0;

assign m_axi_dataAB_AWADDR = 64'd0;

assign m_axi_dataAB_AWBURST = 2'd0;

assign m_axi_dataAB_AWCACHE = 4'd0;

assign m_axi_dataAB_AWID = 1'd0;

assign m_axi_dataAB_AWLEN = 32'd0;

assign m_axi_dataAB_AWLOCK = 2'd0;

assign m_axi_dataAB_AWPROT = 3'd0;

assign m_axi_dataAB_AWQOS = 4'd0;

assign m_axi_dataAB_AWREGION = 4'd0;

assign m_axi_dataAB_AWSIZE = 3'd0;

assign m_axi_dataAB_AWUSER = 1'd0;

assign m_axi_dataAB_AWVALID = 1'b0;

assign m_axi_dataAB_BREADY = 1'b0;

assign m_axi_dataAB_RREADY = 1'b0;

assign m_axi_dataAB_WID = 1'd0;

assign m_axi_dataAB_WLAST = 1'b0;

assign m_axi_dataAB_WSTRB = 4'd15;

assign m_axi_dataAB_WUSER = 1'd0;

endmodule //matmul_optimized_matmul_optimized_Pipeline_VITIS_LOOP_47_6
