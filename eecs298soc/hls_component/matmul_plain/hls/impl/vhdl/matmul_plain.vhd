-- ==============================================================
-- Generated by Vitis HLS v2024.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity matmul_plain is
generic (
    C_M_AXI_DATAA_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATAA_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATAA_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAA_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATAA_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAA_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAA_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAA_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAB_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATAB_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATAB_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAB_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATAB_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAB_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAB_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAB_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAAB_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATAAB_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATAAB_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAAB_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATAAB_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAAB_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAAB_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATAAB_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATAA_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATAA_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATAA_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATAAB_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATAAB_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATAAB_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATAB_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATAB_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATAB_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_dataA_AWVALID : OUT STD_LOGIC;
    m_axi_dataA_AWREADY : IN STD_LOGIC;
    m_axi_dataA_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_ADDR_WIDTH-1 downto 0);
    m_axi_dataA_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_ID_WIDTH-1 downto 0);
    m_axi_dataA_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dataA_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataA_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataA_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataA_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataA_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataA_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataA_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataA_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_AWUSER_WIDTH-1 downto 0);
    m_axi_dataA_WVALID : OUT STD_LOGIC;
    m_axi_dataA_WREADY : IN STD_LOGIC;
    m_axi_dataA_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_DATA_WIDTH-1 downto 0);
    m_axi_dataA_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_DATA_WIDTH/8-1 downto 0);
    m_axi_dataA_WLAST : OUT STD_LOGIC;
    m_axi_dataA_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_ID_WIDTH-1 downto 0);
    m_axi_dataA_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_WUSER_WIDTH-1 downto 0);
    m_axi_dataA_ARVALID : OUT STD_LOGIC;
    m_axi_dataA_ARREADY : IN STD_LOGIC;
    m_axi_dataA_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_ADDR_WIDTH-1 downto 0);
    m_axi_dataA_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_ID_WIDTH-1 downto 0);
    m_axi_dataA_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dataA_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataA_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataA_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataA_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataA_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataA_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataA_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataA_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAA_ARUSER_WIDTH-1 downto 0);
    m_axi_dataA_RVALID : IN STD_LOGIC;
    m_axi_dataA_RREADY : OUT STD_LOGIC;
    m_axi_dataA_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATAA_DATA_WIDTH-1 downto 0);
    m_axi_dataA_RLAST : IN STD_LOGIC;
    m_axi_dataA_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATAA_ID_WIDTH-1 downto 0);
    m_axi_dataA_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATAA_RUSER_WIDTH-1 downto 0);
    m_axi_dataA_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataA_BVALID : IN STD_LOGIC;
    m_axi_dataA_BREADY : OUT STD_LOGIC;
    m_axi_dataA_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataA_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATAA_ID_WIDTH-1 downto 0);
    m_axi_dataA_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATAA_BUSER_WIDTH-1 downto 0);
    m_axi_dataB_AWVALID : OUT STD_LOGIC;
    m_axi_dataB_AWREADY : IN STD_LOGIC;
    m_axi_dataB_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_ADDR_WIDTH-1 downto 0);
    m_axi_dataB_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_ID_WIDTH-1 downto 0);
    m_axi_dataB_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dataB_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataB_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataB_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataB_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataB_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataB_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataB_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataB_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_AWUSER_WIDTH-1 downto 0);
    m_axi_dataB_WVALID : OUT STD_LOGIC;
    m_axi_dataB_WREADY : IN STD_LOGIC;
    m_axi_dataB_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_DATA_WIDTH-1 downto 0);
    m_axi_dataB_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_DATA_WIDTH/8-1 downto 0);
    m_axi_dataB_WLAST : OUT STD_LOGIC;
    m_axi_dataB_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_ID_WIDTH-1 downto 0);
    m_axi_dataB_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_WUSER_WIDTH-1 downto 0);
    m_axi_dataB_ARVALID : OUT STD_LOGIC;
    m_axi_dataB_ARREADY : IN STD_LOGIC;
    m_axi_dataB_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_ADDR_WIDTH-1 downto 0);
    m_axi_dataB_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_ID_WIDTH-1 downto 0);
    m_axi_dataB_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dataB_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataB_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataB_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataB_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataB_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataB_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataB_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataB_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAB_ARUSER_WIDTH-1 downto 0);
    m_axi_dataB_RVALID : IN STD_LOGIC;
    m_axi_dataB_RREADY : OUT STD_LOGIC;
    m_axi_dataB_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATAB_DATA_WIDTH-1 downto 0);
    m_axi_dataB_RLAST : IN STD_LOGIC;
    m_axi_dataB_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATAB_ID_WIDTH-1 downto 0);
    m_axi_dataB_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATAB_RUSER_WIDTH-1 downto 0);
    m_axi_dataB_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataB_BVALID : IN STD_LOGIC;
    m_axi_dataB_BREADY : OUT STD_LOGIC;
    m_axi_dataB_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataB_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATAB_ID_WIDTH-1 downto 0);
    m_axi_dataB_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATAB_BUSER_WIDTH-1 downto 0);
    m_axi_dataAB_AWVALID : OUT STD_LOGIC;
    m_axi_dataAB_AWREADY : IN STD_LOGIC;
    m_axi_dataAB_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ADDR_WIDTH-1 downto 0);
    m_axi_dataAB_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ID_WIDTH-1 downto 0);
    m_axi_dataAB_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dataAB_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataAB_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataAB_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataAB_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataAB_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataAB_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataAB_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataAB_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_AWUSER_WIDTH-1 downto 0);
    m_axi_dataAB_WVALID : OUT STD_LOGIC;
    m_axi_dataAB_WREADY : IN STD_LOGIC;
    m_axi_dataAB_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_DATA_WIDTH-1 downto 0);
    m_axi_dataAB_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_DATA_WIDTH/8-1 downto 0);
    m_axi_dataAB_WLAST : OUT STD_LOGIC;
    m_axi_dataAB_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ID_WIDTH-1 downto 0);
    m_axi_dataAB_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_WUSER_WIDTH-1 downto 0);
    m_axi_dataAB_ARVALID : OUT STD_LOGIC;
    m_axi_dataAB_ARREADY : IN STD_LOGIC;
    m_axi_dataAB_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ADDR_WIDTH-1 downto 0);
    m_axi_dataAB_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ID_WIDTH-1 downto 0);
    m_axi_dataAB_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_dataAB_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataAB_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataAB_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataAB_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataAB_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_dataAB_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataAB_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_dataAB_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ARUSER_WIDTH-1 downto 0);
    m_axi_dataAB_RVALID : IN STD_LOGIC;
    m_axi_dataAB_RREADY : OUT STD_LOGIC;
    m_axi_dataAB_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATAAB_DATA_WIDTH-1 downto 0);
    m_axi_dataAB_RLAST : IN STD_LOGIC;
    m_axi_dataAB_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ID_WIDTH-1 downto 0);
    m_axi_dataAB_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATAAB_RUSER_WIDTH-1 downto 0);
    m_axi_dataAB_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataAB_BVALID : IN STD_LOGIC;
    m_axi_dataAB_BREADY : OUT STD_LOGIC;
    m_axi_dataAB_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_dataAB_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATAAB_ID_WIDTH-1 downto 0);
    m_axi_dataAB_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATAAB_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of matmul_plain is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "matmul_plain_matmul_plain,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=4167,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=5890,HLS_SYN_LUT=4977,HLS_VERSION=2024_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000100";
    constant ap_ST_fsm_pp0_stage3 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000001000";
    constant ap_ST_fsm_pp0_stage4 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000010000";
    constant ap_ST_fsm_pp0_stage5 : STD_LOGIC_VECTOR (15 downto 0) := "0000000000100000";
    constant ap_ST_fsm_pp0_stage6 : STD_LOGIC_VECTOR (15 downto 0) := "0000000001000000";
    constant ap_ST_fsm_pp0_stage7 : STD_LOGIC_VECTOR (15 downto 0) := "0000000010000000";
    constant ap_ST_fsm_pp0_stage8 : STD_LOGIC_VECTOR (15 downto 0) := "0000000100000000";
    constant ap_ST_fsm_pp0_stage9 : STD_LOGIC_VECTOR (15 downto 0) := "0000001000000000";
    constant ap_ST_fsm_pp0_stage10 : STD_LOGIC_VECTOR (15 downto 0) := "0000010000000000";
    constant ap_ST_fsm_pp0_stage11 : STD_LOGIC_VECTOR (15 downto 0) := "0000100000000000";
    constant ap_ST_fsm_pp0_stage12 : STD_LOGIC_VECTOR (15 downto 0) := "0001000000000000";
    constant ap_ST_fsm_pp0_stage13 : STD_LOGIC_VECTOR (15 downto 0) := "0010000000000000";
    constant ap_ST_fsm_pp0_stage14 : STD_LOGIC_VECTOR (15 downto 0) := "0100000000000000";
    constant ap_ST_fsm_pp0_stage15 : STD_LOGIC_VECTOR (15 downto 0) := "1000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv64_10 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_100 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv5_10 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv4_9 : STD_LOGIC_VECTOR (3 downto 0) := "1001";
    constant ap_const_lv4_B : STD_LOGIC_VECTOR (3 downto 0) := "1011";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (15 downto 0) := "0000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage15 : signal is "none";
    signal dataA_AWREADY : STD_LOGIC;
    signal dataA_WREADY : STD_LOGIC;
    signal dataA_ARVALID : STD_LOGIC;
    signal dataA_ARREADY : STD_LOGIC;
    signal dataA_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataA_RVALID : STD_LOGIC;
    signal dataA_RREADY : STD_LOGIC;
    signal dataA_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataA_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal dataA_BVALID : STD_LOGIC;
    signal dataB_AWREADY : STD_LOGIC;
    signal dataB_WREADY : STD_LOGIC;
    signal dataB_ARVALID : STD_LOGIC;
    signal dataB_ARREADY : STD_LOGIC;
    signal dataB_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_RVALID : STD_LOGIC;
    signal dataB_RREADY : STD_LOGIC;
    signal dataB_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal dataB_BVALID : STD_LOGIC;
    signal ap_block_state16_pp0_stage15_iter0 : BOOLEAN;
    signal dataAB_AWVALID : STD_LOGIC;
    signal dataAB_AWREADY : STD_LOGIC;
    signal dataAB_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal dataAB_WVALID : STD_LOGIC;
    signal dataAB_WREADY : STD_LOGIC;
    signal dataAB_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataAB_ARREADY : STD_LOGIC;
    signal dataAB_RVALID : STD_LOGIC;
    signal dataAB_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal dataAB_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal dataAB_BVALID : STD_LOGIC;
    signal dataAB_BREADY : STD_LOGIC;
    signal first_iter_0_reg_394 : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_394_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state80_io : BOOLEAN;
    signal ap_block_pp0_stage15_subdone : BOOLEAN;
    signal icmp_ln15_fu_1212_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage15 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal A : STD_LOGIC_VECTOR (63 downto 0);
    signal B : STD_LOGIC_VECTOR (63 downto 0);
    signal AB : STD_LOGIC_VECTOR (63 downto 0);
    signal dataA_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal dataA_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage9 : signal is "none";
    signal ap_block_pp0_stage9 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage10 : signal is "none";
    signal ap_block_pp0_stage10 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage11 : signal is "none";
    signal ap_block_pp0_stage11 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage12 : signal is "none";
    signal ap_block_pp0_stage12 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage13 : signal is "none";
    signal ap_block_pp0_stage13 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage14 : signal is "none";
    signal ap_block_pp0_stage14 : BOOLEAN;
    signal ap_block_pp0_stage15 : BOOLEAN;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage3 : signal is "none";
    signal ap_block_pp0_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage4 : signal is "none";
    signal ap_block_pp0_stage4 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage5 : signal is "none";
    signal ap_block_pp0_stage5 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage6 : signal is "none";
    signal ap_block_pp0_stage6 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage7 : signal is "none";
    signal ap_block_pp0_stage7 : BOOLEAN;
    signal ap_CS_fsm_pp0_stage8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage8 : signal is "none";
    signal ap_block_pp0_stage8 : BOOLEAN;
    signal dataB_blk_n_AR : STD_LOGIC;
    signal dataB_blk_n_R : STD_LOGIC;
    signal dataAB_blk_n_AW : STD_LOGIC;
    signal dataAB_blk_n_W : STD_LOGIC;
    signal dataAB_blk_n_B : STD_LOGIC;
    signal icmp_ln15_reg_1655 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_1655_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_394_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state17_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal first_iter_0_reg_394_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_394_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal reg_426 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_state10_pp0_stage9_iter0 : BOOLEAN;
    signal ap_block_pp0_stage9_11001 : BOOLEAN;
    signal ap_block_state11_pp0_stage10_iter0 : BOOLEAN;
    signal ap_block_pp0_stage10_11001 : BOOLEAN;
    signal ap_block_state12_pp0_stage11_iter0 : BOOLEAN;
    signal ap_block_pp0_stage11_11001 : BOOLEAN;
    signal ap_block_state13_pp0_stage12_iter0 : BOOLEAN;
    signal ap_block_pp0_stage12_11001 : BOOLEAN;
    signal ap_block_state14_pp0_stage13_iter0 : BOOLEAN;
    signal ap_block_pp0_stage13_11001 : BOOLEAN;
    signal ap_block_state15_pp0_stage14_iter0 : BOOLEAN;
    signal ap_block_pp0_stage14_11001 : BOOLEAN;
    signal ap_block_pp0_stage15_11001 : BOOLEAN;
    signal ap_block_state2_io : BOOLEAN;
    signal ap_block_state18_pp0_stage1_iter1 : BOOLEAN;
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal ap_block_state19_pp0_stage2_iter1 : BOOLEAN;
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal ap_block_state20_pp0_stage3_iter1 : BOOLEAN;
    signal ap_block_pp0_stage3_11001 : BOOLEAN;
    signal ap_block_state21_pp0_stage4_iter1 : BOOLEAN;
    signal ap_block_pp0_stage4_11001 : BOOLEAN;
    signal ap_block_state22_pp0_stage5_iter1 : BOOLEAN;
    signal ap_block_state86_pp0_stage5_iter5 : BOOLEAN;
    signal ap_block_pp0_stage5_11001 : BOOLEAN;
    signal ap_block_state23_pp0_stage6_iter1 : BOOLEAN;
    signal ap_block_pp0_stage6_11001 : BOOLEAN;
    signal ap_block_state24_pp0_stage7_iter1 : BOOLEAN;
    signal ap_block_pp0_stage7_11001 : BOOLEAN;
    signal ap_block_state25_pp0_stage8_iter1 : BOOLEAN;
    signal ap_block_pp0_stage8_11001 : BOOLEAN;
    signal grp_fu_417_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_430 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_435 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_440 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_445 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_450 : STD_LOGIC_VECTOR (31 downto 0);
    signal AB_read_reg_1366 : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_read_reg_1366_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_read_reg_1366_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_read_reg_1366_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal AB_read_reg_1366_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal B_read_reg_1371 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataA_addr_reg_1390 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_fu_542_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal trunc_ln19_reg_1396 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln1_fu_546_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal shl_ln1_reg_1404 : STD_LOGIC_VECTOR (5 downto 0);
    signal dataB_addr_reg_1411 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln16_fu_590_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln16_reg_1417 : STD_LOGIC_VECTOR (0 downto 0);
    signal zext_ln19_1_cast_fu_617_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_1_cast_reg_1422 : STD_LOGIC_VECTOR (6 downto 0);
    signal dataB_addr_1_reg_1429 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_2_fu_655_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_2_reg_1435 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln19_3_cast_fu_658_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln19_3_cast_reg_1440 : STD_LOGIC_VECTOR (7 downto 0);
    signal dataB_addr_2_reg_1446 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_addr_3_reg_1452 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_6_cast_fu_730_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_6_cast_reg_1458 : STD_LOGIC_VECTOR (8 downto 0);
    signal dataB_addr_4_reg_1463 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln19_7_cast_fu_767_p4 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_7_cast_reg_1469 : STD_LOGIC_VECTOR (8 downto 0);
    signal dataB_addr_5_reg_1474 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_addr_6_reg_1480 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_addr_7_reg_1486 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_addr_8_reg_1492 : STD_LOGIC_VECTOR (63 downto 0);
    signal dataB_addr_read_reg_1498 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_9_reg_1503 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln19_fu_947_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_1_fu_952_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_1_read_reg_1519 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_10_reg_1524 : STD_LOGIC_VECTOR (63 downto 0);
    signal bitcast_ln19_2_fu_992_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_3_fu_997_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_2_read_reg_1540 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_11_reg_1545 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_422_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_1551 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_4_fu_1039_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_5_fu_1044_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_3_read_reg_1566 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_12_reg_1571 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_1_reg_1577 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_6_fu_1080_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_7_fu_1085_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_4_read_reg_1592 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_13_reg_1597 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_2_reg_1603 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_8_fu_1121_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_9_fu_1126_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_5_read_reg_1618 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_14_reg_1623 : STD_LOGIC_VECTOR (63 downto 0);
    signal mul_3_reg_1629 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_10_fu_1165_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_11_fu_1170_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_6_read_reg_1644 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_15_reg_1649 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln15_reg_1655_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_1655_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln15_reg_1655_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal mul_4_reg_1659 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_12_fu_1223_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_13_fu_1228_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_7_read_reg_1674 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_5_reg_1679 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_5_reg_1679_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_14_fu_1232_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_15_fu_1237_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_8_read_reg_1694 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_6_reg_1699 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_6_reg_1699_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_16_fu_1241_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_17_fu_1246_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_9_read_reg_1714 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_7_reg_1719 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_7_reg_1719_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_18_fu_1250_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_19_fu_1255_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_10_read_reg_1734 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_8_reg_1739 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_8_reg_1739_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_20_fu_1259_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_21_fu_1264_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_11_read_reg_1754 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_9_reg_1759 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_9_reg_1759_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_22_fu_1268_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_23_fu_1273_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_12_read_reg_1774 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_s_reg_1779 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_s_reg_1779_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_s_reg_1779_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_24_fu_1277_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_25_fu_1282_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_13_read_reg_1794 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_10_reg_1799 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_10_reg_1799_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_10_reg_1799_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_26_fu_1286_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_27_fu_1291_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_14_read_reg_1814 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_11_reg_1819 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_11_reg_1819_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_11_reg_1819_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_28_fu_1295_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_29_fu_1300_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dataB_addr_15_read_reg_1834 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_12_reg_1839 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_12_reg_1839_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_12_reg_1839_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_30_fu_1304_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln19_31_fu_1309_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_13_reg_1854 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_13_reg_1854_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_13_reg_1854_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_14_reg_1859 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_14_reg_1859_pp0_iter2_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_14_reg_1859_pp0_iter3_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_14_reg_1859_pp0_iter4_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal ap_block_pp0_stage5_subdone : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_phi_mux_icmp_ln165_phi_fu_410_p4 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_cast_cast_fu_532_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_fu_574_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_1_fu_645_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_2_fu_685_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_3_fu_717_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_4_fu_757_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_5_fu_795_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_6_fu_827_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_7_fu_859_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_8_fu_899_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_9_fu_937_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_10_fu_982_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_11_fu_1029_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_12_fu_1070_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_13_fu_1111_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_14_fu_1152_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln19_15_fu_1196_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln15_fu_1322_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal indvar_flatten2_fu_140 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln15_1_fu_1206_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal i3_fu_144 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal i_fu_492_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_i3_load : STD_LOGIC_VECTOR (4 downto 0);
    signal j4_fu_148 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal j_fu_584_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_j4_load : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln156_fu_152 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal add_ln15_fu_596_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_sig_allocacmp_add_ln156_load : STD_LOGIC_VECTOR (4 downto 0);
    signal grp_fu_417_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_422_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln16_fu_500_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal shl_ln_fu_504_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln16_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln16_fu_516_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal p_cast_fu_522_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal select_ln15_fu_484_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln19_fu_554_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_fu_558_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_564_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_1_fu_626_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_1_fu_630_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_1_fu_635_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_3_fu_666_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_2_fu_670_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_2_fu_675_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_16_fu_695_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln19_4_fu_698_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_3_fu_702_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_3_fu_707_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_5_fu_727_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln19_6_fu_738_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_4_fu_742_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_4_fu_747_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_7_fu_776_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_5_fu_780_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_5_fu_785_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_17_fu_805_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_8_fu_808_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_6_fu_812_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_6_fu_817_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_18_fu_837_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_9_fu_840_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_7_fu_844_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_7_fu_849_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_10_fu_869_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln19_11_cast_fu_872_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_11_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_8_fu_884_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_8_fu_889_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_12_cast_fu_909_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_12_fu_918_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_9_fu_922_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_9_fu_927_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_14_cast_fu_956_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_13_fu_963_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_10_fu_967_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_s_fu_972_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal zext_ln19_15_cast_fu_1001_p4 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_14_fu_1010_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_11_fu_1014_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_10_fu_1019_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_19_fu_1048_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_15_fu_1051_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_12_fu_1055_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_11_fu_1060_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_20_fu_1089_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_16_fu_1092_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_13_fu_1096_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_12_fu_1101_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_21_fu_1130_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_17_fu_1133_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_14_fu_1137_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_13_fu_1142_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal sext_ln19_22_fu_1174_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln19_18_fu_1177_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln19_15_fu_1181_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln19_14_fu_1186_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_fu_1313_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_417_ce : STD_LOGIC;
    signal grp_fu_422_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_condition_exit_pp0_iter5_stage5 : STD_LOGIC;
    signal ap_idle_pp0_0to4 : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter4_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter5_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_idle_pp0_1to5 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal ap_block_pp0_stage3_subdone : BOOLEAN;
    signal ap_block_pp0_stage4_subdone : BOOLEAN;
    signal ap_block_pp0_stage6_subdone : BOOLEAN;
    signal ap_block_pp0_stage7_subdone : BOOLEAN;
    signal ap_block_pp0_stage8_subdone : BOOLEAN;
    signal ap_block_pp0_stage9_subdone : BOOLEAN;
    signal ap_block_pp0_stage10_subdone : BOOLEAN;
    signal ap_block_pp0_stage11_subdone : BOOLEAN;
    signal ap_block_pp0_stage12_subdone : BOOLEAN;
    signal ap_block_pp0_stage13_subdone : BOOLEAN;
    signal ap_block_pp0_stage14_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ready_sig : STD_LOGIC;
    signal ap_done_sig : STD_LOGIC;
    signal ap_condition_855 : BOOLEAN;
    signal ap_condition_1884 : BOOLEAN;
    signal ap_condition_1888 : BOOLEAN;
    signal ap_condition_1891 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component matmul_plain_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_plain_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component matmul_plain_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        A : OUT STD_LOGIC_VECTOR (63 downto 0);
        B : OUT STD_LOGIC_VECTOR (63 downto 0);
        AB : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component matmul_plain_dataA_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component matmul_plain_dataAB_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component matmul_plain_dataB_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        CH0_USER_RFIFONUM_WIDTH : INTEGER;
        CH0_USER_DW : INTEGER;
        CH0_USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_CH0_ARVALID : IN STD_LOGIC;
        I_CH0_ARREADY : OUT STD_LOGIC;
        I_CH0_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RVALID : OUT STD_LOGIC;
        I_CH0_RREADY : IN STD_LOGIC;
        I_CH0_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_CH0_AWVALID : IN STD_LOGIC;
        I_CH0_AWREADY : OUT STD_LOGIC;
        I_CH0_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_CH0_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WVALID : IN STD_LOGIC;
        I_CH0_WREADY : OUT STD_LOGIC;
        I_CH0_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_CH0_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_CH0_BVALID : OUT STD_LOGIC;
        I_CH0_BREADY : IN STD_LOGIC );
    end component;


    component matmul_plain_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    ctrl_s_axi_U : component matmul_plain_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        A => A,
        B => B,
        AB => AB,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    dataA_m_axi_U : component matmul_plain_dataA_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATAA_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATAA_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATAA_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATAA_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATAA_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATAA_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATAA_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATAA_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATAA_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATAA_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATAA_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 32,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_dataA_AWVALID,
        AWREADY => m_axi_dataA_AWREADY,
        AWADDR => m_axi_dataA_AWADDR,
        AWID => m_axi_dataA_AWID,
        AWLEN => m_axi_dataA_AWLEN,
        AWSIZE => m_axi_dataA_AWSIZE,
        AWBURST => m_axi_dataA_AWBURST,
        AWLOCK => m_axi_dataA_AWLOCK,
        AWCACHE => m_axi_dataA_AWCACHE,
        AWPROT => m_axi_dataA_AWPROT,
        AWQOS => m_axi_dataA_AWQOS,
        AWREGION => m_axi_dataA_AWREGION,
        AWUSER => m_axi_dataA_AWUSER,
        WVALID => m_axi_dataA_WVALID,
        WREADY => m_axi_dataA_WREADY,
        WDATA => m_axi_dataA_WDATA,
        WSTRB => m_axi_dataA_WSTRB,
        WLAST => m_axi_dataA_WLAST,
        WID => m_axi_dataA_WID,
        WUSER => m_axi_dataA_WUSER,
        ARVALID => m_axi_dataA_ARVALID,
        ARREADY => m_axi_dataA_ARREADY,
        ARADDR => m_axi_dataA_ARADDR,
        ARID => m_axi_dataA_ARID,
        ARLEN => m_axi_dataA_ARLEN,
        ARSIZE => m_axi_dataA_ARSIZE,
        ARBURST => m_axi_dataA_ARBURST,
        ARLOCK => m_axi_dataA_ARLOCK,
        ARCACHE => m_axi_dataA_ARCACHE,
        ARPROT => m_axi_dataA_ARPROT,
        ARQOS => m_axi_dataA_ARQOS,
        ARREGION => m_axi_dataA_ARREGION,
        ARUSER => m_axi_dataA_ARUSER,
        RVALID => m_axi_dataA_RVALID,
        RREADY => m_axi_dataA_RREADY,
        RDATA => m_axi_dataA_RDATA,
        RLAST => m_axi_dataA_RLAST,
        RID => m_axi_dataA_RID,
        RUSER => m_axi_dataA_RUSER,
        RRESP => m_axi_dataA_RRESP,
        BVALID => m_axi_dataA_BVALID,
        BREADY => m_axi_dataA_BREADY,
        BRESP => m_axi_dataA_BRESP,
        BID => m_axi_dataA_BID,
        BUSER => m_axi_dataA_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => dataA_ARVALID,
        I_CH0_ARREADY => dataA_ARREADY,
        I_CH0_ARADDR => dataA_addr_reg_1390,
        I_CH0_ARLEN => dataA_ARLEN,
        I_CH0_RVALID => dataA_RVALID,
        I_CH0_RREADY => dataA_RREADY,
        I_CH0_RDATA => dataA_RDATA,
        I_CH0_RFIFONUM => dataA_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => dataA_AWREADY,
        I_CH0_AWADDR => ap_const_lv64_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => dataA_WREADY,
        I_CH0_WDATA => ap_const_lv32_0,
        I_CH0_WSTRB => ap_const_lv4_0,
        I_CH0_BVALID => dataA_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    dataAB_m_axi_U : component matmul_plain_dataAB_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATAAB_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATAAB_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATAAB_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATAAB_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATAAB_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATAAB_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATAAB_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATAAB_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATAAB_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATAAB_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATAAB_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 32,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 0,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_dataAB_AWVALID,
        AWREADY => m_axi_dataAB_AWREADY,
        AWADDR => m_axi_dataAB_AWADDR,
        AWID => m_axi_dataAB_AWID,
        AWLEN => m_axi_dataAB_AWLEN,
        AWSIZE => m_axi_dataAB_AWSIZE,
        AWBURST => m_axi_dataAB_AWBURST,
        AWLOCK => m_axi_dataAB_AWLOCK,
        AWCACHE => m_axi_dataAB_AWCACHE,
        AWPROT => m_axi_dataAB_AWPROT,
        AWQOS => m_axi_dataAB_AWQOS,
        AWREGION => m_axi_dataAB_AWREGION,
        AWUSER => m_axi_dataAB_AWUSER,
        WVALID => m_axi_dataAB_WVALID,
        WREADY => m_axi_dataAB_WREADY,
        WDATA => m_axi_dataAB_WDATA,
        WSTRB => m_axi_dataAB_WSTRB,
        WLAST => m_axi_dataAB_WLAST,
        WID => m_axi_dataAB_WID,
        WUSER => m_axi_dataAB_WUSER,
        ARVALID => m_axi_dataAB_ARVALID,
        ARREADY => m_axi_dataAB_ARREADY,
        ARADDR => m_axi_dataAB_ARADDR,
        ARID => m_axi_dataAB_ARID,
        ARLEN => m_axi_dataAB_ARLEN,
        ARSIZE => m_axi_dataAB_ARSIZE,
        ARBURST => m_axi_dataAB_ARBURST,
        ARLOCK => m_axi_dataAB_ARLOCK,
        ARCACHE => m_axi_dataAB_ARCACHE,
        ARPROT => m_axi_dataAB_ARPROT,
        ARQOS => m_axi_dataAB_ARQOS,
        ARREGION => m_axi_dataAB_ARREGION,
        ARUSER => m_axi_dataAB_ARUSER,
        RVALID => m_axi_dataAB_RVALID,
        RREADY => m_axi_dataAB_RREADY,
        RDATA => m_axi_dataAB_RDATA,
        RLAST => m_axi_dataAB_RLAST,
        RID => m_axi_dataAB_RID,
        RUSER => m_axi_dataAB_RUSER,
        RRESP => m_axi_dataAB_RRESP,
        BVALID => m_axi_dataAB_BVALID,
        BREADY => m_axi_dataAB_BREADY,
        BRESP => m_axi_dataAB_BRESP,
        BID => m_axi_dataAB_BID,
        BUSER => m_axi_dataAB_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => ap_const_logic_0,
        I_CH0_ARREADY => dataAB_ARREADY,
        I_CH0_ARADDR => ap_const_lv64_0,
        I_CH0_ARLEN => ap_const_lv32_0,
        I_CH0_RVALID => dataAB_RVALID,
        I_CH0_RREADY => ap_const_logic_0,
        I_CH0_RDATA => dataAB_RDATA,
        I_CH0_RFIFONUM => dataAB_RFIFONUM,
        I_CH0_AWVALID => dataAB_AWVALID,
        I_CH0_AWREADY => dataAB_AWREADY,
        I_CH0_AWADDR => sext_ln15_fu_1322_p1,
        I_CH0_AWLEN => dataAB_AWLEN,
        I_CH0_WVALID => dataAB_WVALID,
        I_CH0_WREADY => dataAB_WREADY,
        I_CH0_WDATA => dataAB_WDATA,
        I_CH0_WSTRB => ap_const_lv4_F,
        I_CH0_BVALID => dataAB_BVALID,
        I_CH0_BREADY => dataAB_BREADY);

    dataB_m_axi_U : component matmul_plain_dataB_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATAB_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATAB_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATAB_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATAB_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATAB_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATAB_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATAB_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATAB_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATAB_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATAB_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATAB_CACHE_VALUE,
        CH0_USER_RFIFONUM_WIDTH => 9,
        CH0_USER_DW => 32,
        CH0_USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 0)
    port map (
        AWVALID => m_axi_dataB_AWVALID,
        AWREADY => m_axi_dataB_AWREADY,
        AWADDR => m_axi_dataB_AWADDR,
        AWID => m_axi_dataB_AWID,
        AWLEN => m_axi_dataB_AWLEN,
        AWSIZE => m_axi_dataB_AWSIZE,
        AWBURST => m_axi_dataB_AWBURST,
        AWLOCK => m_axi_dataB_AWLOCK,
        AWCACHE => m_axi_dataB_AWCACHE,
        AWPROT => m_axi_dataB_AWPROT,
        AWQOS => m_axi_dataB_AWQOS,
        AWREGION => m_axi_dataB_AWREGION,
        AWUSER => m_axi_dataB_AWUSER,
        WVALID => m_axi_dataB_WVALID,
        WREADY => m_axi_dataB_WREADY,
        WDATA => m_axi_dataB_WDATA,
        WSTRB => m_axi_dataB_WSTRB,
        WLAST => m_axi_dataB_WLAST,
        WID => m_axi_dataB_WID,
        WUSER => m_axi_dataB_WUSER,
        ARVALID => m_axi_dataB_ARVALID,
        ARREADY => m_axi_dataB_ARREADY,
        ARADDR => m_axi_dataB_ARADDR,
        ARID => m_axi_dataB_ARID,
        ARLEN => m_axi_dataB_ARLEN,
        ARSIZE => m_axi_dataB_ARSIZE,
        ARBURST => m_axi_dataB_ARBURST,
        ARLOCK => m_axi_dataB_ARLOCK,
        ARCACHE => m_axi_dataB_ARCACHE,
        ARPROT => m_axi_dataB_ARPROT,
        ARQOS => m_axi_dataB_ARQOS,
        ARREGION => m_axi_dataB_ARREGION,
        ARUSER => m_axi_dataB_ARUSER,
        RVALID => m_axi_dataB_RVALID,
        RREADY => m_axi_dataB_RREADY,
        RDATA => m_axi_dataB_RDATA,
        RLAST => m_axi_dataB_RLAST,
        RID => m_axi_dataB_RID,
        RUSER => m_axi_dataB_RUSER,
        RRESP => m_axi_dataB_RRESP,
        BVALID => m_axi_dataB_BVALID,
        BREADY => m_axi_dataB_BREADY,
        BRESP => m_axi_dataB_BRESP,
        BID => m_axi_dataB_BID,
        BUSER => m_axi_dataB_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_CH0_ARVALID => dataB_ARVALID,
        I_CH0_ARREADY => dataB_ARREADY,
        I_CH0_ARADDR => dataB_ARADDR,
        I_CH0_ARLEN => dataB_ARLEN,
        I_CH0_RVALID => dataB_RVALID,
        I_CH0_RREADY => dataB_RREADY,
        I_CH0_RDATA => dataB_RDATA,
        I_CH0_RFIFONUM => dataB_RFIFONUM,
        I_CH0_AWVALID => ap_const_logic_0,
        I_CH0_AWREADY => dataB_AWREADY,
        I_CH0_AWADDR => ap_const_lv64_0,
        I_CH0_AWLEN => ap_const_lv32_0,
        I_CH0_WVALID => ap_const_logic_0,
        I_CH0_WREADY => dataB_WREADY,
        I_CH0_WDATA => ap_const_lv32_0,
        I_CH0_WSTRB => ap_const_lv4_0,
        I_CH0_BVALID => dataB_BVALID,
        I_CH0_BREADY => ap_const_logic_0);

    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component matmul_plain_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_417_p0,
        din1 => grp_fu_417_p1,
        ce => grp_fu_417_ce,
        dout => grp_fu_417_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U2 : component matmul_plain_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_422_p0,
        din1 => grp_fu_422_p1,
        ce => grp_fu_422_ce,
        dout => grp_fu_422_p2);

    flow_control_loop_pipe_U : component matmul_plain_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => ap_start,
        ap_ready => ap_ready_sig,
        ap_done => ap_done_sig,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage15,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_const_logic_1);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
                    ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    add_ln156_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_855)) then
                add_ln156_fu_152 <= add_ln15_fu_596_p2;
            end if;
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter1_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage5) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter2_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage5) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter3_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage5) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter4_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage5) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
            end if; 
        end if;
    end process;

    ap_loop_exit_ready_pp0_iter5_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage5) and (ap_idle_pp0_0to4 = ap_const_logic_1)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_loop_exit_ready_pp0_iter4_reg = ap_const_logic_0)))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_const_logic_0;
            elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
            end if; 
        end if;
    end process;

    first_iter_0_reg_394_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
                if ((ap_const_boolean_1 = ap_condition_1888)) then 
                    first_iter_0_reg_394 <= ap_const_lv1_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_init = ap_const_logic_1))) then 
                    first_iter_0_reg_394 <= ap_const_lv1_1;
                end if;
            end if; 
        end if;
    end process;

    i3_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_855)) then
                i3_fu_144 <= i_fu_492_p3;
            end if;
        end if;
    end process;

    indvar_flatten2_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_enable_reg_pp0_iter0 = ap_const_logic_1)) then
                if ((ap_const_boolean_1 = ap_condition_1891)) then 
                    indvar_flatten2_fu_140 <= ap_const_lv8_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
                    indvar_flatten2_fu_140 <= add_ln15_1_fu_1206_p2;
                end if;
            end if; 
        end if;
    end process;

    j4_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_855)) then
                j4_fu_148 <= j_fu_584_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                AB_read_reg_1366 <= AB;
                AB_read_reg_1366_pp0_iter1_reg <= AB_read_reg_1366;
                AB_read_reg_1366_pp0_iter2_reg <= AB_read_reg_1366_pp0_iter1_reg;
                AB_read_reg_1366_pp0_iter3_reg <= AB_read_reg_1366_pp0_iter2_reg;
                AB_read_reg_1366_pp0_iter4_reg <= AB_read_reg_1366_pp0_iter3_reg;
                B_read_reg_1371 <= B;
                dataA_addr_reg_1390 <= p_cast_cast_fu_532_p1;
                dataB_addr_7_read_reg_1674 <= dataB_RDATA;
                dataB_addr_reg_1411 <= sext_ln19_fu_574_p1;
                first_iter_0_reg_394_pp0_iter1_reg <= first_iter_0_reg_394;
                first_iter_0_reg_394_pp0_iter2_reg <= first_iter_0_reg_394_pp0_iter1_reg;
                first_iter_0_reg_394_pp0_iter3_reg <= first_iter_0_reg_394_pp0_iter2_reg;
                first_iter_0_reg_394_pp0_iter4_reg <= first_iter_0_reg_394_pp0_iter3_reg;
                    shl_ln1_reg_1404(5 downto 2) <= shl_ln1_fu_546_p3(5 downto 2);
                trunc_ln19_reg_1396 <= trunc_ln19_fu_542_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                dataB_addr_10_read_reg_1734 <= dataB_RDATA;
                dataB_addr_3_reg_1452 <= sext_ln19_3_fu_717_p1;
                mul_7_reg_1719_pp0_iter2_reg <= mul_7_reg_1719;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                dataB_addr_10_reg_1524 <= sext_ln19_10_fu_982_p1;
                dataB_addr_1_read_reg_1519 <= dataB_RDATA;
                mul_13_reg_1854_pp0_iter2_reg <= mul_13_reg_1854;
                mul_13_reg_1854_pp0_iter3_reg <= mul_13_reg_1854_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                dataB_addr_11_read_reg_1754 <= dataB_RDATA;
                dataB_addr_4_reg_1463 <= sext_ln19_4_fu_757_p1;
                mul_8_reg_1739_pp0_iter2_reg <= mul_8_reg_1739;
                    zext_ln19_6_cast_reg_1458(5 downto 2) <= zext_ln19_6_cast_fu_730_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                dataB_addr_11_reg_1545 <= sext_ln19_11_fu_1029_p1;
                dataB_addr_2_read_reg_1540 <= dataB_RDATA;
                mul_14_reg_1859_pp0_iter2_reg <= mul_14_reg_1859;
                mul_14_reg_1859_pp0_iter3_reg <= mul_14_reg_1859_pp0_iter2_reg;
                mul_14_reg_1859_pp0_iter4_reg <= mul_14_reg_1859_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                dataB_addr_12_read_reg_1774 <= dataB_RDATA;
                dataB_addr_5_reg_1474 <= sext_ln19_5_fu_795_p1;
                mul_9_reg_1759_pp0_iter2_reg <= mul_9_reg_1759;
                    zext_ln19_7_cast_reg_1469(5 downto 2) <= zext_ln19_7_cast_fu_767_p4(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                dataB_addr_12_reg_1571 <= sext_ln19_12_fu_1070_p1;
                dataB_addr_3_read_reg_1566 <= dataB_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                dataB_addr_13_read_reg_1794 <= dataB_RDATA;
                dataB_addr_6_reg_1480 <= sext_ln19_6_fu_827_p1;
                mul_s_reg_1779_pp0_iter2_reg <= mul_s_reg_1779;
                mul_s_reg_1779_pp0_iter3_reg <= mul_s_reg_1779_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                dataB_addr_13_reg_1597 <= sext_ln19_13_fu_1111_p1;
                dataB_addr_4_read_reg_1592 <= dataB_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                dataB_addr_14_read_reg_1814 <= dataB_RDATA;
                dataB_addr_7_reg_1486 <= sext_ln19_7_fu_859_p1;
                mul_10_reg_1799_pp0_iter2_reg <= mul_10_reg_1799;
                mul_10_reg_1799_pp0_iter3_reg <= mul_10_reg_1799_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                dataB_addr_14_reg_1623 <= sext_ln19_14_fu_1152_p1;
                dataB_addr_5_read_reg_1618 <= dataB_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                dataB_addr_15_read_reg_1834 <= dataB_RDATA;
                dataB_addr_8_reg_1492 <= sext_ln19_8_fu_899_p1;
                mul_11_reg_1819_pp0_iter2_reg <= mul_11_reg_1819;
                mul_11_reg_1819_pp0_iter3_reg <= mul_11_reg_1819_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                dataB_addr_15_reg_1649 <= sext_ln19_15_fu_1196_p1;
                dataB_addr_6_read_reg_1644 <= dataB_RDATA;
                icmp_ln15_reg_1655 <= icmp_ln15_fu_1212_p2;
                icmp_ln15_reg_1655_pp0_iter1_reg <= icmp_ln15_reg_1655;
                icmp_ln15_reg_1655_pp0_iter2_reg <= icmp_ln15_reg_1655_pp0_iter1_reg;
                icmp_ln15_reg_1655_pp0_iter3_reg <= icmp_ln15_reg_1655_pp0_iter2_reg;
                icmp_ln15_reg_1655_pp0_iter4_reg <= icmp_ln15_reg_1655_pp0_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                dataB_addr_1_reg_1429 <= sext_ln19_1_fu_645_p1;
                dataB_addr_8_read_reg_1694 <= dataB_RDATA;
                mul_5_reg_1679_pp0_iter2_reg <= mul_5_reg_1679;
                    zext_ln19_1_cast_reg_1422(5 downto 2) <= zext_ln19_1_cast_fu_617_p4(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                dataB_addr_2_reg_1446 <= sext_ln19_2_fu_685_p1;
                dataB_addr_9_read_reg_1714 <= dataB_RDATA;
                mul_6_reg_1699_pp0_iter2_reg <= mul_6_reg_1699;
                    zext_ln19_2_reg_1435(5 downto 2) <= zext_ln19_2_fu_655_p1(5 downto 2);
                    zext_ln19_3_cast_reg_1440(5 downto 2) <= zext_ln19_3_cast_fu_658_p3(5 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                dataB_addr_9_reg_1503 <= sext_ln19_9_fu_937_p1;
                dataB_addr_read_reg_1498 <= dataB_RDATA;
                mul_12_reg_1839_pp0_iter2_reg <= mul_12_reg_1839;
                mul_12_reg_1839_pp0_iter3_reg <= mul_12_reg_1839_pp0_iter2_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                icmp_ln16_reg_1417 <= icmp_ln16_fu_590_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then
                mul_10_reg_1799 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then
                mul_11_reg_1819 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then
                mul_12_reg_1839 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then
                mul_13_reg_1854 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then
                mul_14_reg_1859 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then
                mul_1_reg_1577 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then
                mul_2_reg_1603 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then
                mul_3_reg_1629 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                mul_4_reg_1659 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then
                mul_5_reg_1679 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then
                mul_6_reg_1699 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then
                mul_7_reg_1719 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then
                mul_8_reg_1739 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then
                mul_9_reg_1759 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then
                mul_reg_1551 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then
                mul_s_reg_1779 <= grp_fu_422_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then
                reg_426 <= dataA_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)))) then
                reg_430 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then
                reg_435 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then
                reg_440 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then
                reg_445 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)))) then
                reg_450 <= grp_fu_417_p2;
            end if;
        end if;
    end process;
    shl_ln1_reg_1404(1 downto 0) <= "00";
    zext_ln19_1_cast_reg_1422(1 downto 0) <= "00";
    zext_ln19_1_cast_reg_1422(6) <= '1';
    zext_ln19_2_reg_1435(1 downto 0) <= "00";
    zext_ln19_2_reg_1435(6) <= '0';
    zext_ln19_3_cast_reg_1440(1 downto 0) <= "00";
    zext_ln19_3_cast_reg_1440(7 downto 6) <= "10";
    zext_ln19_6_cast_reg_1458(1 downto 0) <= "00";
    zext_ln19_6_cast_reg_1458(8 downto 6) <= "100";
    zext_ln19_7_cast_reg_1469(1 downto 0) <= "00";
    zext_ln19_7_cast_reg_1469(8 downto 6) <= "101";

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage15_subdone, ap_block_pp0_stage5_subdone, ap_block_pp0_stage0_subdone, ap_condition_exit_pp0_iter5_stage5, ap_idle_pp0_0to4, ap_idle_pp0_1to5, ap_block_pp0_stage1_subdone, ap_block_pp0_stage2_subdone, ap_block_pp0_stage3_subdone, ap_block_pp0_stage4_subdone, ap_block_pp0_stage6_subdone, ap_block_pp0_stage7_subdone, ap_block_pp0_stage8_subdone, ap_block_pp0_stage9_subdone, ap_block_pp0_stage10_subdone, ap_block_pp0_stage11_subdone, ap_block_pp0_stage12_subdone, ap_block_pp0_stage13_subdone, ap_block_pp0_stage14_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to5 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when ap_ST_fsm_pp0_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage3;
                end if;
            when ap_ST_fsm_pp0_stage4 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage4_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage4;
                end if;
            when ap_ST_fsm_pp0_stage5 => 
                if (((ap_const_logic_1 = ap_condition_exit_pp0_iter5_stage5) and (ap_idle_pp0_0to4 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage5_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage5;
                end if;
            when ap_ST_fsm_pp0_stage6 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage6_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage6;
                end if;
            when ap_ST_fsm_pp0_stage7 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage7_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage7;
                end if;
            when ap_ST_fsm_pp0_stage8 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage8_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage8;
                end if;
            when ap_ST_fsm_pp0_stage9 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage9_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage9;
                end if;
            when ap_ST_fsm_pp0_stage10 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage10_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage10;
                end if;
            when ap_ST_fsm_pp0_stage11 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage11_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage11;
                end if;
            when ap_ST_fsm_pp0_stage12 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage12_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage12;
                end if;
            when ap_ST_fsm_pp0_stage13 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage13_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage13;
                end if;
            when ap_ST_fsm_pp0_stage14 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage14_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage14;
                end if;
            when ap_ST_fsm_pp0_stage15 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage15_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage15;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXX";
        end case;
    end process;
    add_ln15_1_fu_1206_p2 <= std_logic_vector(unsigned(indvar_flatten2_fu_140) + unsigned(ap_const_lv8_1));
    add_ln15_fu_596_p2 <= std_logic_vector(unsigned(i_fu_492_p3) + unsigned(ap_const_lv5_1));
    add_ln16_fu_516_p2 <= std_logic_vector(unsigned(zext_ln16_fu_512_p1) + unsigned(A));
    add_ln19_10_fu_967_p2 <= std_logic_vector(unsigned(zext_ln19_13_fu_963_p1) + unsigned(B_read_reg_1371));
    add_ln19_11_fu_1014_p2 <= std_logic_vector(unsigned(zext_ln19_14_fu_1010_p1) + unsigned(B_read_reg_1371));
    add_ln19_12_fu_1055_p2 <= std_logic_vector(unsigned(zext_ln19_15_fu_1051_p1) + unsigned(B_read_reg_1371));
    add_ln19_13_fu_1096_p2 <= std_logic_vector(unsigned(zext_ln19_16_fu_1092_p1) + unsigned(B_read_reg_1371));
    add_ln19_14_fu_1137_p2 <= std_logic_vector(unsigned(zext_ln19_17_fu_1133_p1) + unsigned(B_read_reg_1371));
    add_ln19_15_fu_1181_p2 <= std_logic_vector(unsigned(zext_ln19_18_fu_1177_p1) + unsigned(B_read_reg_1371));
    add_ln19_1_fu_630_p2 <= std_logic_vector(unsigned(zext_ln19_1_fu_626_p1) + unsigned(B_read_reg_1371));
    add_ln19_2_fu_670_p2 <= std_logic_vector(unsigned(zext_ln19_3_fu_666_p1) + unsigned(B_read_reg_1371));
    add_ln19_3_fu_702_p2 <= std_logic_vector(unsigned(zext_ln19_4_fu_698_p1) + unsigned(B_read_reg_1371));
    add_ln19_4_fu_742_p2 <= std_logic_vector(unsigned(zext_ln19_6_fu_738_p1) + unsigned(B_read_reg_1371));
    add_ln19_5_fu_780_p2 <= std_logic_vector(unsigned(zext_ln19_7_fu_776_p1) + unsigned(B_read_reg_1371));
    add_ln19_6_fu_812_p2 <= std_logic_vector(unsigned(zext_ln19_8_fu_808_p1) + unsigned(B_read_reg_1371));
    add_ln19_7_fu_844_p2 <= std_logic_vector(unsigned(zext_ln19_9_fu_840_p1) + unsigned(B_read_reg_1371));
    add_ln19_8_fu_884_p2 <= std_logic_vector(unsigned(zext_ln19_11_fu_880_p1) + unsigned(B_read_reg_1371));
    add_ln19_9_fu_922_p2 <= std_logic_vector(unsigned(zext_ln19_12_fu_918_p1) + unsigned(B_read_reg_1371));
    add_ln19_fu_558_p2 <= std_logic_vector(unsigned(zext_ln19_fu_554_p1) + unsigned(B));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage10 <= ap_CS_fsm(10);
    ap_CS_fsm_pp0_stage11 <= ap_CS_fsm(11);
    ap_CS_fsm_pp0_stage12 <= ap_CS_fsm(12);
    ap_CS_fsm_pp0_stage13 <= ap_CS_fsm(13);
    ap_CS_fsm_pp0_stage14 <= ap_CS_fsm(14);
    ap_CS_fsm_pp0_stage15 <= ap_CS_fsm(15);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
    ap_CS_fsm_pp0_stage3 <= ap_CS_fsm(3);
    ap_CS_fsm_pp0_stage4 <= ap_CS_fsm(4);
    ap_CS_fsm_pp0_stage5 <= ap_CS_fsm(5);
    ap_CS_fsm_pp0_stage6 <= ap_CS_fsm(6);
    ap_CS_fsm_pp0_stage7 <= ap_CS_fsm(7);
    ap_CS_fsm_pp0_stage8 <= ap_CS_fsm(8);
    ap_CS_fsm_pp0_stage9 <= ap_CS_fsm(9);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state17_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, dataB_ARREADY, dataAB_WREADY, ap_block_state17_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (dataAB_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter1) or (dataB_ARREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, dataB_ARREADY, dataAB_WREADY, ap_block_state17_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (dataAB_WREADY = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state17_pp0_stage0_iter1) or (dataB_ARREADY = ap_const_logic_0))));
    end process;

        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage10 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage10_11001_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state11_pp0_stage10_iter0)
    begin
                ap_block_pp0_stage10_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_pp0_stage10_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage10_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state11_pp0_stage10_iter0)
    begin
                ap_block_pp0_stage10_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state11_pp0_stage10_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage11 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage11_11001_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state12_pp0_stage11_iter0)
    begin
                ap_block_pp0_stage11_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_pp0_stage11_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage11_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state12_pp0_stage11_iter0)
    begin
                ap_block_pp0_stage11_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state12_pp0_stage11_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage12_11001_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state13_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state13_pp0_stage12_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage12_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state13_pp0_stage12_iter0)
    begin
                ap_block_pp0_stage12_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state13_pp0_stage12_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage13 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage13_11001_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state14_pp0_stage13_iter0)
    begin
                ap_block_pp0_stage13_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_pp0_stage13_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage13_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state14_pp0_stage13_iter0)
    begin
                ap_block_pp0_stage13_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state14_pp0_stage13_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage14 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage14_11001_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state15_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state15_pp0_stage14_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage14_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state15_pp0_stage14_iter0)
    begin
                ap_block_pp0_stage14_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state15_pp0_stage14_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage15 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage15_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, dataB_ARREADY, ap_block_state16_pp0_stage15_iter0, ap_block_state80_io)
    begin
                ap_block_pp0_stage15_11001 <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state80_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state16_pp0_stage15_iter0) or (dataB_ARREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage15_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter4, dataB_ARREADY, ap_block_state16_pp0_stage15_iter0, ap_block_state80_io)
    begin
                ap_block_pp0_stage15_subdone <= (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state80_io)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state16_pp0_stage15_iter0) or (dataB_ARREADY = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage1_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state2_io, ap_block_state18_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_pp0_stage1_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;


    ap_block_pp0_stage1_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_block_state2_io, ap_block_state18_pp0_stage1_iter1)
    begin
                ap_block_pp0_stage1_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state18_pp0_stage1_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_io)));
    end process;

        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state19_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_pp0_stage2_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state19_pp0_stage2_iter1)
    begin
                ap_block_pp0_stage2_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state19_pp0_stage2_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage3_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state20_pp0_stage3_iter1)
    begin
                ap_block_pp0_stage3_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state20_pp0_stage3_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage3_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state20_pp0_stage3_iter1)
    begin
                ap_block_pp0_stage3_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state20_pp0_stage3_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage4_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state21_pp0_stage4_iter1)
    begin
                ap_block_pp0_stage4_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_pp0_stage4_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage4_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state21_pp0_stage4_iter1)
    begin
                ap_block_pp0_stage4_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state21_pp0_stage4_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage5 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage5_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, dataB_ARREADY, ap_block_state22_pp0_stage5_iter1, ap_block_state86_pp0_stage5_iter5)
    begin
                ap_block_pp0_stage5_11001 <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state86_pp0_stage5_iter5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_pp0_stage5_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage5_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter5, dataB_ARREADY, ap_block_state22_pp0_stage5_iter1, ap_block_state86_pp0_stage5_iter5)
    begin
                ap_block_pp0_stage5_subdone <= (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state86_pp0_stage5_iter5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state22_pp0_stage5_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage6_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state23_pp0_stage6_iter1)
    begin
                ap_block_pp0_stage6_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_pp0_stage6_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage6_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state23_pp0_stage6_iter1)
    begin
                ap_block_pp0_stage6_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state23_pp0_stage6_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage7 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage7_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state24_pp0_stage7_iter1)
    begin
                ap_block_pp0_stage7_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp0_stage7_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage7_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state24_pp0_stage7_iter1)
    begin
                ap_block_pp0_stage7_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state24_pp0_stage7_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage8_11001_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state25_pp0_stage8_iter1)
    begin
                ap_block_pp0_stage8_11001 <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage8_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage8_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, dataB_ARREADY, ap_block_state25_pp0_stage8_iter1)
    begin
                ap_block_pp0_stage8_subdone <= (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state25_pp0_stage8_iter1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (dataB_ARREADY = ap_const_logic_0)));
    end process;

        ap_block_pp0_stage9 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage9_11001_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state10_pp0_stage9_iter0)
    begin
                ap_block_pp0_stage9_11001 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_pp0_stage9_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_pp0_stage9_subdone_assign_proc : process(ap_enable_reg_pp0_iter0, dataB_ARREADY, ap_block_state10_pp0_stage9_iter0)
    begin
                ap_block_pp0_stage9_subdone <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and ((ap_const_boolean_1 = ap_block_state10_pp0_stage9_iter0) or (dataB_ARREADY = ap_const_logic_0)));
    end process;


    ap_block_state10_pp0_stage9_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state10_pp0_stage9_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state11_pp0_stage10_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state11_pp0_stage10_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state12_pp0_stage11_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state12_pp0_stage11_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state13_pp0_stage12_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state13_pp0_stage12_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state14_pp0_stage13_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state14_pp0_stage13_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state15_pp0_stage14_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state15_pp0_stage14_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state16_pp0_stage15_iter0_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state16_pp0_stage15_iter0 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state17_pp0_stage0_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state17_pp0_stage0_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state18_pp0_stage1_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state18_pp0_stage1_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state19_pp0_stage2_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state19_pp0_stage2_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state20_pp0_stage3_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state20_pp0_stage3_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state21_pp0_stage4_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state21_pp0_stage4_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state22_pp0_stage5_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state22_pp0_stage5_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state23_pp0_stage6_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state23_pp0_stage6_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state24_pp0_stage7_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state24_pp0_stage7_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state25_pp0_stage8_iter1_assign_proc : process(dataA_RVALID, dataB_RVALID)
    begin
                ap_block_state25_pp0_stage8_iter1 <= ((dataB_RVALID = ap_const_logic_0) or (dataA_RVALID = ap_const_logic_0));
    end process;


    ap_block_state2_io_assign_proc : process(dataA_ARREADY, dataB_ARREADY)
    begin
                ap_block_state2_io <= ((dataA_ARREADY = ap_const_logic_0) or (dataB_ARREADY = ap_const_logic_0));
    end process;


    ap_block_state80_io_assign_proc : process(dataAB_AWREADY, first_iter_0_reg_394_pp0_iter4_reg)
    begin
                ap_block_state80_io <= ((first_iter_0_reg_394_pp0_iter4_reg = ap_const_lv1_1) and (dataAB_AWREADY = ap_const_logic_0));
    end process;


    ap_block_state86_pp0_stage5_iter5_assign_proc : process(dataAB_BVALID, icmp_ln15_reg_1655_pp0_iter4_reg)
    begin
                ap_block_state86_pp0_stage5_iter5 <= ((icmp_ln15_reg_1655_pp0_iter4_reg = ap_const_lv1_1) and (dataAB_BVALID = ap_const_logic_0));
    end process;


    ap_condition_1884_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, icmp_ln15_reg_1655)
    begin
                ap_condition_1884 <= ((icmp_ln15_reg_1655 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_1888_assign_proc : process(ap_enable_reg_pp0_iter1, icmp_ln15_reg_1655, ap_block_pp0_stage0_11001)
    begin
                ap_condition_1888 <= ((icmp_ln15_reg_1655 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001));
    end process;


    ap_condition_1891_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_loop_init)
    begin
                ap_condition_1891 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1));
    end process;


    ap_condition_855_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_11001)
    begin
                ap_condition_855 <= ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage15_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone, icmp_ln15_fu_1212_p2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln15_fu_1212_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            ap_condition_exit_pp0_iter0_stage15 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage15 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter5_stage5_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, icmp_ln15_reg_1655_pp0_iter4_reg, ap_block_pp0_stage5_subdone)
    begin
        if (((icmp_ln15_reg_1655_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            ap_condition_exit_pp0_iter5_stage5 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter5_stage5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_done <= ap_done_sig;

    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter5_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage5_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5) and (ap_loop_exit_ready_pp0_iter5_reg = ap_const_logic_1))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_start_int = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_0to4_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0_0to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_0to4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to5_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to5 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to5 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage15;

    ap_phi_mux_icmp_ln165_phi_fu_410_p4_assign_proc : process(ap_CS_fsm_pp0_stage0, icmp_ln16_reg_1417, ap_loop_init, ap_condition_1884)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then
            if ((ap_const_boolean_1 = ap_condition_1884)) then 
                ap_phi_mux_icmp_ln165_phi_fu_410_p4 <= icmp_ln16_reg_1417;
            elsif ((ap_loop_init = ap_const_logic_1)) then 
                ap_phi_mux_icmp_ln165_phi_fu_410_p4 <= ap_const_lv1_0;
            else 
                ap_phi_mux_icmp_ln165_phi_fu_410_p4 <= icmp_ln16_reg_1417;
            end if;
        else 
            ap_phi_mux_icmp_ln165_phi_fu_410_p4 <= icmp_ln16_reg_1417;
        end if; 
    end process;

    ap_ready <= ap_ready_sig;

    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage15, ap_block_pp0_stage15_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    ap_sig_allocacmp_add_ln156_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, add_ln156_fu_152)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_add_ln156_load <= ap_const_lv5_1;
        else 
            ap_sig_allocacmp_add_ln156_load <= add_ln156_fu_152;
        end if; 
    end process;


    ap_sig_allocacmp_i3_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, i3_fu_144)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i3_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_i3_load <= i3_fu_144;
        end if; 
    end process;


    ap_sig_allocacmp_j4_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, ap_loop_init, j4_fu_148)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_j4_load <= ap_const_lv5_0;
        else 
            ap_sig_allocacmp_j4_load <= j4_fu_148;
        end if; 
    end process;

    bitcast_ln19_10_fu_1165_p1 <= reg_426;
    bitcast_ln19_11_fu_1170_p1 <= dataB_addr_5_read_reg_1618;
    bitcast_ln19_12_fu_1223_p1 <= reg_426;
    bitcast_ln19_13_fu_1228_p1 <= dataB_addr_6_read_reg_1644;
    bitcast_ln19_14_fu_1232_p1 <= reg_426;
    bitcast_ln19_15_fu_1237_p1 <= dataB_addr_7_read_reg_1674;
    bitcast_ln19_16_fu_1241_p1 <= reg_426;
    bitcast_ln19_17_fu_1246_p1 <= dataB_addr_8_read_reg_1694;
    bitcast_ln19_18_fu_1250_p1 <= reg_426;
    bitcast_ln19_19_fu_1255_p1 <= dataB_addr_9_read_reg_1714;
    bitcast_ln19_1_fu_952_p1 <= dataB_addr_read_reg_1498;
    bitcast_ln19_20_fu_1259_p1 <= reg_426;
    bitcast_ln19_21_fu_1264_p1 <= dataB_addr_10_read_reg_1734;
    bitcast_ln19_22_fu_1268_p1 <= reg_426;
    bitcast_ln19_23_fu_1273_p1 <= dataB_addr_11_read_reg_1754;
    bitcast_ln19_24_fu_1277_p1 <= reg_426;
    bitcast_ln19_25_fu_1282_p1 <= dataB_addr_12_read_reg_1774;
    bitcast_ln19_26_fu_1286_p1 <= reg_426;
    bitcast_ln19_27_fu_1291_p1 <= dataB_addr_13_read_reg_1794;
    bitcast_ln19_28_fu_1295_p1 <= reg_426;
    bitcast_ln19_29_fu_1300_p1 <= dataB_addr_14_read_reg_1814;
    bitcast_ln19_2_fu_992_p1 <= reg_426;
    bitcast_ln19_30_fu_1304_p1 <= reg_426;
    bitcast_ln19_31_fu_1309_p1 <= dataB_addr_15_read_reg_1834;
    bitcast_ln19_3_fu_997_p1 <= dataB_addr_1_read_reg_1519;
    bitcast_ln19_4_fu_1039_p1 <= reg_426;
    bitcast_ln19_5_fu_1044_p1 <= dataB_addr_2_read_reg_1540;
    bitcast_ln19_6_fu_1080_p1 <= reg_426;
    bitcast_ln19_7_fu_1085_p1 <= dataB_addr_3_read_reg_1566;
    bitcast_ln19_8_fu_1121_p1 <= reg_426;
    bitcast_ln19_9_fu_1126_p1 <= dataB_addr_4_read_reg_1592;
    bitcast_ln19_fu_947_p1 <= reg_426;
    dataAB_AWLEN <= ap_const_lv64_100(32 - 1 downto 0);

    dataAB_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, first_iter_0_reg_394_pp0_iter4_reg, ap_block_pp0_stage15_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (first_iter_0_reg_394_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            dataAB_AWVALID <= ap_const_logic_1;
        else 
            dataAB_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    dataAB_BREADY_assign_proc : process(ap_enable_reg_pp0_iter5, ap_CS_fsm_pp0_stage5, icmp_ln15_reg_1655_pp0_iter4_reg, ap_block_pp0_stage5_11001)
    begin
        if (((icmp_ln15_reg_1655_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            dataAB_BREADY <= ap_const_logic_1;
        else 
            dataAB_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    dataAB_WDATA <= reg_430;

    dataAB_WVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataAB_WVALID <= ap_const_logic_1;
        else 
            dataAB_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    dataAB_blk_n_AW_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, first_iter_0_reg_394_pp0_iter4_reg, m_axi_dataAB_AWREADY, ap_block_pp0_stage15)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (first_iter_0_reg_394_pp0_iter4_reg = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            dataAB_blk_n_AW <= m_axi_dataAB_AWREADY;
        else 
            dataAB_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    dataAB_blk_n_B_assign_proc : process(ap_enable_reg_pp0_iter5, m_axi_dataAB_BVALID, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, icmp_ln15_reg_1655_pp0_iter4_reg)
    begin
        if (((icmp_ln15_reg_1655_pp0_iter4_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            dataAB_blk_n_B <= m_axi_dataAB_BVALID;
        else 
            dataAB_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    dataAB_blk_n_W_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter5, m_axi_dataAB_WREADY, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter5 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataAB_blk_n_W <= m_axi_dataAB_WREADY;
        else 
            dataAB_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    dataA_ARLEN <= ap_const_lv64_10(32 - 1 downto 0);

    dataA_ARVALID_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dataA_ARVALID <= ap_const_logic_1;
        else 
            dataA_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    dataA_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            dataA_RREADY <= ap_const_logic_1;
        else 
            dataA_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    dataA_blk_n_AR_assign_proc : process(ap_enable_reg_pp0_iter0, m_axi_dataA_ARREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dataA_blk_n_AR <= m_axi_dataA_ARREADY;
        else 
            dataA_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    dataA_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, m_axi_dataA_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 
    = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            dataA_blk_n_R <= m_axi_dataA_RVALID;
        else 
            dataA_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    dataB_ARADDR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001, dataB_addr_reg_1411, dataB_addr_1_reg_1429, dataB_addr_2_reg_1446, dataB_addr_3_reg_1452, dataB_addr_4_reg_1463, dataB_addr_5_reg_1474, dataB_addr_6_reg_1480, dataB_addr_7_reg_1486, dataB_addr_8_reg_1492, dataB_addr_9_reg_1503, dataB_addr_10_reg_1524, dataB_addr_11_reg_1545, dataB_addr_12_reg_1571, dataB_addr_13_reg_1597, dataB_addr_14_reg_1623, dataB_addr_15_reg_1649)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            dataB_ARADDR <= dataB_addr_15_reg_1649;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            dataB_ARADDR <= dataB_addr_14_reg_1623;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            dataB_ARADDR <= dataB_addr_13_reg_1597;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            dataB_ARADDR <= dataB_addr_12_reg_1571;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            dataB_ARADDR <= dataB_addr_11_reg_1545;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            dataB_ARADDR <= dataB_addr_10_reg_1524;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            dataB_ARADDR <= dataB_addr_9_reg_1503;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            dataB_ARADDR <= dataB_addr_8_reg_1492;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            dataB_ARADDR <= dataB_addr_7_reg_1486;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            dataB_ARADDR <= dataB_addr_6_reg_1480;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            dataB_ARADDR <= dataB_addr_5_reg_1474;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            dataB_ARADDR <= dataB_addr_4_reg_1463;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            dataB_ARADDR <= dataB_addr_3_reg_1452;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            dataB_ARADDR <= dataB_addr_2_reg_1446;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            dataB_ARADDR <= dataB_addr_1_reg_1429;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            dataB_ARADDR <= dataB_addr_reg_1411;
        else 
            dataB_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    dataB_ARLEN <= ap_const_lv64_1(32 - 1 downto 0);

    dataB_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) 
    or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            dataB_ARVALID <= ap_const_logic_1;
        else 
            dataB_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    dataB_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) 
    or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 
    = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            dataB_RREADY <= ap_const_logic_1;
        else 
            dataB_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    dataB_blk_n_AR_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, m_axi_dataB_ARREADY, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter0 
    = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            dataB_blk_n_AR <= m_axi_dataB_ARREADY;
        else 
            dataB_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    dataB_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, m_axi_dataB_RVALID, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8)
    begin
        if ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 
    = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) 
    and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)))) then 
            dataB_blk_n_R <= m_axi_dataB_RVALID;
        else 
            dataB_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_417_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_417_ce <= ap_const_logic_1;
        else 
            grp_fu_417_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_417_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, reg_430, reg_435, reg_440, reg_445, reg_450, mul_reg_1551)
    begin
        if ((((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)))) then 
            grp_fu_417_p0 <= reg_450;
        elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_417_p0 <= reg_445;
        elsif ((((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)))) then 
            grp_fu_417_p0 <= reg_440;
        elsif ((((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)))) then 
            grp_fu_417_p0 <= reg_435;
        elsif ((((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)))) then 
            grp_fu_417_p0 <= reg_430;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_417_p0 <= mul_reg_1551;
        else 
            grp_fu_417_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_417_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, mul_1_reg_1577, mul_2_reg_1603, mul_3_reg_1629, mul_4_reg_1659, mul_5_reg_1679_pp0_iter2_reg, mul_6_reg_1699_pp0_iter2_reg, mul_7_reg_1719_pp0_iter2_reg, mul_8_reg_1739_pp0_iter2_reg, mul_9_reg_1759_pp0_iter2_reg, mul_s_reg_1779_pp0_iter3_reg, mul_10_reg_1799_pp0_iter3_reg, mul_11_reg_1819_pp0_iter3_reg, mul_12_reg_1839_pp0_iter3_reg, mul_13_reg_1854_pp0_iter3_reg, mul_14_reg_1859_pp0_iter4_reg)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_417_p1 <= mul_14_reg_1859_pp0_iter4_reg;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_417_p1 <= mul_13_reg_1854_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_417_p1 <= mul_12_reg_1839_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_417_p1 <= mul_11_reg_1819_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_417_p1 <= mul_10_reg_1799_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_417_p1 <= mul_s_reg_1779_pp0_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_417_p1 <= mul_9_reg_1759_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_417_p1 <= mul_8_reg_1739_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_417_p1 <= mul_7_reg_1719_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_417_p1 <= mul_6_reg_1699_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_417_p1 <= mul_5_reg_1679_pp0_iter2_reg;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_417_p1 <= mul_4_reg_1659;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_417_p1 <= mul_3_reg_1629;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_417_p1 <= mul_2_reg_1603;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_417_p1 <= mul_1_reg_1577;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_417_p1 <= ap_const_lv32_0;
        else 
            grp_fu_417_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_CS_fsm_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage0_11001, ap_block_pp0_stage9_11001, ap_block_pp0_stage10_11001, ap_block_pp0_stage11_11001, ap_block_pp0_stage12_11001, ap_block_pp0_stage13_11001, ap_block_pp0_stage14_11001, ap_block_pp0_stage15_11001, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001, ap_block_pp0_stage3_11001, ap_block_pp0_stage4_11001, ap_block_pp0_stage5_11001, ap_block_pp0_stage6_11001, ap_block_pp0_stage7_11001, ap_block_pp0_stage8_11001)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage8_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8)) or ((ap_const_boolean_0 = ap_block_pp0_stage7_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7)) or ((ap_const_boolean_0 = ap_block_pp0_stage6_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6)) or ((ap_const_boolean_0 = ap_block_pp0_stage5_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5)) or ((ap_const_boolean_0 = ap_block_pp0_stage4_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4)) or ((ap_const_boolean_0 = ap_block_pp0_stage3_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3)) or ((ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2)) or ((ap_const_boolean_0 = ap_block_pp0_stage1_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1)) or ((ap_const_boolean_0 = ap_block_pp0_stage15_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15)) or ((ap_const_boolean_0 = ap_block_pp0_stage14_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14)) or ((ap_const_boolean_0 
    = ap_block_pp0_stage13_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13)) or ((ap_const_boolean_0 = ap_block_pp0_stage12_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12)) or ((ap_const_boolean_0 = ap_block_pp0_stage11_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11)) or ((ap_const_boolean_0 = ap_block_pp0_stage10_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10)) or ((ap_const_boolean_0 = ap_block_pp0_stage9_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            grp_fu_422_ce <= ap_const_logic_1;
        else 
            grp_fu_422_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_422_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, bitcast_ln19_fu_947_p1, bitcast_ln19_2_fu_992_p1, bitcast_ln19_4_fu_1039_p1, bitcast_ln19_6_fu_1080_p1, bitcast_ln19_8_fu_1121_p1, bitcast_ln19_10_fu_1165_p1, bitcast_ln19_12_fu_1223_p1, bitcast_ln19_14_fu_1232_p1, bitcast_ln19_16_fu_1241_p1, bitcast_ln19_18_fu_1250_p1, bitcast_ln19_20_fu_1259_p1, bitcast_ln19_22_fu_1268_p1, bitcast_ln19_24_fu_1277_p1, bitcast_ln19_26_fu_1286_p1, bitcast_ln19_28_fu_1295_p1, bitcast_ln19_30_fu_1304_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_422_p0 <= bitcast_ln19_30_fu_1304_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_422_p0 <= bitcast_ln19_28_fu_1295_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_422_p0 <= bitcast_ln19_26_fu_1286_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_422_p0 <= bitcast_ln19_24_fu_1277_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_422_p0 <= bitcast_ln19_22_fu_1268_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_422_p0 <= bitcast_ln19_20_fu_1259_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_422_p0 <= bitcast_ln19_18_fu_1250_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_422_p0 <= bitcast_ln19_16_fu_1241_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_422_p0 <= bitcast_ln19_14_fu_1232_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_422_p0 <= bitcast_ln19_12_fu_1223_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_422_p0 <= bitcast_ln19_10_fu_1165_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_422_p0 <= bitcast_ln19_8_fu_1121_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_422_p0 <= bitcast_ln19_6_fu_1080_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_422_p0 <= bitcast_ln19_4_fu_1039_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_422_p0 <= bitcast_ln19_2_fu_992_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_422_p0 <= bitcast_ln19_fu_947_p1;
        else 
            grp_fu_422_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_422_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_CS_fsm_pp0_stage15, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1, ap_CS_fsm_pp0_stage9, ap_block_pp0_stage9, ap_CS_fsm_pp0_stage10, ap_block_pp0_stage10, ap_CS_fsm_pp0_stage11, ap_block_pp0_stage11, ap_CS_fsm_pp0_stage12, ap_block_pp0_stage12, ap_CS_fsm_pp0_stage13, ap_block_pp0_stage13, ap_CS_fsm_pp0_stage14, ap_block_pp0_stage14, ap_block_pp0_stage15, ap_block_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2, ap_CS_fsm_pp0_stage3, ap_block_pp0_stage3, ap_CS_fsm_pp0_stage4, ap_block_pp0_stage4, ap_CS_fsm_pp0_stage5, ap_block_pp0_stage5, ap_CS_fsm_pp0_stage6, ap_block_pp0_stage6, ap_CS_fsm_pp0_stage7, ap_block_pp0_stage7, ap_CS_fsm_pp0_stage8, ap_block_pp0_stage8, bitcast_ln19_1_fu_952_p1, bitcast_ln19_3_fu_997_p1, bitcast_ln19_5_fu_1044_p1, bitcast_ln19_7_fu_1085_p1, bitcast_ln19_9_fu_1126_p1, bitcast_ln19_11_fu_1170_p1, bitcast_ln19_13_fu_1228_p1, bitcast_ln19_15_fu_1237_p1, bitcast_ln19_17_fu_1246_p1, bitcast_ln19_19_fu_1255_p1, bitcast_ln19_21_fu_1264_p1, bitcast_ln19_23_fu_1273_p1, bitcast_ln19_25_fu_1282_p1, bitcast_ln19_27_fu_1291_p1, bitcast_ln19_29_fu_1300_p1, bitcast_ln19_31_fu_1309_p1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage9) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage9))) then 
            grp_fu_422_p1 <= bitcast_ln19_31_fu_1309_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage8))) then 
            grp_fu_422_p1 <= bitcast_ln19_29_fu_1300_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage7) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage7))) then 
            grp_fu_422_p1 <= bitcast_ln19_27_fu_1291_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage6) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage6))) then 
            grp_fu_422_p1 <= bitcast_ln19_25_fu_1282_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage5) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage5))) then 
            grp_fu_422_p1 <= bitcast_ln19_23_fu_1273_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage4) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage4))) then 
            grp_fu_422_p1 <= bitcast_ln19_21_fu_1264_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage3))) then 
            grp_fu_422_p1 <= bitcast_ln19_19_fu_1255_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2))) then 
            grp_fu_422_p1 <= bitcast_ln19_17_fu_1246_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1))) then 
            grp_fu_422_p1 <= bitcast_ln19_15_fu_1237_p1;
        elsif (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_422_p1 <= bitcast_ln19_13_fu_1228_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage15) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage15))) then 
            grp_fu_422_p1 <= bitcast_ln19_11_fu_1170_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage14) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage14))) then 
            grp_fu_422_p1 <= bitcast_ln19_9_fu_1126_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage13) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage13))) then 
            grp_fu_422_p1 <= bitcast_ln19_7_fu_1085_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage12) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage12))) then 
            grp_fu_422_p1 <= bitcast_ln19_5_fu_1044_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage11) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage11))) then 
            grp_fu_422_p1 <= bitcast_ln19_3_fu_997_p1;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage10) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage10))) then 
            grp_fu_422_p1 <= bitcast_ln19_1_fu_952_p1;
        else 
            grp_fu_422_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_fu_492_p3 <= 
        ap_sig_allocacmp_add_ln156_load when (ap_phi_mux_icmp_ln165_phi_fu_410_p4(0) = '1') else 
        ap_sig_allocacmp_i3_load;
    icmp_ln15_fu_1212_p2 <= "1" when (indvar_flatten2_fu_140 = ap_const_lv8_FF) else "0";
    icmp_ln16_fu_590_p2 <= "1" when (j_fu_584_p2 = ap_const_lv5_10) else "0";
    j_fu_584_p2 <= std_logic_vector(unsigned(select_ln15_fu_484_p3) + unsigned(ap_const_lv5_1));
        p_cast_cast_fu_532_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(p_cast_fu_522_p4),64));

    p_cast_fu_522_p4 <= add_ln16_fu_516_p2(63 downto 2);
    select_ln15_fu_484_p3 <= 
        ap_const_lv5_0 when (ap_phi_mux_icmp_ln165_phi_fu_410_p4(0) = '1') else 
        ap_sig_allocacmp_j4_load;
        sext_ln15_fu_1322_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_1313_p4),64));

        sext_ln19_10_fu_982_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_s_fu_972_p4),64));

        sext_ln19_11_fu_1029_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_10_fu_1019_p4),64));

        sext_ln19_12_fu_1070_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_11_fu_1060_p4),64));

        sext_ln19_13_fu_1111_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_12_fu_1101_p4),64));

        sext_ln19_14_fu_1152_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_13_fu_1142_p4),64));

        sext_ln19_15_fu_1196_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_14_fu_1186_p4),64));

        sext_ln19_16_fu_695_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_1_cast_reg_1422),8));

        sext_ln19_17_fu_805_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_3_cast_reg_1440),9));

        sext_ln19_18_fu_837_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_1_cast_reg_1422),9));

        sext_ln19_19_fu_1048_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_6_cast_reg_1458),10));

        sext_ln19_1_fu_645_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_1_fu_635_p4),64));

        sext_ln19_20_fu_1089_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_7_cast_reg_1469),10));

        sext_ln19_21_fu_1130_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_3_cast_reg_1440),10));

        sext_ln19_22_fu_1174_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(zext_ln19_1_cast_reg_1422),10));

        sext_ln19_2_fu_685_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_2_fu_675_p4),64));

        sext_ln19_3_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_3_fu_707_p4),64));

        sext_ln19_4_fu_757_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_4_fu_747_p4),64));

        sext_ln19_5_fu_795_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_5_fu_785_p4),64));

        sext_ln19_6_fu_827_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_6_fu_817_p4),64));

        sext_ln19_7_fu_859_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_7_fu_849_p4),64));

        sext_ln19_8_fu_899_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_8_fu_889_p4),64));

        sext_ln19_9_fu_937_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln19_9_fu_927_p4),64));

        sext_ln19_fu_574_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_564_p4),64));

    shl_ln1_fu_546_p3 <= (trunc_ln19_fu_542_p1 & ap_const_lv2_0);
    shl_ln_fu_504_p3 <= (trunc_ln16_fu_500_p1 & ap_const_lv6_0);
    trunc_ln16_fu_500_p1 <= i_fu_492_p3(4 - 1 downto 0);
    trunc_ln19_10_fu_1019_p4 <= add_ln19_11_fu_1014_p2(63 downto 2);
    trunc_ln19_11_fu_1060_p4 <= add_ln19_12_fu_1055_p2(63 downto 2);
    trunc_ln19_12_fu_1101_p4 <= add_ln19_13_fu_1096_p2(63 downto 2);
    trunc_ln19_13_fu_1142_p4 <= add_ln19_14_fu_1137_p2(63 downto 2);
    trunc_ln19_14_fu_1186_p4 <= add_ln19_15_fu_1181_p2(63 downto 2);
    trunc_ln19_1_fu_635_p4 <= add_ln19_1_fu_630_p2(63 downto 2);
    trunc_ln19_2_fu_675_p4 <= add_ln19_2_fu_670_p2(63 downto 2);
    trunc_ln19_3_fu_707_p4 <= add_ln19_3_fu_702_p2(63 downto 2);
    trunc_ln19_4_fu_747_p4 <= add_ln19_4_fu_742_p2(63 downto 2);
    trunc_ln19_5_fu_785_p4 <= add_ln19_5_fu_780_p2(63 downto 2);
    trunc_ln19_6_fu_817_p4 <= add_ln19_6_fu_812_p2(63 downto 2);
    trunc_ln19_7_fu_849_p4 <= add_ln19_7_fu_844_p2(63 downto 2);
    trunc_ln19_8_fu_889_p4 <= add_ln19_8_fu_884_p2(63 downto 2);
    trunc_ln19_9_fu_927_p4 <= add_ln19_9_fu_922_p2(63 downto 2);
    trunc_ln19_fu_542_p1 <= select_ln15_fu_484_p3(4 - 1 downto 0);
    trunc_ln19_s_fu_972_p4 <= add_ln19_10_fu_967_p2(63 downto 2);
    trunc_ln1_fu_564_p4 <= add_ln19_fu_558_p2(63 downto 2);
    trunc_ln_fu_1313_p4 <= AB_read_reg_1366_pp0_iter4_reg(63 downto 2);
    zext_ln16_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_504_p3),64));
    zext_ln19_10_fu_869_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_1404),9));
    zext_ln19_11_cast_fu_872_p3 <= (ap_const_lv1_1 & zext_ln19_10_fu_869_p1);
    zext_ln19_11_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_11_cast_fu_872_p3),64));
    zext_ln19_12_cast_fu_909_p4 <= ((ap_const_lv4_9 & trunc_ln19_reg_1396) & ap_const_lv2_0);
    zext_ln19_12_fu_918_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_12_cast_fu_909_p4),64));
    zext_ln19_13_fu_963_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_14_cast_fu_956_p3),64));
    zext_ln19_14_cast_fu_956_p3 <= (ap_const_lv3_5 & zext_ln19_2_reg_1435);
    zext_ln19_14_fu_1010_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_15_cast_fu_1001_p4),64));
    zext_ln19_15_cast_fu_1001_p4 <= ((ap_const_lv4_B & trunc_ln19_reg_1396) & ap_const_lv2_0);
    zext_ln19_15_fu_1051_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_19_fu_1048_p1),64));
    zext_ln19_16_fu_1092_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_20_fu_1089_p1),64));
    zext_ln19_17_fu_1133_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_21_fu_1130_p1),64));
    zext_ln19_18_fu_1177_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_22_fu_1174_p1),64));
    zext_ln19_1_cast_fu_617_p4 <= ((ap_const_lv1_1 & trunc_ln19_reg_1396) & ap_const_lv2_0);
    zext_ln19_1_fu_626_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_1_cast_fu_617_p4),64));
    zext_ln19_2_fu_655_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_1404),7));
    zext_ln19_3_cast_fu_658_p3 <= (ap_const_lv1_1 & zext_ln19_2_fu_655_p1);
    zext_ln19_3_fu_666_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_3_cast_fu_658_p3),64));
    zext_ln19_4_fu_698_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_16_fu_695_p1),64));
    zext_ln19_5_fu_727_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_reg_1404),8));
    zext_ln19_6_cast_fu_730_p3 <= (ap_const_lv1_1 & zext_ln19_5_fu_727_p1);
    zext_ln19_6_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_6_cast_fu_730_p3),64));
    zext_ln19_7_cast_fu_767_p4 <= ((ap_const_lv3_5 & trunc_ln19_reg_1396) & ap_const_lv2_0);
    zext_ln19_7_fu_776_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(zext_ln19_7_cast_fu_767_p4),64));
    zext_ln19_8_fu_808_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_17_fu_805_p1),64));
    zext_ln19_9_fu_840_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sext_ln19_18_fu_837_p1),64));
    zext_ln19_fu_554_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_546_p3),64));
end behav;
