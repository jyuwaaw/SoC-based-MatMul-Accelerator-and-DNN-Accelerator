// ==============================================================
// Generated by Vitis HLS v2024.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2024 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_plain_matmul_plain,hls_ip_2024_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xczu7ev-ffvc1156-2-e,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=4167,HLS_SYN_TPT=none,HLS_SYN_MEM=6,HLS_SYN_DSP=0,HLS_SYN_FF=5890,HLS_SYN_LUT=4977,HLS_VERSION=2024_1}" *)

module matmul_plain (
        ap_clk,
        ap_rst_n,
        m_axi_dataA_AWVALID,
        m_axi_dataA_AWREADY,
        m_axi_dataA_AWADDR,
        m_axi_dataA_AWID,
        m_axi_dataA_AWLEN,
        m_axi_dataA_AWSIZE,
        m_axi_dataA_AWBURST,
        m_axi_dataA_AWLOCK,
        m_axi_dataA_AWCACHE,
        m_axi_dataA_AWPROT,
        m_axi_dataA_AWQOS,
        m_axi_dataA_AWREGION,
        m_axi_dataA_AWUSER,
        m_axi_dataA_WVALID,
        m_axi_dataA_WREADY,
        m_axi_dataA_WDATA,
        m_axi_dataA_WSTRB,
        m_axi_dataA_WLAST,
        m_axi_dataA_WID,
        m_axi_dataA_WUSER,
        m_axi_dataA_ARVALID,
        m_axi_dataA_ARREADY,
        m_axi_dataA_ARADDR,
        m_axi_dataA_ARID,
        m_axi_dataA_ARLEN,
        m_axi_dataA_ARSIZE,
        m_axi_dataA_ARBURST,
        m_axi_dataA_ARLOCK,
        m_axi_dataA_ARCACHE,
        m_axi_dataA_ARPROT,
        m_axi_dataA_ARQOS,
        m_axi_dataA_ARREGION,
        m_axi_dataA_ARUSER,
        m_axi_dataA_RVALID,
        m_axi_dataA_RREADY,
        m_axi_dataA_RDATA,
        m_axi_dataA_RLAST,
        m_axi_dataA_RID,
        m_axi_dataA_RUSER,
        m_axi_dataA_RRESP,
        m_axi_dataA_BVALID,
        m_axi_dataA_BREADY,
        m_axi_dataA_BRESP,
        m_axi_dataA_BID,
        m_axi_dataA_BUSER,
        m_axi_dataB_AWVALID,
        m_axi_dataB_AWREADY,
        m_axi_dataB_AWADDR,
        m_axi_dataB_AWID,
        m_axi_dataB_AWLEN,
        m_axi_dataB_AWSIZE,
        m_axi_dataB_AWBURST,
        m_axi_dataB_AWLOCK,
        m_axi_dataB_AWCACHE,
        m_axi_dataB_AWPROT,
        m_axi_dataB_AWQOS,
        m_axi_dataB_AWREGION,
        m_axi_dataB_AWUSER,
        m_axi_dataB_WVALID,
        m_axi_dataB_WREADY,
        m_axi_dataB_WDATA,
        m_axi_dataB_WSTRB,
        m_axi_dataB_WLAST,
        m_axi_dataB_WID,
        m_axi_dataB_WUSER,
        m_axi_dataB_ARVALID,
        m_axi_dataB_ARREADY,
        m_axi_dataB_ARADDR,
        m_axi_dataB_ARID,
        m_axi_dataB_ARLEN,
        m_axi_dataB_ARSIZE,
        m_axi_dataB_ARBURST,
        m_axi_dataB_ARLOCK,
        m_axi_dataB_ARCACHE,
        m_axi_dataB_ARPROT,
        m_axi_dataB_ARQOS,
        m_axi_dataB_ARREGION,
        m_axi_dataB_ARUSER,
        m_axi_dataB_RVALID,
        m_axi_dataB_RREADY,
        m_axi_dataB_RDATA,
        m_axi_dataB_RLAST,
        m_axi_dataB_RID,
        m_axi_dataB_RUSER,
        m_axi_dataB_RRESP,
        m_axi_dataB_BVALID,
        m_axi_dataB_BREADY,
        m_axi_dataB_BRESP,
        m_axi_dataB_BID,
        m_axi_dataB_BUSER,
        m_axi_dataAB_AWVALID,
        m_axi_dataAB_AWREADY,
        m_axi_dataAB_AWADDR,
        m_axi_dataAB_AWID,
        m_axi_dataAB_AWLEN,
        m_axi_dataAB_AWSIZE,
        m_axi_dataAB_AWBURST,
        m_axi_dataAB_AWLOCK,
        m_axi_dataAB_AWCACHE,
        m_axi_dataAB_AWPROT,
        m_axi_dataAB_AWQOS,
        m_axi_dataAB_AWREGION,
        m_axi_dataAB_AWUSER,
        m_axi_dataAB_WVALID,
        m_axi_dataAB_WREADY,
        m_axi_dataAB_WDATA,
        m_axi_dataAB_WSTRB,
        m_axi_dataAB_WLAST,
        m_axi_dataAB_WID,
        m_axi_dataAB_WUSER,
        m_axi_dataAB_ARVALID,
        m_axi_dataAB_ARREADY,
        m_axi_dataAB_ARADDR,
        m_axi_dataAB_ARID,
        m_axi_dataAB_ARLEN,
        m_axi_dataAB_ARSIZE,
        m_axi_dataAB_ARBURST,
        m_axi_dataAB_ARLOCK,
        m_axi_dataAB_ARCACHE,
        m_axi_dataAB_ARPROT,
        m_axi_dataAB_ARQOS,
        m_axi_dataAB_ARREGION,
        m_axi_dataAB_ARUSER,
        m_axi_dataAB_RVALID,
        m_axi_dataAB_RREADY,
        m_axi_dataAB_RDATA,
        m_axi_dataAB_RLAST,
        m_axi_dataAB_RID,
        m_axi_dataAB_RUSER,
        m_axi_dataAB_RRESP,
        m_axi_dataAB_BVALID,
        m_axi_dataAB_BREADY,
        m_axi_dataAB_BRESP,
        m_axi_dataAB_BID,
        m_axi_dataAB_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_pp0_stage0 = 16'd1;
parameter    ap_ST_fsm_pp0_stage1 = 16'd2;
parameter    ap_ST_fsm_pp0_stage2 = 16'd4;
parameter    ap_ST_fsm_pp0_stage3 = 16'd8;
parameter    ap_ST_fsm_pp0_stage4 = 16'd16;
parameter    ap_ST_fsm_pp0_stage5 = 16'd32;
parameter    ap_ST_fsm_pp0_stage6 = 16'd64;
parameter    ap_ST_fsm_pp0_stage7 = 16'd128;
parameter    ap_ST_fsm_pp0_stage8 = 16'd256;
parameter    ap_ST_fsm_pp0_stage9 = 16'd512;
parameter    ap_ST_fsm_pp0_stage10 = 16'd1024;
parameter    ap_ST_fsm_pp0_stage11 = 16'd2048;
parameter    ap_ST_fsm_pp0_stage12 = 16'd4096;
parameter    ap_ST_fsm_pp0_stage13 = 16'd8192;
parameter    ap_ST_fsm_pp0_stage14 = 16'd16384;
parameter    ap_ST_fsm_pp0_stage15 = 16'd32768;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAA_ID_WIDTH = 1;
parameter    C_M_AXI_DATAA_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATAA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_USER_VALUE = 0;
parameter    C_M_AXI_DATAA_PROT_VALUE = 0;
parameter    C_M_AXI_DATAA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAAB_ID_WIDTH = 1;
parameter    C_M_AXI_DATAAB_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATAAB_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAAB_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_USER_VALUE = 0;
parameter    C_M_AXI_DATAAB_PROT_VALUE = 0;
parameter    C_M_AXI_DATAAB_CACHE_VALUE = 3;
parameter    C_M_AXI_DATAB_ID_WIDTH = 1;
parameter    C_M_AXI_DATAB_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATAB_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAB_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_USER_VALUE = 0;
parameter    C_M_AXI_DATAB_PROT_VALUE = 0;
parameter    C_M_AXI_DATAB_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATAA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATAAB_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATAB_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_dataA_AWVALID;
input   m_axi_dataA_AWREADY;
output  [C_M_AXI_DATAA_ADDR_WIDTH - 1:0] m_axi_dataA_AWADDR;
output  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_AWID;
output  [7:0] m_axi_dataA_AWLEN;
output  [2:0] m_axi_dataA_AWSIZE;
output  [1:0] m_axi_dataA_AWBURST;
output  [1:0] m_axi_dataA_AWLOCK;
output  [3:0] m_axi_dataA_AWCACHE;
output  [2:0] m_axi_dataA_AWPROT;
output  [3:0] m_axi_dataA_AWQOS;
output  [3:0] m_axi_dataA_AWREGION;
output  [C_M_AXI_DATAA_AWUSER_WIDTH - 1:0] m_axi_dataA_AWUSER;
output   m_axi_dataA_WVALID;
input   m_axi_dataA_WREADY;
output  [C_M_AXI_DATAA_DATA_WIDTH - 1:0] m_axi_dataA_WDATA;
output  [C_M_AXI_DATAA_WSTRB_WIDTH - 1:0] m_axi_dataA_WSTRB;
output   m_axi_dataA_WLAST;
output  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_WID;
output  [C_M_AXI_DATAA_WUSER_WIDTH - 1:0] m_axi_dataA_WUSER;
output   m_axi_dataA_ARVALID;
input   m_axi_dataA_ARREADY;
output  [C_M_AXI_DATAA_ADDR_WIDTH - 1:0] m_axi_dataA_ARADDR;
output  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_ARID;
output  [7:0] m_axi_dataA_ARLEN;
output  [2:0] m_axi_dataA_ARSIZE;
output  [1:0] m_axi_dataA_ARBURST;
output  [1:0] m_axi_dataA_ARLOCK;
output  [3:0] m_axi_dataA_ARCACHE;
output  [2:0] m_axi_dataA_ARPROT;
output  [3:0] m_axi_dataA_ARQOS;
output  [3:0] m_axi_dataA_ARREGION;
output  [C_M_AXI_DATAA_ARUSER_WIDTH - 1:0] m_axi_dataA_ARUSER;
input   m_axi_dataA_RVALID;
output   m_axi_dataA_RREADY;
input  [C_M_AXI_DATAA_DATA_WIDTH - 1:0] m_axi_dataA_RDATA;
input   m_axi_dataA_RLAST;
input  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_RID;
input  [C_M_AXI_DATAA_RUSER_WIDTH - 1:0] m_axi_dataA_RUSER;
input  [1:0] m_axi_dataA_RRESP;
input   m_axi_dataA_BVALID;
output   m_axi_dataA_BREADY;
input  [1:0] m_axi_dataA_BRESP;
input  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_BID;
input  [C_M_AXI_DATAA_BUSER_WIDTH - 1:0] m_axi_dataA_BUSER;
output   m_axi_dataB_AWVALID;
input   m_axi_dataB_AWREADY;
output  [C_M_AXI_DATAB_ADDR_WIDTH - 1:0] m_axi_dataB_AWADDR;
output  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_AWID;
output  [7:0] m_axi_dataB_AWLEN;
output  [2:0] m_axi_dataB_AWSIZE;
output  [1:0] m_axi_dataB_AWBURST;
output  [1:0] m_axi_dataB_AWLOCK;
output  [3:0] m_axi_dataB_AWCACHE;
output  [2:0] m_axi_dataB_AWPROT;
output  [3:0] m_axi_dataB_AWQOS;
output  [3:0] m_axi_dataB_AWREGION;
output  [C_M_AXI_DATAB_AWUSER_WIDTH - 1:0] m_axi_dataB_AWUSER;
output   m_axi_dataB_WVALID;
input   m_axi_dataB_WREADY;
output  [C_M_AXI_DATAB_DATA_WIDTH - 1:0] m_axi_dataB_WDATA;
output  [C_M_AXI_DATAB_WSTRB_WIDTH - 1:0] m_axi_dataB_WSTRB;
output   m_axi_dataB_WLAST;
output  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_WID;
output  [C_M_AXI_DATAB_WUSER_WIDTH - 1:0] m_axi_dataB_WUSER;
output   m_axi_dataB_ARVALID;
input   m_axi_dataB_ARREADY;
output  [C_M_AXI_DATAB_ADDR_WIDTH - 1:0] m_axi_dataB_ARADDR;
output  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_ARID;
output  [7:0] m_axi_dataB_ARLEN;
output  [2:0] m_axi_dataB_ARSIZE;
output  [1:0] m_axi_dataB_ARBURST;
output  [1:0] m_axi_dataB_ARLOCK;
output  [3:0] m_axi_dataB_ARCACHE;
output  [2:0] m_axi_dataB_ARPROT;
output  [3:0] m_axi_dataB_ARQOS;
output  [3:0] m_axi_dataB_ARREGION;
output  [C_M_AXI_DATAB_ARUSER_WIDTH - 1:0] m_axi_dataB_ARUSER;
input   m_axi_dataB_RVALID;
output   m_axi_dataB_RREADY;
input  [C_M_AXI_DATAB_DATA_WIDTH - 1:0] m_axi_dataB_RDATA;
input   m_axi_dataB_RLAST;
input  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_RID;
input  [C_M_AXI_DATAB_RUSER_WIDTH - 1:0] m_axi_dataB_RUSER;
input  [1:0] m_axi_dataB_RRESP;
input   m_axi_dataB_BVALID;
output   m_axi_dataB_BREADY;
input  [1:0] m_axi_dataB_BRESP;
input  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_BID;
input  [C_M_AXI_DATAB_BUSER_WIDTH - 1:0] m_axi_dataB_BUSER;
output   m_axi_dataAB_AWVALID;
input   m_axi_dataAB_AWREADY;
output  [C_M_AXI_DATAAB_ADDR_WIDTH - 1:0] m_axi_dataAB_AWADDR;
output  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_AWID;
output  [7:0] m_axi_dataAB_AWLEN;
output  [2:0] m_axi_dataAB_AWSIZE;
output  [1:0] m_axi_dataAB_AWBURST;
output  [1:0] m_axi_dataAB_AWLOCK;
output  [3:0] m_axi_dataAB_AWCACHE;
output  [2:0] m_axi_dataAB_AWPROT;
output  [3:0] m_axi_dataAB_AWQOS;
output  [3:0] m_axi_dataAB_AWREGION;
output  [C_M_AXI_DATAAB_AWUSER_WIDTH - 1:0] m_axi_dataAB_AWUSER;
output   m_axi_dataAB_WVALID;
input   m_axi_dataAB_WREADY;
output  [C_M_AXI_DATAAB_DATA_WIDTH - 1:0] m_axi_dataAB_WDATA;
output  [C_M_AXI_DATAAB_WSTRB_WIDTH - 1:0] m_axi_dataAB_WSTRB;
output   m_axi_dataAB_WLAST;
output  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_WID;
output  [C_M_AXI_DATAAB_WUSER_WIDTH - 1:0] m_axi_dataAB_WUSER;
output   m_axi_dataAB_ARVALID;
input   m_axi_dataAB_ARREADY;
output  [C_M_AXI_DATAAB_ADDR_WIDTH - 1:0] m_axi_dataAB_ARADDR;
output  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_ARID;
output  [7:0] m_axi_dataAB_ARLEN;
output  [2:0] m_axi_dataAB_ARSIZE;
output  [1:0] m_axi_dataAB_ARBURST;
output  [1:0] m_axi_dataAB_ARLOCK;
output  [3:0] m_axi_dataAB_ARCACHE;
output  [2:0] m_axi_dataAB_ARPROT;
output  [3:0] m_axi_dataAB_ARQOS;
output  [3:0] m_axi_dataAB_ARREGION;
output  [C_M_AXI_DATAAB_ARUSER_WIDTH - 1:0] m_axi_dataAB_ARUSER;
input   m_axi_dataAB_RVALID;
output   m_axi_dataAB_RREADY;
input  [C_M_AXI_DATAAB_DATA_WIDTH - 1:0] m_axi_dataAB_RDATA;
input   m_axi_dataAB_RLAST;
input  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_RID;
input  [C_M_AXI_DATAAB_RUSER_WIDTH - 1:0] m_axi_dataAB_RUSER;
input  [1:0] m_axi_dataAB_RRESP;
input   m_axi_dataAB_BVALID;
output   m_axi_dataAB_BREADY;
input  [1:0] m_axi_dataAB_BRESP;
input  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_BID;
input  [C_M_AXI_DATAAB_BUSER_WIDTH - 1:0] m_axi_dataAB_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
wire    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [15:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_idle_pp0;
wire    ap_ready;
wire    ap_CS_fsm_pp0_stage15;
wire    dataA_AWREADY;
wire    dataA_WREADY;
reg    dataA_ARVALID;
wire    dataA_ARREADY;
wire   [31:0] dataA_ARLEN;
wire    dataA_RVALID;
reg    dataA_RREADY;
wire   [31:0] dataA_RDATA;
wire   [8:0] dataA_RFIFONUM;
wire    dataA_BVALID;
wire    dataB_AWREADY;
wire    dataB_WREADY;
reg    dataB_ARVALID;
wire    dataB_ARREADY;
reg   [63:0] dataB_ARADDR;
wire   [31:0] dataB_ARLEN;
wire    dataB_RVALID;
reg    dataB_RREADY;
wire   [31:0] dataB_RDATA;
wire   [8:0] dataB_RFIFONUM;
wire    dataB_BVALID;
reg    ap_block_state16_pp0_stage15_iter0;
reg    dataAB_AWVALID;
wire    dataAB_AWREADY;
wire   [31:0] dataAB_AWLEN;
reg    dataAB_WVALID;
wire    dataAB_WREADY;
wire   [31:0] dataAB_WDATA;
wire    dataAB_ARREADY;
wire    dataAB_RVALID;
wire   [31:0] dataAB_RDATA;
wire   [8:0] dataAB_RFIFONUM;
wire    dataAB_BVALID;
reg    dataAB_BREADY;
reg   [0:0] first_iter_0_reg_394;
reg   [0:0] first_iter_0_reg_394_pp0_iter4_reg;
reg    ap_block_state80_io;
reg    ap_block_pp0_stage15_subdone;
wire   [0:0] icmp_ln15_fu_1212_p2;
reg    ap_condition_exit_pp0_iter0_stage15;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] AB;
reg    dataA_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    dataA_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_block_pp0_stage15;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
reg    dataB_blk_n_AR;
reg    dataB_blk_n_R;
reg    dataAB_blk_n_AW;
reg    dataAB_blk_n_W;
reg    dataAB_blk_n_B;
reg   [0:0] icmp_ln15_reg_1655;
reg   [0:0] icmp_ln15_reg_1655_pp0_iter4_reg;
reg   [0:0] first_iter_0_reg_394_pp0_iter1_reg;
reg    ap_block_state17_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] first_iter_0_reg_394_pp0_iter2_reg;
reg   [0:0] first_iter_0_reg_394_pp0_iter3_reg;
reg   [31:0] reg_426;
reg    ap_block_state10_pp0_stage9_iter0;
reg    ap_block_pp0_stage9_11001;
reg    ap_block_state11_pp0_stage10_iter0;
reg    ap_block_pp0_stage10_11001;
reg    ap_block_state12_pp0_stage11_iter0;
reg    ap_block_pp0_stage11_11001;
reg    ap_block_state13_pp0_stage12_iter0;
reg    ap_block_pp0_stage12_11001;
reg    ap_block_state14_pp0_stage13_iter0;
reg    ap_block_pp0_stage13_11001;
reg    ap_block_state15_pp0_stage14_iter0;
reg    ap_block_pp0_stage14_11001;
reg    ap_block_pp0_stage15_11001;
reg    ap_block_state2_io;
reg    ap_block_state18_pp0_stage1_iter1;
reg    ap_block_pp0_stage1_11001;
reg    ap_block_state19_pp0_stage2_iter1;
reg    ap_block_pp0_stage2_11001;
reg    ap_block_state20_pp0_stage3_iter1;
reg    ap_block_pp0_stage3_11001;
reg    ap_block_state21_pp0_stage4_iter1;
reg    ap_block_pp0_stage4_11001;
reg    ap_block_state22_pp0_stage5_iter1;
reg    ap_block_state86_pp0_stage5_iter5;
reg    ap_block_pp0_stage5_11001;
reg    ap_block_state23_pp0_stage6_iter1;
reg    ap_block_pp0_stage6_11001;
reg    ap_block_state24_pp0_stage7_iter1;
reg    ap_block_pp0_stage7_11001;
reg    ap_block_state25_pp0_stage8_iter1;
reg    ap_block_pp0_stage8_11001;
wire   [31:0] grp_fu_417_p2;
reg   [31:0] reg_430;
reg   [31:0] reg_435;
reg   [31:0] reg_440;
reg   [31:0] reg_445;
reg   [31:0] reg_450;
reg   [63:0] AB_read_reg_1366;
reg   [63:0] AB_read_reg_1366_pp0_iter1_reg;
reg   [63:0] AB_read_reg_1366_pp0_iter2_reg;
reg   [63:0] AB_read_reg_1366_pp0_iter3_reg;
reg   [63:0] AB_read_reg_1366_pp0_iter4_reg;
reg   [63:0] B_read_reg_1371;
reg   [63:0] dataA_addr_reg_1390;
wire   [3:0] trunc_ln19_fu_542_p1;
reg   [3:0] trunc_ln19_reg_1396;
wire   [5:0] shl_ln1_fu_546_p3;
reg   [5:0] shl_ln1_reg_1404;
reg   [63:0] dataB_addr_reg_1411;
wire   [0:0] icmp_ln16_fu_590_p2;
reg   [0:0] icmp_ln16_reg_1417;
wire  signed [6:0] zext_ln19_1_cast_fu_617_p4;
reg  signed [6:0] zext_ln19_1_cast_reg_1422;
reg   [63:0] dataB_addr_1_reg_1429;
wire   [6:0] zext_ln19_2_fu_655_p1;
reg   [6:0] zext_ln19_2_reg_1435;
wire  signed [7:0] zext_ln19_3_cast_fu_658_p3;
reg  signed [7:0] zext_ln19_3_cast_reg_1440;
reg   [63:0] dataB_addr_2_reg_1446;
reg   [63:0] dataB_addr_3_reg_1452;
wire  signed [8:0] zext_ln19_6_cast_fu_730_p3;
reg  signed [8:0] zext_ln19_6_cast_reg_1458;
reg   [63:0] dataB_addr_4_reg_1463;
wire  signed [8:0] zext_ln19_7_cast_fu_767_p4;
reg  signed [8:0] zext_ln19_7_cast_reg_1469;
reg   [63:0] dataB_addr_5_reg_1474;
reg   [63:0] dataB_addr_6_reg_1480;
reg   [63:0] dataB_addr_7_reg_1486;
reg   [63:0] dataB_addr_8_reg_1492;
reg   [31:0] dataB_addr_read_reg_1498;
reg   [63:0] dataB_addr_9_reg_1503;
wire   [31:0] bitcast_ln19_fu_947_p1;
wire   [31:0] bitcast_ln19_1_fu_952_p1;
reg   [31:0] dataB_addr_1_read_reg_1519;
reg   [63:0] dataB_addr_10_reg_1524;
wire   [31:0] bitcast_ln19_2_fu_992_p1;
wire   [31:0] bitcast_ln19_3_fu_997_p1;
reg   [31:0] dataB_addr_2_read_reg_1540;
reg   [63:0] dataB_addr_11_reg_1545;
wire   [31:0] grp_fu_422_p2;
reg   [31:0] mul_reg_1551;
wire   [31:0] bitcast_ln19_4_fu_1039_p1;
wire   [31:0] bitcast_ln19_5_fu_1044_p1;
reg   [31:0] dataB_addr_3_read_reg_1566;
reg   [63:0] dataB_addr_12_reg_1571;
reg   [31:0] mul_1_reg_1577;
wire   [31:0] bitcast_ln19_6_fu_1080_p1;
wire   [31:0] bitcast_ln19_7_fu_1085_p1;
reg   [31:0] dataB_addr_4_read_reg_1592;
reg   [63:0] dataB_addr_13_reg_1597;
reg   [31:0] mul_2_reg_1603;
wire   [31:0] bitcast_ln19_8_fu_1121_p1;
wire   [31:0] bitcast_ln19_9_fu_1126_p1;
reg   [31:0] dataB_addr_5_read_reg_1618;
reg   [63:0] dataB_addr_14_reg_1623;
reg   [31:0] mul_3_reg_1629;
wire   [31:0] bitcast_ln19_10_fu_1165_p1;
wire   [31:0] bitcast_ln19_11_fu_1170_p1;
reg   [31:0] dataB_addr_6_read_reg_1644;
reg   [63:0] dataB_addr_15_reg_1649;
reg   [0:0] icmp_ln15_reg_1655_pp0_iter1_reg;
reg   [0:0] icmp_ln15_reg_1655_pp0_iter2_reg;
reg   [0:0] icmp_ln15_reg_1655_pp0_iter3_reg;
reg   [31:0] mul_4_reg_1659;
wire   [31:0] bitcast_ln19_12_fu_1223_p1;
wire   [31:0] bitcast_ln19_13_fu_1228_p1;
reg   [31:0] dataB_addr_7_read_reg_1674;
reg   [31:0] mul_5_reg_1679;
reg   [31:0] mul_5_reg_1679_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_14_fu_1232_p1;
wire   [31:0] bitcast_ln19_15_fu_1237_p1;
reg   [31:0] dataB_addr_8_read_reg_1694;
reg   [31:0] mul_6_reg_1699;
reg   [31:0] mul_6_reg_1699_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_16_fu_1241_p1;
wire   [31:0] bitcast_ln19_17_fu_1246_p1;
reg   [31:0] dataB_addr_9_read_reg_1714;
reg   [31:0] mul_7_reg_1719;
reg   [31:0] mul_7_reg_1719_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_18_fu_1250_p1;
wire   [31:0] bitcast_ln19_19_fu_1255_p1;
reg   [31:0] dataB_addr_10_read_reg_1734;
reg   [31:0] mul_8_reg_1739;
reg   [31:0] mul_8_reg_1739_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_20_fu_1259_p1;
wire   [31:0] bitcast_ln19_21_fu_1264_p1;
reg   [31:0] dataB_addr_11_read_reg_1754;
reg   [31:0] mul_9_reg_1759;
reg   [31:0] mul_9_reg_1759_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_22_fu_1268_p1;
wire   [31:0] bitcast_ln19_23_fu_1273_p1;
reg   [31:0] dataB_addr_12_read_reg_1774;
reg   [31:0] mul_s_reg_1779;
reg   [31:0] mul_s_reg_1779_pp0_iter2_reg;
reg   [31:0] mul_s_reg_1779_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_24_fu_1277_p1;
wire   [31:0] bitcast_ln19_25_fu_1282_p1;
reg   [31:0] dataB_addr_13_read_reg_1794;
reg   [31:0] mul_10_reg_1799;
reg   [31:0] mul_10_reg_1799_pp0_iter2_reg;
reg   [31:0] mul_10_reg_1799_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_26_fu_1286_p1;
wire   [31:0] bitcast_ln19_27_fu_1291_p1;
reg   [31:0] dataB_addr_14_read_reg_1814;
reg   [31:0] mul_11_reg_1819;
reg   [31:0] mul_11_reg_1819_pp0_iter2_reg;
reg   [31:0] mul_11_reg_1819_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_28_fu_1295_p1;
wire   [31:0] bitcast_ln19_29_fu_1300_p1;
reg   [31:0] dataB_addr_15_read_reg_1834;
reg   [31:0] mul_12_reg_1839;
reg   [31:0] mul_12_reg_1839_pp0_iter2_reg;
reg   [31:0] mul_12_reg_1839_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_30_fu_1304_p1;
wire   [31:0] bitcast_ln19_31_fu_1309_p1;
reg   [31:0] mul_13_reg_1854;
reg   [31:0] mul_13_reg_1854_pp0_iter2_reg;
reg   [31:0] mul_13_reg_1854_pp0_iter3_reg;
reg   [31:0] mul_14_reg_1859;
reg   [31:0] mul_14_reg_1859_pp0_iter2_reg;
reg   [31:0] mul_14_reg_1859_pp0_iter3_reg;
reg   [31:0] mul_14_reg_1859_pp0_iter4_reg;
reg    ap_enable_reg_pp0_iter0_reg;
reg    ap_block_pp0_stage5_subdone;
wire    ap_loop_init;
reg    ap_block_pp0_stage0_subdone;
reg   [0:0] ap_phi_mux_icmp_ln165_phi_fu_410_p4;
wire  signed [63:0] p_cast_cast_fu_532_p1;
wire  signed [63:0] sext_ln19_fu_574_p1;
wire  signed [63:0] sext_ln19_1_fu_645_p1;
wire  signed [63:0] sext_ln19_2_fu_685_p1;
wire  signed [63:0] sext_ln19_3_fu_717_p1;
wire  signed [63:0] sext_ln19_4_fu_757_p1;
wire  signed [63:0] sext_ln19_5_fu_795_p1;
wire  signed [63:0] sext_ln19_6_fu_827_p1;
wire  signed [63:0] sext_ln19_7_fu_859_p1;
wire  signed [63:0] sext_ln19_8_fu_899_p1;
wire  signed [63:0] sext_ln19_9_fu_937_p1;
wire  signed [63:0] sext_ln19_10_fu_982_p1;
wire  signed [63:0] sext_ln19_11_fu_1029_p1;
wire  signed [63:0] sext_ln19_12_fu_1070_p1;
wire  signed [63:0] sext_ln19_13_fu_1111_p1;
wire  signed [63:0] sext_ln19_14_fu_1152_p1;
wire  signed [63:0] sext_ln19_15_fu_1196_p1;
wire   [63:0] sext_ln15_fu_1322_p1;
reg    ap_block_pp0_stage0_01001;
reg   [7:0] indvar_flatten2_fu_140;
wire   [7:0] add_ln15_1_fu_1206_p2;
reg   [4:0] i3_fu_144;
wire   [4:0] i_fu_492_p3;
reg   [4:0] ap_sig_allocacmp_i3_load;
reg   [4:0] j4_fu_148;
wire   [4:0] j_fu_584_p2;
reg   [4:0] ap_sig_allocacmp_j4_load;
reg   [4:0] add_ln156_fu_152;
wire   [4:0] add_ln15_fu_596_p2;
reg   [4:0] ap_sig_allocacmp_add_ln156_load;
reg   [31:0] grp_fu_417_p0;
reg   [31:0] grp_fu_417_p1;
reg   [31:0] grp_fu_422_p0;
reg   [31:0] grp_fu_422_p1;
wire   [3:0] trunc_ln16_fu_500_p1;
wire   [9:0] shl_ln_fu_504_p3;
wire   [63:0] zext_ln16_fu_512_p1;
wire   [63:0] add_ln16_fu_516_p2;
wire   [61:0] p_cast_fu_522_p4;
wire   [4:0] select_ln15_fu_484_p3;
wire   [63:0] zext_ln19_fu_554_p1;
wire   [63:0] add_ln19_fu_558_p2;
wire   [61:0] trunc_ln1_fu_564_p4;
wire   [63:0] zext_ln19_1_fu_626_p1;
wire   [63:0] add_ln19_1_fu_630_p2;
wire   [61:0] trunc_ln19_1_fu_635_p4;
wire   [63:0] zext_ln19_3_fu_666_p1;
wire   [63:0] add_ln19_2_fu_670_p2;
wire   [61:0] trunc_ln19_2_fu_675_p4;
wire  signed [7:0] sext_ln19_16_fu_695_p1;
wire   [63:0] zext_ln19_4_fu_698_p1;
wire   [63:0] add_ln19_3_fu_702_p2;
wire   [61:0] trunc_ln19_3_fu_707_p4;
wire   [7:0] zext_ln19_5_fu_727_p1;
wire   [63:0] zext_ln19_6_fu_738_p1;
wire   [63:0] add_ln19_4_fu_742_p2;
wire   [61:0] trunc_ln19_4_fu_747_p4;
wire   [63:0] zext_ln19_7_fu_776_p1;
wire   [63:0] add_ln19_5_fu_780_p2;
wire   [61:0] trunc_ln19_5_fu_785_p4;
wire  signed [8:0] sext_ln19_17_fu_805_p1;
wire   [63:0] zext_ln19_8_fu_808_p1;
wire   [63:0] add_ln19_6_fu_812_p2;
wire   [61:0] trunc_ln19_6_fu_817_p4;
wire  signed [8:0] sext_ln19_18_fu_837_p1;
wire   [63:0] zext_ln19_9_fu_840_p1;
wire   [63:0] add_ln19_7_fu_844_p2;
wire   [61:0] trunc_ln19_7_fu_849_p4;
wire   [8:0] zext_ln19_10_fu_869_p1;
wire   [9:0] zext_ln19_11_cast_fu_872_p3;
wire   [63:0] zext_ln19_11_fu_880_p1;
wire   [63:0] add_ln19_8_fu_884_p2;
wire   [61:0] trunc_ln19_8_fu_889_p4;
wire   [9:0] zext_ln19_12_cast_fu_909_p4;
wire   [63:0] zext_ln19_12_fu_918_p1;
wire   [63:0] add_ln19_9_fu_922_p2;
wire   [61:0] trunc_ln19_9_fu_927_p4;
wire   [9:0] zext_ln19_14_cast_fu_956_p3;
wire   [63:0] zext_ln19_13_fu_963_p1;
wire   [63:0] add_ln19_10_fu_967_p2;
wire   [61:0] trunc_ln19_s_fu_972_p4;
wire   [9:0] zext_ln19_15_cast_fu_1001_p4;
wire   [63:0] zext_ln19_14_fu_1010_p1;
wire   [63:0] add_ln19_11_fu_1014_p2;
wire   [61:0] trunc_ln19_10_fu_1019_p4;
wire  signed [9:0] sext_ln19_19_fu_1048_p1;
wire   [63:0] zext_ln19_15_fu_1051_p1;
wire   [63:0] add_ln19_12_fu_1055_p2;
wire   [61:0] trunc_ln19_11_fu_1060_p4;
wire  signed [9:0] sext_ln19_20_fu_1089_p1;
wire   [63:0] zext_ln19_16_fu_1092_p1;
wire   [63:0] add_ln19_13_fu_1096_p2;
wire   [61:0] trunc_ln19_12_fu_1101_p4;
wire  signed [9:0] sext_ln19_21_fu_1130_p1;
wire   [63:0] zext_ln19_17_fu_1133_p1;
wire   [63:0] add_ln19_14_fu_1137_p2;
wire   [61:0] trunc_ln19_13_fu_1142_p4;
wire  signed [9:0] sext_ln19_22_fu_1174_p1;
wire   [63:0] zext_ln19_18_fu_1177_p1;
wire   [63:0] add_ln19_15_fu_1181_p2;
wire   [61:0] trunc_ln19_14_fu_1186_p4;
wire   [61:0] trunc_ln_fu_1313_p4;
reg    grp_fu_417_ce;
reg    grp_fu_422_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_condition_exit_pp0_iter5_stage5;
reg    ap_idle_pp0_0to4;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg    ap_loop_exit_ready_pp0_iter4_reg;
reg    ap_loop_exit_ready_pp0_iter5_reg;
reg   [15:0] ap_NS_fsm;
reg    ap_idle_pp0_1to5;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ready_sig;
wire    ap_done_sig;
reg    ap_condition_855;
reg    ap_condition_1884;
reg    ap_condition_1888;
reg    ap_condition_1891;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 16'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 indvar_flatten2_fu_140 = 8'd0;
#0 i3_fu_144 = 5'd0;
#0 j4_fu_148 = 5'd0;
#0 add_ln156_fu_152 = 5'd0;
#0 ap_done_reg = 1'b0;
end

matmul_plain_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .AB(AB),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

matmul_plain_dataA_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATAA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATAA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATAA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATAA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATAA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATAA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATAA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATAA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATAA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATAA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATAA_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 0 ))
dataA_m_axi_U(
    .AWVALID(m_axi_dataA_AWVALID),
    .AWREADY(m_axi_dataA_AWREADY),
    .AWADDR(m_axi_dataA_AWADDR),
    .AWID(m_axi_dataA_AWID),
    .AWLEN(m_axi_dataA_AWLEN),
    .AWSIZE(m_axi_dataA_AWSIZE),
    .AWBURST(m_axi_dataA_AWBURST),
    .AWLOCK(m_axi_dataA_AWLOCK),
    .AWCACHE(m_axi_dataA_AWCACHE),
    .AWPROT(m_axi_dataA_AWPROT),
    .AWQOS(m_axi_dataA_AWQOS),
    .AWREGION(m_axi_dataA_AWREGION),
    .AWUSER(m_axi_dataA_AWUSER),
    .WVALID(m_axi_dataA_WVALID),
    .WREADY(m_axi_dataA_WREADY),
    .WDATA(m_axi_dataA_WDATA),
    .WSTRB(m_axi_dataA_WSTRB),
    .WLAST(m_axi_dataA_WLAST),
    .WID(m_axi_dataA_WID),
    .WUSER(m_axi_dataA_WUSER),
    .ARVALID(m_axi_dataA_ARVALID),
    .ARREADY(m_axi_dataA_ARREADY),
    .ARADDR(m_axi_dataA_ARADDR),
    .ARID(m_axi_dataA_ARID),
    .ARLEN(m_axi_dataA_ARLEN),
    .ARSIZE(m_axi_dataA_ARSIZE),
    .ARBURST(m_axi_dataA_ARBURST),
    .ARLOCK(m_axi_dataA_ARLOCK),
    .ARCACHE(m_axi_dataA_ARCACHE),
    .ARPROT(m_axi_dataA_ARPROT),
    .ARQOS(m_axi_dataA_ARQOS),
    .ARREGION(m_axi_dataA_ARREGION),
    .ARUSER(m_axi_dataA_ARUSER),
    .RVALID(m_axi_dataA_RVALID),
    .RREADY(m_axi_dataA_RREADY),
    .RDATA(m_axi_dataA_RDATA),
    .RLAST(m_axi_dataA_RLAST),
    .RID(m_axi_dataA_RID),
    .RUSER(m_axi_dataA_RUSER),
    .RRESP(m_axi_dataA_RRESP),
    .BVALID(m_axi_dataA_BVALID),
    .BREADY(m_axi_dataA_BREADY),
    .BRESP(m_axi_dataA_BRESP),
    .BID(m_axi_dataA_BID),
    .BUSER(m_axi_dataA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(dataA_ARVALID),
    .I_CH0_ARREADY(dataA_ARREADY),
    .I_CH0_ARADDR(dataA_addr_reg_1390),
    .I_CH0_ARLEN(dataA_ARLEN),
    .I_CH0_RVALID(dataA_RVALID),
    .I_CH0_RREADY(dataA_RREADY),
    .I_CH0_RDATA(dataA_RDATA),
    .I_CH0_RFIFONUM(dataA_RFIFONUM),
    .I_CH0_AWVALID(1'b0),
    .I_CH0_AWREADY(dataA_AWREADY),
    .I_CH0_AWADDR(64'd0),
    .I_CH0_AWLEN(32'd0),
    .I_CH0_WVALID(1'b0),
    .I_CH0_WREADY(dataA_WREADY),
    .I_CH0_WDATA(32'd0),
    .I_CH0_WSTRB(4'd0),
    .I_CH0_BVALID(dataA_BVALID),
    .I_CH0_BREADY(1'b0)
);

matmul_plain_dataAB_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 4 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATAAB_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATAAB_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATAAB_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATAAB_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATAAB_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATAAB_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATAAB_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATAAB_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATAAB_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATAAB_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATAAB_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 0 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
dataAB_m_axi_U(
    .AWVALID(m_axi_dataAB_AWVALID),
    .AWREADY(m_axi_dataAB_AWREADY),
    .AWADDR(m_axi_dataAB_AWADDR),
    .AWID(m_axi_dataAB_AWID),
    .AWLEN(m_axi_dataAB_AWLEN),
    .AWSIZE(m_axi_dataAB_AWSIZE),
    .AWBURST(m_axi_dataAB_AWBURST),
    .AWLOCK(m_axi_dataAB_AWLOCK),
    .AWCACHE(m_axi_dataAB_AWCACHE),
    .AWPROT(m_axi_dataAB_AWPROT),
    .AWQOS(m_axi_dataAB_AWQOS),
    .AWREGION(m_axi_dataAB_AWREGION),
    .AWUSER(m_axi_dataAB_AWUSER),
    .WVALID(m_axi_dataAB_WVALID),
    .WREADY(m_axi_dataAB_WREADY),
    .WDATA(m_axi_dataAB_WDATA),
    .WSTRB(m_axi_dataAB_WSTRB),
    .WLAST(m_axi_dataAB_WLAST),
    .WID(m_axi_dataAB_WID),
    .WUSER(m_axi_dataAB_WUSER),
    .ARVALID(m_axi_dataAB_ARVALID),
    .ARREADY(m_axi_dataAB_ARREADY),
    .ARADDR(m_axi_dataAB_ARADDR),
    .ARID(m_axi_dataAB_ARID),
    .ARLEN(m_axi_dataAB_ARLEN),
    .ARSIZE(m_axi_dataAB_ARSIZE),
    .ARBURST(m_axi_dataAB_ARBURST),
    .ARLOCK(m_axi_dataAB_ARLOCK),
    .ARCACHE(m_axi_dataAB_ARCACHE),
    .ARPROT(m_axi_dataAB_ARPROT),
    .ARQOS(m_axi_dataAB_ARQOS),
    .ARREGION(m_axi_dataAB_ARREGION),
    .ARUSER(m_axi_dataAB_ARUSER),
    .RVALID(m_axi_dataAB_RVALID),
    .RREADY(m_axi_dataAB_RREADY),
    .RDATA(m_axi_dataAB_RDATA),
    .RLAST(m_axi_dataAB_RLAST),
    .RID(m_axi_dataAB_RID),
    .RUSER(m_axi_dataAB_RUSER),
    .RRESP(m_axi_dataAB_RRESP),
    .BVALID(m_axi_dataAB_BVALID),
    .BREADY(m_axi_dataAB_BREADY),
    .BRESP(m_axi_dataAB_BRESP),
    .BID(m_axi_dataAB_BID),
    .BUSER(m_axi_dataAB_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(1'b0),
    .I_CH0_ARREADY(dataAB_ARREADY),
    .I_CH0_ARADDR(64'd0),
    .I_CH0_ARLEN(32'd0),
    .I_CH0_RVALID(dataAB_RVALID),
    .I_CH0_RREADY(1'b0),
    .I_CH0_RDATA(dataAB_RDATA),
    .I_CH0_RFIFONUM(dataAB_RFIFONUM),
    .I_CH0_AWVALID(dataAB_AWVALID),
    .I_CH0_AWREADY(dataAB_AWREADY),
    .I_CH0_AWADDR(sext_ln15_fu_1322_p1),
    .I_CH0_AWLEN(dataAB_AWLEN),
    .I_CH0_WVALID(dataAB_WVALID),
    .I_CH0_WREADY(dataAB_WREADY),
    .I_CH0_WDATA(dataAB_WDATA),
    .I_CH0_WSTRB(4'd15),
    .I_CH0_BVALID(dataAB_BVALID),
    .I_CH0_BREADY(dataAB_BREADY)
);

matmul_plain_dataB_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 7 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATAB_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATAB_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATAB_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATAB_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATAB_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATAB_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATAB_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATAB_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATAB_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATAB_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATAB_CACHE_VALUE ),
    .CH0_USER_RFIFONUM_WIDTH( 9 ),
    .CH0_USER_DW( 32 ),
    .CH0_USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 0 ))
dataB_m_axi_U(
    .AWVALID(m_axi_dataB_AWVALID),
    .AWREADY(m_axi_dataB_AWREADY),
    .AWADDR(m_axi_dataB_AWADDR),
    .AWID(m_axi_dataB_AWID),
    .AWLEN(m_axi_dataB_AWLEN),
    .AWSIZE(m_axi_dataB_AWSIZE),
    .AWBURST(m_axi_dataB_AWBURST),
    .AWLOCK(m_axi_dataB_AWLOCK),
    .AWCACHE(m_axi_dataB_AWCACHE),
    .AWPROT(m_axi_dataB_AWPROT),
    .AWQOS(m_axi_dataB_AWQOS),
    .AWREGION(m_axi_dataB_AWREGION),
    .AWUSER(m_axi_dataB_AWUSER),
    .WVALID(m_axi_dataB_WVALID),
    .WREADY(m_axi_dataB_WREADY),
    .WDATA(m_axi_dataB_WDATA),
    .WSTRB(m_axi_dataB_WSTRB),
    .WLAST(m_axi_dataB_WLAST),
    .WID(m_axi_dataB_WID),
    .WUSER(m_axi_dataB_WUSER),
    .ARVALID(m_axi_dataB_ARVALID),
    .ARREADY(m_axi_dataB_ARREADY),
    .ARADDR(m_axi_dataB_ARADDR),
    .ARID(m_axi_dataB_ARID),
    .ARLEN(m_axi_dataB_ARLEN),
    .ARSIZE(m_axi_dataB_ARSIZE),
    .ARBURST(m_axi_dataB_ARBURST),
    .ARLOCK(m_axi_dataB_ARLOCK),
    .ARCACHE(m_axi_dataB_ARCACHE),
    .ARPROT(m_axi_dataB_ARPROT),
    .ARQOS(m_axi_dataB_ARQOS),
    .ARREGION(m_axi_dataB_ARREGION),
    .ARUSER(m_axi_dataB_ARUSER),
    .RVALID(m_axi_dataB_RVALID),
    .RREADY(m_axi_dataB_RREADY),
    .RDATA(m_axi_dataB_RDATA),
    .RLAST(m_axi_dataB_RLAST),
    .RID(m_axi_dataB_RID),
    .RUSER(m_axi_dataB_RUSER),
    .RRESP(m_axi_dataB_RRESP),
    .BVALID(m_axi_dataB_BVALID),
    .BREADY(m_axi_dataB_BREADY),
    .BRESP(m_axi_dataB_BRESP),
    .BID(m_axi_dataB_BID),
    .BUSER(m_axi_dataB_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_CH0_ARVALID(dataB_ARVALID),
    .I_CH0_ARREADY(dataB_ARREADY),
    .I_CH0_ARADDR(dataB_ARADDR),
    .I_CH0_ARLEN(dataB_ARLEN),
    .I_CH0_RVALID(dataB_RVALID),
    .I_CH0_RREADY(dataB_RREADY),
    .I_CH0_RDATA(dataB_RDATA),
    .I_CH0_RFIFONUM(dataB_RFIFONUM),
    .I_CH0_AWVALID(1'b0),
    .I_CH0_AWREADY(dataB_AWREADY),
    .I_CH0_AWADDR(64'd0),
    .I_CH0_AWLEN(32'd0),
    .I_CH0_WVALID(1'b0),
    .I_CH0_WREADY(dataB_WREADY),
    .I_CH0_WDATA(32'd0),
    .I_CH0_WSTRB(4'd0),
    .I_CH0_BVALID(dataB_BVALID),
    .I_CH0_BREADY(1'b0)
);

matmul_plain_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_417_p0),
    .din1(grp_fu_417_p1),
    .ce(grp_fu_417_ce),
    .dout(grp_fu_417_p2)
);

matmul_plain_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_422_p0),
    .din1(grp_fu_422_p1),
    .ce(grp_fu_422_ce),
    .dout(grp_fu_422_p2)
);

matmul_plain_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(ap_start),
    .ap_ready(ap_ready_sig),
    .ap_done(ap_done_sig),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage15),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(1'b1)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_855)) begin
        add_ln156_fu_152 <= add_ln15_fu_596_p2;
    end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_condition_exit_pp0_iter5_stage5) & (ap_idle_pp0_0to4 == 1'b1))) begin
    ap_loop_exit_ready_pp0_iter1_reg <= 1'b0;
end else if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
    ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_condition_exit_pp0_iter5_stage5) & (ap_idle_pp0_0to4 == 1'b1))) begin
    ap_loop_exit_ready_pp0_iter2_reg <= 1'b0;
end else if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
    ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_condition_exit_pp0_iter5_stage5) & (ap_idle_pp0_0to4 == 1'b1))) begin
    ap_loop_exit_ready_pp0_iter3_reg <= 1'b0;
end else if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
    ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
end
end

always @ (posedge ap_clk) begin
if (((1'b1 == ap_condition_exit_pp0_iter5_stage5) & (ap_idle_pp0_0to4 == 1'b1))) begin
    ap_loop_exit_ready_pp0_iter4_reg <= 1'b0;
end else if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
    ap_loop_exit_ready_pp0_iter4_reg <= ap_loop_exit_ready_pp0_iter3_reg;
end
end

always @ (posedge ap_clk) begin
if ((((1'b1 == ap_condition_exit_pp0_iter5_stage5) & (ap_idle_pp0_0to4 == 1'b1)) | ((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_loop_exit_ready_pp0_iter4_reg == 1'b0)))) begin
    ap_loop_exit_ready_pp0_iter5_reg <= 1'b0;
end else if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
    ap_loop_exit_ready_pp0_iter5_reg <= ap_loop_exit_ready_pp0_iter4_reg;
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
    if ((1'b1 == ap_condition_1888)) begin
        first_iter_0_reg_394 <= 1'd0;
    end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_init == 1'b1))) begin
        first_iter_0_reg_394 <= 1'd1;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_855)) begin
    i3_fu_144 <= i_fu_492_p3;
end
end

always @ (posedge ap_clk) begin
if ((ap_enable_reg_pp0_iter0 == 1'b1)) begin
    if ((1'b1 == ap_condition_1891)) begin
        indvar_flatten2_fu_140 <= 8'd0;
    end else if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        indvar_flatten2_fu_140 <= add_ln15_1_fu_1206_p2;
    end
end
end

always @ (posedge ap_clk) begin
if ((1'b1 == ap_condition_855)) begin
    j4_fu_148 <= j_fu_584_p2;
end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        AB_read_reg_1366 <= AB;
        AB_read_reg_1366_pp0_iter1_reg <= AB_read_reg_1366;
        AB_read_reg_1366_pp0_iter2_reg <= AB_read_reg_1366_pp0_iter1_reg;
        AB_read_reg_1366_pp0_iter3_reg <= AB_read_reg_1366_pp0_iter2_reg;
        AB_read_reg_1366_pp0_iter4_reg <= AB_read_reg_1366_pp0_iter3_reg;
        B_read_reg_1371 <= B;
        dataA_addr_reg_1390 <= p_cast_cast_fu_532_p1;
        dataB_addr_7_read_reg_1674 <= dataB_RDATA;
        dataB_addr_reg_1411 <= sext_ln19_fu_574_p1;
        first_iter_0_reg_394_pp0_iter1_reg <= first_iter_0_reg_394;
        first_iter_0_reg_394_pp0_iter2_reg <= first_iter_0_reg_394_pp0_iter1_reg;
        first_iter_0_reg_394_pp0_iter3_reg <= first_iter_0_reg_394_pp0_iter2_reg;
        first_iter_0_reg_394_pp0_iter4_reg <= first_iter_0_reg_394_pp0_iter3_reg;
        shl_ln1_reg_1404[5 : 2] <= shl_ln1_fu_546_p3[5 : 2];
        trunc_ln19_reg_1396 <= trunc_ln19_fu_542_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataB_addr_10_read_reg_1734 <= dataB_RDATA;
        dataB_addr_3_reg_1452 <= sext_ln19_3_fu_717_p1;
        mul_7_reg_1719_pp0_iter2_reg <= mul_7_reg_1719;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        dataB_addr_10_reg_1524 <= sext_ln19_10_fu_982_p1;
        dataB_addr_1_read_reg_1519 <= dataB_RDATA;
        mul_13_reg_1854_pp0_iter2_reg <= mul_13_reg_1854;
        mul_13_reg_1854_pp0_iter3_reg <= mul_13_reg_1854_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        dataB_addr_11_read_reg_1754 <= dataB_RDATA;
        dataB_addr_4_reg_1463 <= sext_ln19_4_fu_757_p1;
        mul_8_reg_1739_pp0_iter2_reg <= mul_8_reg_1739;
        zext_ln19_6_cast_reg_1458[5 : 2] <= zext_ln19_6_cast_fu_730_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        dataB_addr_11_reg_1545 <= sext_ln19_11_fu_1029_p1;
        dataB_addr_2_read_reg_1540 <= dataB_RDATA;
        mul_14_reg_1859_pp0_iter2_reg <= mul_14_reg_1859;
        mul_14_reg_1859_pp0_iter3_reg <= mul_14_reg_1859_pp0_iter2_reg;
        mul_14_reg_1859_pp0_iter4_reg <= mul_14_reg_1859_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataB_addr_12_read_reg_1774 <= dataB_RDATA;
        dataB_addr_5_reg_1474 <= sext_ln19_5_fu_795_p1;
        mul_9_reg_1759_pp0_iter2_reg <= mul_9_reg_1759;
        zext_ln19_7_cast_reg_1469[5 : 2] <= zext_ln19_7_cast_fu_767_p4[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        dataB_addr_12_reg_1571 <= sext_ln19_12_fu_1070_p1;
        dataB_addr_3_read_reg_1566 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        dataB_addr_13_read_reg_1794 <= dataB_RDATA;
        dataB_addr_6_reg_1480 <= sext_ln19_6_fu_827_p1;
        mul_s_reg_1779_pp0_iter2_reg <= mul_s_reg_1779;
        mul_s_reg_1779_pp0_iter3_reg <= mul_s_reg_1779_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        dataB_addr_13_reg_1597 <= sext_ln19_13_fu_1111_p1;
        dataB_addr_4_read_reg_1592 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        dataB_addr_14_read_reg_1814 <= dataB_RDATA;
        dataB_addr_7_reg_1486 <= sext_ln19_7_fu_859_p1;
        mul_10_reg_1799_pp0_iter2_reg <= mul_10_reg_1799;
        mul_10_reg_1799_pp0_iter3_reg <= mul_10_reg_1799_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        dataB_addr_14_reg_1623 <= sext_ln19_14_fu_1152_p1;
        dataB_addr_5_read_reg_1618 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        dataB_addr_15_read_reg_1834 <= dataB_RDATA;
        dataB_addr_8_reg_1492 <= sext_ln19_8_fu_899_p1;
        mul_11_reg_1819_pp0_iter2_reg <= mul_11_reg_1819;
        mul_11_reg_1819_pp0_iter3_reg <= mul_11_reg_1819_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataB_addr_15_reg_1649 <= sext_ln19_15_fu_1196_p1;
        dataB_addr_6_read_reg_1644 <= dataB_RDATA;
        icmp_ln15_reg_1655 <= icmp_ln15_fu_1212_p2;
        icmp_ln15_reg_1655_pp0_iter1_reg <= icmp_ln15_reg_1655;
        icmp_ln15_reg_1655_pp0_iter2_reg <= icmp_ln15_reg_1655_pp0_iter1_reg;
        icmp_ln15_reg_1655_pp0_iter3_reg <= icmp_ln15_reg_1655_pp0_iter2_reg;
        icmp_ln15_reg_1655_pp0_iter4_reg <= icmp_ln15_reg_1655_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataB_addr_1_reg_1429 <= sext_ln19_1_fu_645_p1;
        dataB_addr_8_read_reg_1694 <= dataB_RDATA;
        mul_5_reg_1679_pp0_iter2_reg <= mul_5_reg_1679;
        zext_ln19_1_cast_reg_1422[5 : 2] <= zext_ln19_1_cast_fu_617_p4[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataB_addr_2_reg_1446 <= sext_ln19_2_fu_685_p1;
        dataB_addr_9_read_reg_1714 <= dataB_RDATA;
        mul_6_reg_1699_pp0_iter2_reg <= mul_6_reg_1699;
        zext_ln19_2_reg_1435[5 : 2] <= zext_ln19_2_fu_655_p1[5 : 2];
        zext_ln19_3_cast_reg_1440[5 : 2] <= zext_ln19_3_cast_fu_658_p3[5 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        dataB_addr_9_reg_1503 <= sext_ln19_9_fu_937_p1;
        dataB_addr_read_reg_1498 <= dataB_RDATA;
        mul_12_reg_1839_pp0_iter2_reg <= mul_12_reg_1839;
        mul_12_reg_1839_pp0_iter3_reg <= mul_12_reg_1839_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln16_reg_1417 <= icmp_ln16_fu_590_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul_10_reg_1799 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        mul_11_reg_1819 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_12_reg_1839 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_13_reg_1854 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        mul_14_reg_1859 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        mul_1_reg_1577 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        mul_2_reg_1603 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        mul_3_reg_1629 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_4_reg_1659 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_5_reg_1679 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_6_reg_1699 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_7_reg_1719 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_8_reg_1739 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul_9_reg_1759 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        mul_reg_1551 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mul_s_reg_1779 <= grp_fu_422_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 
    == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        reg_426 <= dataA_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)))) begin
        reg_430 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        reg_435 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        reg_440 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        reg_445 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        reg_450 <= grp_fu_417_p2;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln15_fu_1212_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        ap_condition_exit_pp0_iter0_stage15 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage15 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_1655_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        ap_condition_exit_pp0_iter5_stage5 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter5_stage5 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5) & (ap_loop_exit_ready_pp0_iter5_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to4 = 1'b1;
    end else begin
        ap_idle_pp0_0to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to5 = 1'b1;
    end else begin
        ap_idle_pp0_1to5 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        if ((1'b1 == ap_condition_1884)) begin
            ap_phi_mux_icmp_ln165_phi_fu_410_p4 = icmp_ln16_reg_1417;
        end else if ((ap_loop_init == 1'b1)) begin
            ap_phi_mux_icmp_ln165_phi_fu_410_p4 = 1'd0;
        end else begin
            ap_phi_mux_icmp_ln165_phi_fu_410_p4 = icmp_ln16_reg_1417;
        end
    end else begin
        ap_phi_mux_icmp_ln165_phi_fu_410_p4 = icmp_ln16_reg_1417;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_add_ln156_load = 5'd1;
    end else begin
        ap_sig_allocacmp_add_ln156_load = add_ln156_fu_152;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i3_load = 5'd0;
    end else begin
        ap_sig_allocacmp_i3_load = i3_fu_144;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_j4_load = 5'd0;
    end else begin
        ap_sig_allocacmp_j4_load = j4_fu_148;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage15_11001) & (first_iter_0_reg_394_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataAB_AWVALID = 1'b1;
    end else begin
        dataAB_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_1655_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataAB_BREADY = 1'b1;
    end else begin
        dataAB_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataAB_WVALID = 1'b1;
    end else begin
        dataAB_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (first_iter_0_reg_394_pp0_iter4_reg == 1'd1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataAB_blk_n_AW = m_axi_dataAB_AWREADY;
    end else begin
        dataAB_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_1655_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataAB_blk_n_B = m_axi_dataAB_BVALID;
    end else begin
        dataAB_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataAB_blk_n_W = m_axi_dataAB_WREADY;
    end else begin
        dataAB_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA_ARVALID = 1'b1;
    end else begin
        dataA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 
    == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataA_RREADY = 1'b1;
    end else begin
        dataA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA_blk_n_AR = m_axi_dataA_ARREADY;
    end else begin
        dataA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15)) 
    | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataA_blk_n_R = m_axi_dataA_RVALID;
    end else begin
        dataA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataB_ARADDR = dataB_addr_15_reg_1649;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataB_ARADDR = dataB_addr_14_reg_1623;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        dataB_ARADDR = dataB_addr_13_reg_1597;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        dataB_ARADDR = dataB_addr_12_reg_1571;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        dataB_ARADDR = dataB_addr_11_reg_1545;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        dataB_ARADDR = dataB_addr_10_reg_1524;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        dataB_ARADDR = dataB_addr_9_reg_1503;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        dataB_ARADDR = dataB_addr_8_reg_1492;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        dataB_ARADDR = dataB_addr_7_reg_1486;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        dataB_ARADDR = dataB_addr_6_reg_1480;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        dataB_ARADDR = dataB_addr_5_reg_1474;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataB_ARADDR = dataB_addr_4_reg_1463;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        dataB_ARADDR = dataB_addr_3_reg_1452;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataB_ARADDR = dataB_addr_2_reg_1446;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataB_ARADDR = dataB_addr_1_reg_1429;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataB_ARADDR = dataB_addr_reg_1411;
    end else begin
        dataB_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 
    == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataB_ARVALID = 1'b1;
    end else begin
        dataB_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 
    == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataB_RREADY = 1'b1;
    end else begin
        dataB_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14)) 
    | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dataB_blk_n_AR = m_axi_dataB_ARREADY;
    end else begin
        dataB_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15)) 
    | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataB_blk_n_R = m_axi_dataB_RVALID;
    end else begin
        dataB_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) 
    | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_417_ce = 1'b1;
    end else begin
        grp_fu_417_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_417_p0 = reg_450;
    end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_417_p0 = reg_445;
    end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        grp_fu_417_p0 = reg_440;
    end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14)))) begin
        grp_fu_417_p0 = reg_435;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_417_p0 = reg_430;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_417_p0 = mul_reg_1551;
    end else begin
        grp_fu_417_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_417_p1 = mul_14_reg_1859_pp0_iter4_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_417_p1 = mul_13_reg_1854_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_417_p1 = mul_12_reg_1839_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_417_p1 = mul_11_reg_1819_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_417_p1 = mul_10_reg_1799_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_417_p1 = mul_s_reg_1779_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_417_p1 = mul_9_reg_1759_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_417_p1 = mul_8_reg_1739_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_417_p1 = mul_7_reg_1719_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_417_p1 = mul_6_reg_1699_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_417_p1 = mul_5_reg_1679_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_417_p1 = mul_4_reg_1659;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_417_p1 = mul_3_reg_1629;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_417_p1 = mul_2_reg_1603;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_417_p1 = mul_1_reg_1577;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_417_p1 = 32'd0;
    end else begin
        grp_fu_417_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) 
    | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_422_ce = 1'b1;
    end else begin
        grp_fu_422_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_422_p0 = bitcast_ln19_30_fu_1304_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_422_p0 = bitcast_ln19_28_fu_1295_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_422_p0 = bitcast_ln19_26_fu_1286_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_422_p0 = bitcast_ln19_24_fu_1277_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_422_p0 = bitcast_ln19_22_fu_1268_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_422_p0 = bitcast_ln19_20_fu_1259_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_422_p0 = bitcast_ln19_18_fu_1250_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_422_p0 = bitcast_ln19_16_fu_1241_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_422_p0 = bitcast_ln19_14_fu_1232_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_422_p0 = bitcast_ln19_12_fu_1223_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_422_p0 = bitcast_ln19_10_fu_1165_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_422_p0 = bitcast_ln19_8_fu_1121_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_422_p0 = bitcast_ln19_6_fu_1080_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_422_p0 = bitcast_ln19_4_fu_1039_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_422_p0 = bitcast_ln19_2_fu_992_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_422_p0 = bitcast_ln19_fu_947_p1;
    end else begin
        grp_fu_422_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_422_p1 = bitcast_ln19_31_fu_1309_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_422_p1 = bitcast_ln19_29_fu_1300_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_422_p1 = bitcast_ln19_27_fu_1291_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_422_p1 = bitcast_ln19_25_fu_1282_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_422_p1 = bitcast_ln19_23_fu_1273_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_422_p1 = bitcast_ln19_21_fu_1264_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_422_p1 = bitcast_ln19_19_fu_1255_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_422_p1 = bitcast_ln19_17_fu_1246_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_422_p1 = bitcast_ln19_15_fu_1237_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_422_p1 = bitcast_ln19_13_fu_1228_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_422_p1 = bitcast_ln19_11_fu_1170_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_422_p1 = bitcast_ln19_9_fu_1126_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage13) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_422_p1 = bitcast_ln19_7_fu_1085_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_422_p1 = bitcast_ln19_5_fu_1044_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_422_p1 = bitcast_ln19_3_fu_997_p1;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_422_p1 = bitcast_ln19_1_fu_952_p1;
    end else begin
        grp_fu_422_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to5 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if (((1'b1 == ap_condition_exit_pp0_iter5_stage5) & (ap_idle_pp0_0to4 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((1'b0 == ap_block_pp0_stage5_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_1206_p2 = (indvar_flatten2_fu_140 + 8'd1);

assign add_ln15_fu_596_p2 = (i_fu_492_p3 + 5'd1);

assign add_ln16_fu_516_p2 = (zext_ln16_fu_512_p1 + A);

assign add_ln19_10_fu_967_p2 = (zext_ln19_13_fu_963_p1 + B_read_reg_1371);

assign add_ln19_11_fu_1014_p2 = (zext_ln19_14_fu_1010_p1 + B_read_reg_1371);

assign add_ln19_12_fu_1055_p2 = (zext_ln19_15_fu_1051_p1 + B_read_reg_1371);

assign add_ln19_13_fu_1096_p2 = (zext_ln19_16_fu_1092_p1 + B_read_reg_1371);

assign add_ln19_14_fu_1137_p2 = (zext_ln19_17_fu_1133_p1 + B_read_reg_1371);

assign add_ln19_15_fu_1181_p2 = (zext_ln19_18_fu_1177_p1 + B_read_reg_1371);

assign add_ln19_1_fu_630_p2 = (zext_ln19_1_fu_626_p1 + B_read_reg_1371);

assign add_ln19_2_fu_670_p2 = (zext_ln19_3_fu_666_p1 + B_read_reg_1371);

assign add_ln19_3_fu_702_p2 = (zext_ln19_4_fu_698_p1 + B_read_reg_1371);

assign add_ln19_4_fu_742_p2 = (zext_ln19_6_fu_738_p1 + B_read_reg_1371);

assign add_ln19_5_fu_780_p2 = (zext_ln19_7_fu_776_p1 + B_read_reg_1371);

assign add_ln19_6_fu_812_p2 = (zext_ln19_8_fu_808_p1 + B_read_reg_1371);

assign add_ln19_7_fu_844_p2 = (zext_ln19_9_fu_840_p1 + B_read_reg_1371);

assign add_ln19_8_fu_884_p2 = (zext_ln19_11_fu_880_p1 + B_read_reg_1371);

assign add_ln19_9_fu_922_p2 = (zext_ln19_12_fu_918_p1 + B_read_reg_1371);

assign add_ln19_fu_558_p2 = (zext_ln19_fu_554_p1 + B);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd9];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state17_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (dataAB_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state17_pp0_stage0_iter1) | (dataB_ARREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (dataAB_WREADY == 1'b0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((1'b1 == ap_block_state17_pp0_stage0_iter1) | (dataB_ARREADY == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_pp0_stage10_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_pp0_stage10_iter0) | (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_pp0_stage11_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_pp0_stage11_iter0) | (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_pp0_stage12_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_pp0_stage12_iter0) | (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_pp0_stage13_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_pp0_stage13_iter0) | (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_pp0_stage14_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_pp0_stage14_iter0) | (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state80_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_pp0_stage15_iter0) | (dataB_ARREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state80_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_pp0_stage15_iter0) | (dataB_ARREADY == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage1_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state18_pp0_stage1_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_io)));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage2_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state19_pp0_stage2_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state20_pp0_stage3_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state20_pp0_stage3_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state21_pp0_stage4_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state21_pp0_stage4_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state86_pp0_stage5_iter5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state22_pp0_stage5_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b1 == ap_block_state86_pp0_stage5_iter5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state22_pp0_stage5_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state23_pp0_stage6_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state23_pp0_stage6_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state24_pp0_stage7_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state24_pp0_stage7_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state25_pp0_stage8_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state25_pp0_stage8_iter1)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & (dataB_ARREADY == 1'b0)));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state10_pp0_stage9_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state10_pp0_stage9_iter0) | (dataB_ARREADY == 1'b0)));
end

always @ (*) begin
    ap_block_state10_pp0_stage9_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state11_pp0_stage10_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state12_pp0_stage11_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state13_pp0_stage12_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state14_pp0_stage13_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state15_pp0_stage14_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state16_pp0_stage15_iter0 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state17_pp0_stage0_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state18_pp0_stage1_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state19_pp0_stage2_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp0_stage3_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state21_pp0_stage4_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state22_pp0_stage5_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state23_pp0_stage6_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state24_pp0_stage7_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state25_pp0_stage8_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state2_io = ((dataA_ARREADY == 1'b0) | (dataB_ARREADY == 1'b0));
end

always @ (*) begin
    ap_block_state80_io = ((first_iter_0_reg_394_pp0_iter4_reg == 1'd1) & (dataAB_AWREADY == 1'b0));
end

always @ (*) begin
    ap_block_state86_pp0_stage5_iter5 = ((icmp_ln15_reg_1655_pp0_iter4_reg == 1'd1) & (dataAB_BVALID == 1'b0));
end

always @ (*) begin
    ap_condition_1884 = ((icmp_ln15_reg_1655 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0));
end

always @ (*) begin
    ap_condition_1888 = ((icmp_ln15_reg_1655 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001));
end

always @ (*) begin
    ap_condition_1891 = ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1));
end

always @ (*) begin
    ap_condition_855 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_done = ap_done_sig;

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage15;

assign ap_ready = ap_ready_sig;

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln19_10_fu_1165_p1 = reg_426;

assign bitcast_ln19_11_fu_1170_p1 = dataB_addr_5_read_reg_1618;

assign bitcast_ln19_12_fu_1223_p1 = reg_426;

assign bitcast_ln19_13_fu_1228_p1 = dataB_addr_6_read_reg_1644;

assign bitcast_ln19_14_fu_1232_p1 = reg_426;

assign bitcast_ln19_15_fu_1237_p1 = dataB_addr_7_read_reg_1674;

assign bitcast_ln19_16_fu_1241_p1 = reg_426;

assign bitcast_ln19_17_fu_1246_p1 = dataB_addr_8_read_reg_1694;

assign bitcast_ln19_18_fu_1250_p1 = reg_426;

assign bitcast_ln19_19_fu_1255_p1 = dataB_addr_9_read_reg_1714;

assign bitcast_ln19_1_fu_952_p1 = dataB_addr_read_reg_1498;

assign bitcast_ln19_20_fu_1259_p1 = reg_426;

assign bitcast_ln19_21_fu_1264_p1 = dataB_addr_10_read_reg_1734;

assign bitcast_ln19_22_fu_1268_p1 = reg_426;

assign bitcast_ln19_23_fu_1273_p1 = dataB_addr_11_read_reg_1754;

assign bitcast_ln19_24_fu_1277_p1 = reg_426;

assign bitcast_ln19_25_fu_1282_p1 = dataB_addr_12_read_reg_1774;

assign bitcast_ln19_26_fu_1286_p1 = reg_426;

assign bitcast_ln19_27_fu_1291_p1 = dataB_addr_13_read_reg_1794;

assign bitcast_ln19_28_fu_1295_p1 = reg_426;

assign bitcast_ln19_29_fu_1300_p1 = dataB_addr_14_read_reg_1814;

assign bitcast_ln19_2_fu_992_p1 = reg_426;

assign bitcast_ln19_30_fu_1304_p1 = reg_426;

assign bitcast_ln19_31_fu_1309_p1 = dataB_addr_15_read_reg_1834;

assign bitcast_ln19_3_fu_997_p1 = dataB_addr_1_read_reg_1519;

assign bitcast_ln19_4_fu_1039_p1 = reg_426;

assign bitcast_ln19_5_fu_1044_p1 = dataB_addr_2_read_reg_1540;

assign bitcast_ln19_6_fu_1080_p1 = reg_426;

assign bitcast_ln19_7_fu_1085_p1 = dataB_addr_3_read_reg_1566;

assign bitcast_ln19_8_fu_1121_p1 = reg_426;

assign bitcast_ln19_9_fu_1126_p1 = dataB_addr_4_read_reg_1592;

assign bitcast_ln19_fu_947_p1 = reg_426;

assign dataAB_AWLEN = 64'd256;

assign dataAB_WDATA = reg_430;

assign dataA_ARLEN = 64'd16;

assign dataB_ARLEN = 64'd1;

assign i_fu_492_p3 = ((ap_phi_mux_icmp_ln165_phi_fu_410_p4[0:0] == 1'b1) ? ap_sig_allocacmp_add_ln156_load : ap_sig_allocacmp_i3_load);

assign icmp_ln15_fu_1212_p2 = ((indvar_flatten2_fu_140 == 8'd255) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_590_p2 = ((j_fu_584_p2 == 5'd16) ? 1'b1 : 1'b0);

assign j_fu_584_p2 = (select_ln15_fu_484_p3 + 5'd1);

assign p_cast_cast_fu_532_p1 = $signed(p_cast_fu_522_p4);

assign p_cast_fu_522_p4 = {{add_ln16_fu_516_p2[63:2]}};

assign select_ln15_fu_484_p3 = ((ap_phi_mux_icmp_ln165_phi_fu_410_p4[0:0] == 1'b1) ? 5'd0 : ap_sig_allocacmp_j4_load);

assign sext_ln15_fu_1322_p1 = $signed(trunc_ln_fu_1313_p4);

assign sext_ln19_10_fu_982_p1 = $signed(trunc_ln19_s_fu_972_p4);

assign sext_ln19_11_fu_1029_p1 = $signed(trunc_ln19_10_fu_1019_p4);

assign sext_ln19_12_fu_1070_p1 = $signed(trunc_ln19_11_fu_1060_p4);

assign sext_ln19_13_fu_1111_p1 = $signed(trunc_ln19_12_fu_1101_p4);

assign sext_ln19_14_fu_1152_p1 = $signed(trunc_ln19_13_fu_1142_p4);

assign sext_ln19_15_fu_1196_p1 = $signed(trunc_ln19_14_fu_1186_p4);

assign sext_ln19_16_fu_695_p1 = zext_ln19_1_cast_reg_1422;

assign sext_ln19_17_fu_805_p1 = zext_ln19_3_cast_reg_1440;

assign sext_ln19_18_fu_837_p1 = zext_ln19_1_cast_reg_1422;

assign sext_ln19_19_fu_1048_p1 = zext_ln19_6_cast_reg_1458;

assign sext_ln19_1_fu_645_p1 = $signed(trunc_ln19_1_fu_635_p4);

assign sext_ln19_20_fu_1089_p1 = zext_ln19_7_cast_reg_1469;

assign sext_ln19_21_fu_1130_p1 = zext_ln19_3_cast_reg_1440;

assign sext_ln19_22_fu_1174_p1 = zext_ln19_1_cast_reg_1422;

assign sext_ln19_2_fu_685_p1 = $signed(trunc_ln19_2_fu_675_p4);

assign sext_ln19_3_fu_717_p1 = $signed(trunc_ln19_3_fu_707_p4);

assign sext_ln19_4_fu_757_p1 = $signed(trunc_ln19_4_fu_747_p4);

assign sext_ln19_5_fu_795_p1 = $signed(trunc_ln19_5_fu_785_p4);

assign sext_ln19_6_fu_827_p1 = $signed(trunc_ln19_6_fu_817_p4);

assign sext_ln19_7_fu_859_p1 = $signed(trunc_ln19_7_fu_849_p4);

assign sext_ln19_8_fu_899_p1 = $signed(trunc_ln19_8_fu_889_p4);

assign sext_ln19_9_fu_937_p1 = $signed(trunc_ln19_9_fu_927_p4);

assign sext_ln19_fu_574_p1 = $signed(trunc_ln1_fu_564_p4);

assign shl_ln1_fu_546_p3 = {{trunc_ln19_fu_542_p1}, {2'd0}};

assign shl_ln_fu_504_p3 = {{trunc_ln16_fu_500_p1}, {6'd0}};

assign trunc_ln16_fu_500_p1 = i_fu_492_p3[3:0];

assign trunc_ln19_10_fu_1019_p4 = {{add_ln19_11_fu_1014_p2[63:2]}};

assign trunc_ln19_11_fu_1060_p4 = {{add_ln19_12_fu_1055_p2[63:2]}};

assign trunc_ln19_12_fu_1101_p4 = {{add_ln19_13_fu_1096_p2[63:2]}};

assign trunc_ln19_13_fu_1142_p4 = {{add_ln19_14_fu_1137_p2[63:2]}};

assign trunc_ln19_14_fu_1186_p4 = {{add_ln19_15_fu_1181_p2[63:2]}};

assign trunc_ln19_1_fu_635_p4 = {{add_ln19_1_fu_630_p2[63:2]}};

assign trunc_ln19_2_fu_675_p4 = {{add_ln19_2_fu_670_p2[63:2]}};

assign trunc_ln19_3_fu_707_p4 = {{add_ln19_3_fu_702_p2[63:2]}};

assign trunc_ln19_4_fu_747_p4 = {{add_ln19_4_fu_742_p2[63:2]}};

assign trunc_ln19_5_fu_785_p4 = {{add_ln19_5_fu_780_p2[63:2]}};

assign trunc_ln19_6_fu_817_p4 = {{add_ln19_6_fu_812_p2[63:2]}};

assign trunc_ln19_7_fu_849_p4 = {{add_ln19_7_fu_844_p2[63:2]}};

assign trunc_ln19_8_fu_889_p4 = {{add_ln19_8_fu_884_p2[63:2]}};

assign trunc_ln19_9_fu_927_p4 = {{add_ln19_9_fu_922_p2[63:2]}};

assign trunc_ln19_fu_542_p1 = select_ln15_fu_484_p3[3:0];

assign trunc_ln19_s_fu_972_p4 = {{add_ln19_10_fu_967_p2[63:2]}};

assign trunc_ln1_fu_564_p4 = {{add_ln19_fu_558_p2[63:2]}};

assign trunc_ln_fu_1313_p4 = {{AB_read_reg_1366_pp0_iter4_reg[63:2]}};

assign zext_ln16_fu_512_p1 = shl_ln_fu_504_p3;

assign zext_ln19_10_fu_869_p1 = shl_ln1_reg_1404;

assign zext_ln19_11_cast_fu_872_p3 = {{1'd1}, {zext_ln19_10_fu_869_p1}};

assign zext_ln19_11_fu_880_p1 = zext_ln19_11_cast_fu_872_p3;

assign zext_ln19_12_cast_fu_909_p4 = {{{{4'd9}, {trunc_ln19_reg_1396}}}, {2'd0}};

assign zext_ln19_12_fu_918_p1 = zext_ln19_12_cast_fu_909_p4;

assign zext_ln19_13_fu_963_p1 = zext_ln19_14_cast_fu_956_p3;

assign zext_ln19_14_cast_fu_956_p3 = {{3'd5}, {zext_ln19_2_reg_1435}};

assign zext_ln19_14_fu_1010_p1 = zext_ln19_15_cast_fu_1001_p4;

assign zext_ln19_15_cast_fu_1001_p4 = {{{{4'd11}, {trunc_ln19_reg_1396}}}, {2'd0}};

assign zext_ln19_15_fu_1051_p1 = $unsigned(sext_ln19_19_fu_1048_p1);

assign zext_ln19_16_fu_1092_p1 = $unsigned(sext_ln19_20_fu_1089_p1);

assign zext_ln19_17_fu_1133_p1 = $unsigned(sext_ln19_21_fu_1130_p1);

assign zext_ln19_18_fu_1177_p1 = $unsigned(sext_ln19_22_fu_1174_p1);

assign zext_ln19_1_cast_fu_617_p4 = {{{{1'd1}, {trunc_ln19_reg_1396}}}, {2'd0}};

assign zext_ln19_1_fu_626_p1 = $unsigned(zext_ln19_1_cast_fu_617_p4);

assign zext_ln19_2_fu_655_p1 = shl_ln1_reg_1404;

assign zext_ln19_3_cast_fu_658_p3 = {{1'd1}, {zext_ln19_2_fu_655_p1}};

assign zext_ln19_3_fu_666_p1 = $unsigned(zext_ln19_3_cast_fu_658_p3);

assign zext_ln19_4_fu_698_p1 = $unsigned(sext_ln19_16_fu_695_p1);

assign zext_ln19_5_fu_727_p1 = shl_ln1_reg_1404;

assign zext_ln19_6_cast_fu_730_p3 = {{1'd1}, {zext_ln19_5_fu_727_p1}};

assign zext_ln19_6_fu_738_p1 = $unsigned(zext_ln19_6_cast_fu_730_p3);

assign zext_ln19_7_cast_fu_767_p4 = {{{{3'd5}, {trunc_ln19_reg_1396}}}, {2'd0}};

assign zext_ln19_7_fu_776_p1 = $unsigned(zext_ln19_7_cast_fu_767_p4);

assign zext_ln19_8_fu_808_p1 = $unsigned(sext_ln19_17_fu_805_p1);

assign zext_ln19_9_fu_840_p1 = $unsigned(sext_ln19_18_fu_837_p1);

assign zext_ln19_fu_554_p1 = shl_ln1_fu_546_p3;

always @ (posedge ap_clk) begin
    shl_ln1_reg_1404[1:0] <= 2'b00;
    zext_ln19_1_cast_reg_1422[1:0] <= 2'b00;
    zext_ln19_1_cast_reg_1422[6] <= 1'b1;
    zext_ln19_2_reg_1435[1:0] <= 2'b00;
    zext_ln19_2_reg_1435[6] <= 1'b0;
    zext_ln19_3_cast_reg_1440[1:0] <= 2'b00;
    zext_ln19_3_cast_reg_1440[7:6] <= 2'b10;
    zext_ln19_6_cast_reg_1458[1:0] <= 2'b00;
    zext_ln19_6_cast_reg_1458[8:6] <= 3'b100;
    zext_ln19_7_cast_reg_1469[1:0] <= 2'b00;
    zext_ln19_7_cast_reg_1469[8:6] <= 3'b101;
end

endmodule //matmul_plain
