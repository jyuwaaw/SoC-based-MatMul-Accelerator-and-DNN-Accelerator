-- ==============================================================
-- Generated by Vitis HLS v2023.1
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity pl_vecadd is
generic (
    C_M_AXI_DATA0_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA0_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA0_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA0_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA1_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA1_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA1_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_DATA2_ID_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA2_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_DATA2_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CTRL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_DATA0_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA0_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA0_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA1_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA1_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_DATA2_USER_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_PROT_VALUE : INTEGER := 0;
    C_M_AXI_DATA2_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_data0_AWVALID : OUT STD_LOGIC;
    m_axi_data0_AWREADY : IN STD_LOGIC;
    m_axi_data0_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ADDR_WIDTH-1 downto 0);
    m_axi_data0_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data0_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_AWUSER_WIDTH-1 downto 0);
    m_axi_data0_WVALID : OUT STD_LOGIC;
    m_axi_data0_WREADY : IN STD_LOGIC;
    m_axi_data0_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH-1 downto 0);
    m_axi_data0_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH/8-1 downto 0);
    m_axi_data0_WLAST : OUT STD_LOGIC;
    m_axi_data0_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_WUSER_WIDTH-1 downto 0);
    m_axi_data0_ARVALID : OUT STD_LOGIC;
    m_axi_data0_ARREADY : IN STD_LOGIC;
    m_axi_data0_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ADDR_WIDTH-1 downto 0);
    m_axi_data0_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data0_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data0_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data0_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA0_ARUSER_WIDTH-1 downto 0);
    m_axi_data0_RVALID : IN STD_LOGIC;
    m_axi_data0_RREADY : OUT STD_LOGIC;
    m_axi_data0_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_DATA_WIDTH-1 downto 0);
    m_axi_data0_RLAST : IN STD_LOGIC;
    m_axi_data0_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_RUSER_WIDTH-1 downto 0);
    m_axi_data0_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_BVALID : IN STD_LOGIC;
    m_axi_data0_BREADY : OUT STD_LOGIC;
    m_axi_data0_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data0_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_ID_WIDTH-1 downto 0);
    m_axi_data0_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA0_BUSER_WIDTH-1 downto 0);
    m_axi_data1_AWVALID : OUT STD_LOGIC;
    m_axi_data1_AWREADY : IN STD_LOGIC;
    m_axi_data1_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_AWUSER_WIDTH-1 downto 0);
    m_axi_data1_WVALID : OUT STD_LOGIC;
    m_axi_data1_WREADY : IN STD_LOGIC;
    m_axi_data1_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH/8-1 downto 0);
    m_axi_data1_WLAST : OUT STD_LOGIC;
    m_axi_data1_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_WUSER_WIDTH-1 downto 0);
    m_axi_data1_ARVALID : OUT STD_LOGIC;
    m_axi_data1_ARREADY : IN STD_LOGIC;
    m_axi_data1_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ADDR_WIDTH-1 downto 0);
    m_axi_data1_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data1_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data1_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data1_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA1_ARUSER_WIDTH-1 downto 0);
    m_axi_data1_RVALID : IN STD_LOGIC;
    m_axi_data1_RREADY : OUT STD_LOGIC;
    m_axi_data1_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_DATA_WIDTH-1 downto 0);
    m_axi_data1_RLAST : IN STD_LOGIC;
    m_axi_data1_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_RUSER_WIDTH-1 downto 0);
    m_axi_data1_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BVALID : IN STD_LOGIC;
    m_axi_data1_BREADY : OUT STD_LOGIC;
    m_axi_data1_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data1_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_ID_WIDTH-1 downto 0);
    m_axi_data1_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA1_BUSER_WIDTH-1 downto 0);
    m_axi_data2_AWVALID : OUT STD_LOGIC;
    m_axi_data2_AWREADY : IN STD_LOGIC;
    m_axi_data2_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_AWUSER_WIDTH-1 downto 0);
    m_axi_data2_WVALID : OUT STD_LOGIC;
    m_axi_data2_WREADY : IN STD_LOGIC;
    m_axi_data2_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH/8-1 downto 0);
    m_axi_data2_WLAST : OUT STD_LOGIC;
    m_axi_data2_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_WUSER_WIDTH-1 downto 0);
    m_axi_data2_ARVALID : OUT STD_LOGIC;
    m_axi_data2_ARREADY : IN STD_LOGIC;
    m_axi_data2_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ADDR_WIDTH-1 downto 0);
    m_axi_data2_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_data2_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_data2_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_data2_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA2_ARUSER_WIDTH-1 downto 0);
    m_axi_data2_RVALID : IN STD_LOGIC;
    m_axi_data2_RREADY : OUT STD_LOGIC;
    m_axi_data2_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_DATA_WIDTH-1 downto 0);
    m_axi_data2_RLAST : IN STD_LOGIC;
    m_axi_data2_RID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_RUSER_WIDTH-1 downto 0);
    m_axi_data2_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BVALID : IN STD_LOGIC;
    m_axi_data2_BREADY : OUT STD_LOGIC;
    m_axi_data2_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_data2_BID : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_ID_WIDTH-1 downto 0);
    m_axi_data2_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_DATA2_BUSER_WIDTH-1 downto 0);
    s_axi_ctrl_AWVALID : IN STD_LOGIC;
    s_axi_ctrl_AWREADY : OUT STD_LOGIC;
    s_axi_ctrl_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_WVALID : IN STD_LOGIC;
    s_axi_ctrl_WREADY : OUT STD_LOGIC;
    s_axi_ctrl_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH/8-1 downto 0);
    s_axi_ctrl_ARVALID : IN STD_LOGIC;
    s_axi_ctrl_ARREADY : OUT STD_LOGIC;
    s_axi_ctrl_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_ADDR_WIDTH-1 downto 0);
    s_axi_ctrl_RVALID : OUT STD_LOGIC;
    s_axi_ctrl_RREADY : IN STD_LOGIC;
    s_axi_ctrl_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_DATA_WIDTH-1 downto 0);
    s_axi_ctrl_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_ctrl_BVALID : OUT STD_LOGIC;
    s_axi_ctrl_BREADY : IN STD_LOGIC;
    s_axi_ctrl_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC );
end;


architecture behav of pl_vecadd is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "pl_vecadd_pl_vecadd,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=1045,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=3684,HLS_SYN_LUT=3004,HLS_VERSION=2023_1}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_M_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_400 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv11_400 : STD_LOGIC_VECTOR (10 downto 0) := "10000000000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal a : STD_LOGIC_VECTOR (63 downto 0);
    signal a_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal a_0_vld_reg : STD_LOGIC := '0';
    signal a_0_ack_out : STD_LOGIC;
    signal b : STD_LOGIC_VECTOR (63 downto 0);
    signal b_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal b_0_vld_reg : STD_LOGIC := '0';
    signal b_0_ack_out : STD_LOGIC;
    signal c : STD_LOGIC_VECTOR (63 downto 0);
    signal c_0_data_reg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal c_0_vld_reg : STD_LOGIC := '0';
    signal c_0_ack_out : STD_LOGIC;
    signal data0_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal first_iter_0_reg_160 : STD_LOGIC_VECTOR (0 downto 0);
    signal data0_blk_n_R : STD_LOGIC;
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal data1_blk_n_AR : STD_LOGIC;
    signal data1_blk_n_R : STD_LOGIC;
    signal data2_blk_n_AW : STD_LOGIC;
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal first_iter_0_reg_160_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal data2_blk_n_W : STD_LOGIC;
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal data2_blk_n_B : STD_LOGIC;
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal icmp_ln14_1_reg_332 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal data0_AWREADY : STD_LOGIC;
    signal data0_WREADY : STD_LOGIC;
    signal data0_ARVALID : STD_LOGIC;
    signal data0_ARREADY : STD_LOGIC;
    signal data0_RVALID : STD_LOGIC;
    signal data0_RREADY : STD_LOGIC;
    signal data0_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data0_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data0_BVALID : STD_LOGIC;
    signal data1_AWREADY : STD_LOGIC;
    signal data1_WREADY : STD_LOGIC;
    signal data1_ARVALID : STD_LOGIC;
    signal data1_ARREADY : STD_LOGIC;
    signal data1_RVALID : STD_LOGIC;
    signal data1_RREADY : STD_LOGIC;
    signal data1_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data1_BVALID : STD_LOGIC;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state4_io : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal data2_AWVALID : STD_LOGIC;
    signal data2_AWREADY : STD_LOGIC;
    signal data2_WVALID : STD_LOGIC;
    signal data2_WREADY : STD_LOGIC;
    signal data2_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_ARREADY : STD_LOGIC;
    signal data2_RVALID : STD_LOGIC;
    signal data2_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal data2_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal data2_BVALID : STD_LOGIC;
    signal data2_BREADY : STD_LOGIC;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state16_io : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal first_iter_0_reg_160_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal first_iter_0_reg_160_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal c_read_reg_286 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal b_read_reg_291 : STD_LOGIC_VECTOR (63 downto 0);
    signal a_read_reg_296 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln14_fu_185_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_reg_301 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln14_fu_191_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305 : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter1_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter2_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter3_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter4_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter5_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter6_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter7_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal add_ln14_reg_305_pp0_iter8_reg : STD_LOGIC_VECTOR (10 downto 0);
    signal data0_addr_read_reg_322 : STD_LOGIC_VECTOR (31 downto 0);
    signal data1_addr_read_reg_327 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln14_1_fu_242_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln14_1_reg_332_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_173_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_reg_352 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal sext_ln14_fu_211_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_1_fu_231_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln14_2_fu_264_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal i_fu_98 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_fu_173_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_173_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal trunc_ln_fu_202_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln14_1_fu_222_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln14_2_fu_255_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_173_ce : STD_LOGIC;
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component pl_vecadd_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component pl_vecadd_ctrl_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        a : OUT STD_LOGIC_VECTOR (63 downto 0);
        b : OUT STD_LOGIC_VECTOR (63 downto 0);
        c : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component pl_vecadd_data0_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component pl_vecadd_data1_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component pl_vecadd_data2_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    ctrl_s_axi_U : component pl_vecadd_ctrl_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_ctrl_AWVALID,
        AWREADY => s_axi_ctrl_AWREADY,
        AWADDR => s_axi_ctrl_AWADDR,
        WVALID => s_axi_ctrl_WVALID,
        WREADY => s_axi_ctrl_WREADY,
        WDATA => s_axi_ctrl_WDATA,
        WSTRB => s_axi_ctrl_WSTRB,
        ARVALID => s_axi_ctrl_ARVALID,
        ARREADY => s_axi_ctrl_ARREADY,
        ARADDR => s_axi_ctrl_ARADDR,
        RVALID => s_axi_ctrl_RVALID,
        RREADY => s_axi_ctrl_RREADY,
        RDATA => s_axi_ctrl_RDATA,
        RRESP => s_axi_ctrl_RRESP,
        BVALID => s_axi_ctrl_BVALID,
        BREADY => s_axi_ctrl_BREADY,
        BRESP => s_axi_ctrl_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        a => a,
        b => b,
        c => c,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    data0_m_axi_U : component pl_vecadd_data0_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA0_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA0_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA0_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA0_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA0_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA0_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA0_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA0_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA0_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA0_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA0_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_data0_AWVALID,
        AWREADY => m_axi_data0_AWREADY,
        AWADDR => m_axi_data0_AWADDR,
        AWID => m_axi_data0_AWID,
        AWLEN => m_axi_data0_AWLEN,
        AWSIZE => m_axi_data0_AWSIZE,
        AWBURST => m_axi_data0_AWBURST,
        AWLOCK => m_axi_data0_AWLOCK,
        AWCACHE => m_axi_data0_AWCACHE,
        AWPROT => m_axi_data0_AWPROT,
        AWQOS => m_axi_data0_AWQOS,
        AWREGION => m_axi_data0_AWREGION,
        AWUSER => m_axi_data0_AWUSER,
        WVALID => m_axi_data0_WVALID,
        WREADY => m_axi_data0_WREADY,
        WDATA => m_axi_data0_WDATA,
        WSTRB => m_axi_data0_WSTRB,
        WLAST => m_axi_data0_WLAST,
        WID => m_axi_data0_WID,
        WUSER => m_axi_data0_WUSER,
        ARVALID => m_axi_data0_ARVALID,
        ARREADY => m_axi_data0_ARREADY,
        ARADDR => m_axi_data0_ARADDR,
        ARID => m_axi_data0_ARID,
        ARLEN => m_axi_data0_ARLEN,
        ARSIZE => m_axi_data0_ARSIZE,
        ARBURST => m_axi_data0_ARBURST,
        ARLOCK => m_axi_data0_ARLOCK,
        ARCACHE => m_axi_data0_ARCACHE,
        ARPROT => m_axi_data0_ARPROT,
        ARQOS => m_axi_data0_ARQOS,
        ARREGION => m_axi_data0_ARREGION,
        ARUSER => m_axi_data0_ARUSER,
        RVALID => m_axi_data0_RVALID,
        RREADY => m_axi_data0_RREADY,
        RDATA => m_axi_data0_RDATA,
        RLAST => m_axi_data0_RLAST,
        RID => m_axi_data0_RID,
        RUSER => m_axi_data0_RUSER,
        RRESP => m_axi_data0_RRESP,
        BVALID => m_axi_data0_BVALID,
        BREADY => m_axi_data0_BREADY,
        BRESP => m_axi_data0_BRESP,
        BID => m_axi_data0_BID,
        BUSER => m_axi_data0_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data0_ARVALID,
        I_ARREADY => data0_ARREADY,
        I_ARADDR => sext_ln14_fu_211_p1,
        I_ARLEN => ap_const_lv32_400,
        I_RVALID => data0_RVALID,
        I_RREADY => data0_RREADY,
        I_RDATA => data0_RDATA,
        I_RFIFONUM => data0_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data0_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data0_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => data0_BVALID,
        I_BREADY => ap_const_logic_0);

    data1_m_axi_U : component pl_vecadd_data1_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA1_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA1_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA1_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA1_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA1_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA1_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA1_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA1_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA1_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA1_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA1_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_data1_AWVALID,
        AWREADY => m_axi_data1_AWREADY,
        AWADDR => m_axi_data1_AWADDR,
        AWID => m_axi_data1_AWID,
        AWLEN => m_axi_data1_AWLEN,
        AWSIZE => m_axi_data1_AWSIZE,
        AWBURST => m_axi_data1_AWBURST,
        AWLOCK => m_axi_data1_AWLOCK,
        AWCACHE => m_axi_data1_AWCACHE,
        AWPROT => m_axi_data1_AWPROT,
        AWQOS => m_axi_data1_AWQOS,
        AWREGION => m_axi_data1_AWREGION,
        AWUSER => m_axi_data1_AWUSER,
        WVALID => m_axi_data1_WVALID,
        WREADY => m_axi_data1_WREADY,
        WDATA => m_axi_data1_WDATA,
        WSTRB => m_axi_data1_WSTRB,
        WLAST => m_axi_data1_WLAST,
        WID => m_axi_data1_WID,
        WUSER => m_axi_data1_WUSER,
        ARVALID => m_axi_data1_ARVALID,
        ARREADY => m_axi_data1_ARREADY,
        ARADDR => m_axi_data1_ARADDR,
        ARID => m_axi_data1_ARID,
        ARLEN => m_axi_data1_ARLEN,
        ARSIZE => m_axi_data1_ARSIZE,
        ARBURST => m_axi_data1_ARBURST,
        ARLOCK => m_axi_data1_ARLOCK,
        ARCACHE => m_axi_data1_ARCACHE,
        ARPROT => m_axi_data1_ARPROT,
        ARQOS => m_axi_data1_ARQOS,
        ARREGION => m_axi_data1_ARREGION,
        ARUSER => m_axi_data1_ARUSER,
        RVALID => m_axi_data1_RVALID,
        RREADY => m_axi_data1_RREADY,
        RDATA => m_axi_data1_RDATA,
        RLAST => m_axi_data1_RLAST,
        RID => m_axi_data1_RID,
        RUSER => m_axi_data1_RUSER,
        RRESP => m_axi_data1_RRESP,
        BVALID => m_axi_data1_BVALID,
        BREADY => m_axi_data1_BREADY,
        BRESP => m_axi_data1_BRESP,
        BID => m_axi_data1_BID,
        BUSER => m_axi_data1_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => data1_ARVALID,
        I_ARREADY => data1_ARREADY,
        I_ARADDR => sext_ln14_1_fu_231_p1,
        I_ARLEN => ap_const_lv32_400,
        I_RVALID => data1_RVALID,
        I_RREADY => data1_RREADY,
        I_RDATA => data1_RDATA,
        I_RFIFONUM => data1_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => data1_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => data1_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => data1_BVALID,
        I_BREADY => ap_const_logic_0);

    data2_m_axi_U : component pl_vecadd_data2_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 5,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_DATA2_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_DATA2_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_DATA2_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_DATA2_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_DATA2_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_DATA2_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_DATA2_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_DATA2_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_DATA2_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_DATA2_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_DATA2_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_data2_AWVALID,
        AWREADY => m_axi_data2_AWREADY,
        AWADDR => m_axi_data2_AWADDR,
        AWID => m_axi_data2_AWID,
        AWLEN => m_axi_data2_AWLEN,
        AWSIZE => m_axi_data2_AWSIZE,
        AWBURST => m_axi_data2_AWBURST,
        AWLOCK => m_axi_data2_AWLOCK,
        AWCACHE => m_axi_data2_AWCACHE,
        AWPROT => m_axi_data2_AWPROT,
        AWQOS => m_axi_data2_AWQOS,
        AWREGION => m_axi_data2_AWREGION,
        AWUSER => m_axi_data2_AWUSER,
        WVALID => m_axi_data2_WVALID,
        WREADY => m_axi_data2_WREADY,
        WDATA => m_axi_data2_WDATA,
        WSTRB => m_axi_data2_WSTRB,
        WLAST => m_axi_data2_WLAST,
        WID => m_axi_data2_WID,
        WUSER => m_axi_data2_WUSER,
        ARVALID => m_axi_data2_ARVALID,
        ARREADY => m_axi_data2_ARREADY,
        ARADDR => m_axi_data2_ARADDR,
        ARID => m_axi_data2_ARID,
        ARLEN => m_axi_data2_ARLEN,
        ARSIZE => m_axi_data2_ARSIZE,
        ARBURST => m_axi_data2_ARBURST,
        ARLOCK => m_axi_data2_ARLOCK,
        ARCACHE => m_axi_data2_ARCACHE,
        ARPROT => m_axi_data2_ARPROT,
        ARQOS => m_axi_data2_ARQOS,
        ARREGION => m_axi_data2_ARREGION,
        ARUSER => m_axi_data2_ARUSER,
        RVALID => m_axi_data2_RVALID,
        RREADY => m_axi_data2_RREADY,
        RDATA => m_axi_data2_RDATA,
        RLAST => m_axi_data2_RLAST,
        RID => m_axi_data2_RID,
        RUSER => m_axi_data2_RUSER,
        RRESP => m_axi_data2_RRESP,
        BVALID => m_axi_data2_BVALID,
        BREADY => m_axi_data2_BREADY,
        BRESP => m_axi_data2_BRESP,
        BID => m_axi_data2_BID,
        BUSER => m_axi_data2_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => data2_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => data2_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => data2_RDATA,
        I_RFIFONUM => data2_RFIFONUM,
        I_AWVALID => data2_AWVALID,
        I_AWREADY => data2_AWREADY,
        I_AWADDR => sext_ln14_2_fu_264_p1,
        I_AWLEN => ap_const_lv32_400,
        I_WVALID => data2_WVALID,
        I_WREADY => data2_WREADY,
        I_WDATA => data2_WDATA,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => data2_BVALID,
        I_BREADY => data2_BREADY);

    fadd_32ns_32ns_32_4_full_dsp_1_U1 : component pl_vecadd_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_173_p0,
        din1 => grp_fu_173_p1,
        ce => grp_fu_173_ce,
        dout => grp_fu_173_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    a_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    b_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    c_0_vld_reg_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
        end if;
    end process;

    first_iter_0_reg_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                first_iter_0_reg_160 <= ap_const_lv1_1;
            elsif (((icmp_ln14_reg_301 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                first_iter_0_reg_160 <= ap_const_lv1_0;
            end if; 
        end if;
    end process;

    i_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_fu_98 <= ap_const_lv11_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln14_fu_185_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_fu_98 <= add_ln14_fu_191_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = a_0_ack_out) and (ap_const_logic_1 = ap_const_logic_1) and (ap_const_logic_1 = a_0_vld_reg)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_0 = a_0_vld_reg) and (ap_const_logic_1 = ap_const_logic_1)))) then
                a_0_data_reg <= a;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                a_read_reg_296 <= a_0_data_reg;
                b_read_reg_291 <= b_0_data_reg;
                c_read_reg_286 <= c_0_data_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                add_ln14_reg_305 <= add_ln14_fu_191_p2;
                add_ln14_reg_305_pp0_iter1_reg <= add_ln14_reg_305;
                first_iter_0_reg_160_pp0_iter1_reg <= first_iter_0_reg_160;
                icmp_ln14_reg_301 <= icmp_ln14_fu_185_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                add_ln14_reg_305_pp0_iter2_reg <= add_ln14_reg_305_pp0_iter1_reg;
                add_ln14_reg_305_pp0_iter3_reg <= add_ln14_reg_305_pp0_iter2_reg;
                add_ln14_reg_305_pp0_iter4_reg <= add_ln14_reg_305_pp0_iter3_reg;
                add_ln14_reg_305_pp0_iter5_reg <= add_ln14_reg_305_pp0_iter4_reg;
                add_ln14_reg_305_pp0_iter6_reg <= add_ln14_reg_305_pp0_iter5_reg;
                add_ln14_reg_305_pp0_iter7_reg <= add_ln14_reg_305_pp0_iter6_reg;
                add_ln14_reg_305_pp0_iter8_reg <= add_ln14_reg_305_pp0_iter7_reg;
                add_reg_352 <= grp_fu_173_p2;
                data0_addr_read_reg_322 <= data0_RDATA;
                data1_addr_read_reg_327 <= data1_RDATA;
                first_iter_0_reg_160_pp0_iter10_reg <= first_iter_0_reg_160_pp0_iter9_reg;
                first_iter_0_reg_160_pp0_iter11_reg <= first_iter_0_reg_160_pp0_iter10_reg;
                first_iter_0_reg_160_pp0_iter12_reg <= first_iter_0_reg_160_pp0_iter11_reg;
                first_iter_0_reg_160_pp0_iter2_reg <= first_iter_0_reg_160_pp0_iter1_reg;
                first_iter_0_reg_160_pp0_iter3_reg <= first_iter_0_reg_160_pp0_iter2_reg;
                first_iter_0_reg_160_pp0_iter4_reg <= first_iter_0_reg_160_pp0_iter3_reg;
                first_iter_0_reg_160_pp0_iter5_reg <= first_iter_0_reg_160_pp0_iter4_reg;
                first_iter_0_reg_160_pp0_iter6_reg <= first_iter_0_reg_160_pp0_iter5_reg;
                first_iter_0_reg_160_pp0_iter7_reg <= first_iter_0_reg_160_pp0_iter6_reg;
                first_iter_0_reg_160_pp0_iter8_reg <= first_iter_0_reg_160_pp0_iter7_reg;
                first_iter_0_reg_160_pp0_iter9_reg <= first_iter_0_reg_160_pp0_iter8_reg;
                icmp_ln14_1_reg_332 <= icmp_ln14_1_fu_242_p2;
                icmp_ln14_1_reg_332_pp0_iter10_reg <= icmp_ln14_1_reg_332;
                icmp_ln14_1_reg_332_pp0_iter11_reg <= icmp_ln14_1_reg_332_pp0_iter10_reg;
                icmp_ln14_1_reg_332_pp0_iter12_reg <= icmp_ln14_1_reg_332_pp0_iter11_reg;
                icmp_ln14_1_reg_332_pp0_iter13_reg <= icmp_ln14_1_reg_332_pp0_iter12_reg;
                icmp_ln14_1_reg_332_pp0_iter14_reg <= icmp_ln14_1_reg_332_pp0_iter13_reg;
                icmp_ln14_1_reg_332_pp0_iter15_reg <= icmp_ln14_1_reg_332_pp0_iter14_reg;
                icmp_ln14_1_reg_332_pp0_iter16_reg <= icmp_ln14_1_reg_332_pp0_iter15_reg;
                icmp_ln14_1_reg_332_pp0_iter17_reg <= icmp_ln14_1_reg_332_pp0_iter16_reg;
                icmp_ln14_1_reg_332_pp0_iter18_reg <= icmp_ln14_1_reg_332_pp0_iter17_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (b_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (b_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (b_0_vld_reg = ap_const_logic_0)))) then
                b_0_data_reg <= b;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (c_0_ack_out = ap_const_logic_1) and (ap_const_logic_1 = ap_const_logic_1) and (c_0_vld_reg = ap_const_logic_1)) or (not(((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) and (ap_const_logic_1 = ap_const_logic_1) and (c_0_vld_reg = ap_const_logic_0)))) then
                c_0_data_reg <= c;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter19, icmp_ln14_fu_185_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter18)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln14_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) and not(((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln14_fu_185_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0)) or ((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;

    a_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            a_0_ack_out <= ap_const_logic_1;
        else 
            a_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;

    add_ln14_fu_191_p2 <= std_logic_vector(unsigned(i_fu_98) + unsigned(ap_const_lv11_1));
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state23 <= ap_CS_fsm(3);

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter19, icmp_ln14_1_reg_332_pp0_iter18_reg, data0_RVALID, data1_RVALID, data2_BVALID)
    begin
                ap_block_pp0_stage0_01001 <= (((data2_BVALID = ap_const_logic_0) and (icmp_ln14_1_reg_332_pp0_iter18_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0))));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter19, icmp_ln14_1_reg_332_pp0_iter18_reg, data0_RVALID, data1_RVALID, ap_block_state4_io, data2_WREADY, data2_BVALID, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_11001 <= (((data2_BVALID = ap_const_logic_0) and (icmp_ln14_1_reg_332_pp0_iter18_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)) or ((data2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter19, icmp_ln14_1_reg_332_pp0_iter18_reg, data0_RVALID, data1_RVALID, ap_block_state4_io, data2_WREADY, data2_BVALID, ap_block_state16_io)
    begin
                ap_block_pp0_stage0_subdone <= (((data2_BVALID = ap_const_logic_0) and (icmp_ln14_1_reg_332_pp0_iter18_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1)) or ((data2_WREADY = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state16_io)) or ((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0))) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state4_io)));
    end process;

        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state12_pp0_stage0_iter9_assign_proc : process(data0_RVALID, data1_RVALID)
    begin
                ap_block_state12_pp0_stage0_iter9 <= ((data1_RVALID = ap_const_logic_0) or (data0_RVALID = ap_const_logic_0));
    end process;

        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state16_io_assign_proc : process(first_iter_0_reg_160_pp0_iter12_reg, data2_AWREADY)
    begin
                ap_block_state16_io <= ((data2_AWREADY = ap_const_logic_0) and (first_iter_0_reg_160_pp0_iter12_reg = ap_const_lv1_1));
    end process;

        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state22_pp0_stage0_iter19_assign_proc : process(icmp_ln14_1_reg_332_pp0_iter18_reg, data2_BVALID)
    begin
                ap_block_state22_pp0_stage0_iter19 <= ((data2_BVALID = ap_const_logic_0) and (icmp_ln14_1_reg_332_pp0_iter18_reg = ap_const_lv1_1));
    end process;

        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state4_io_assign_proc : process(first_iter_0_reg_160, data0_ARREADY, data1_ARREADY)
    begin
                ap_block_state4_io <= (((data1_ARREADY = ap_const_logic_0) and (first_iter_0_reg_160 = ap_const_lv1_1)) or ((data0_ARREADY = ap_const_logic_0) and (first_iter_0_reg_160 = ap_const_lv1_1)));
    end process;

        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(icmp_ln14_fu_185_p2)
    begin
        if ((icmp_ln14_fu_185_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state23)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;


    b_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            b_0_ack_out <= ap_const_logic_1;
        else 
            b_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    c_0_ack_out_assign_proc : process(ap_CS_fsm_state2, ap_CS_fsm_state23)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            c_0_ack_out <= ap_const_logic_1;
        else 
            c_0_ack_out <= ap_const_logic_0;
        end if; 
    end process;


    data0_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_160, ap_block_pp0_stage0_11001)
    begin
        if (((first_iter_0_reg_160 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data0_ARVALID <= ap_const_logic_1;
        else 
            data0_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data0_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data0_RREADY <= ap_const_logic_1;
        else 
            data0_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data0_blk_n_AR_assign_proc : process(m_axi_data0_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, first_iter_0_reg_160)
    begin
        if (((first_iter_0_reg_160 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data0_blk_n_AR <= m_axi_data0_ARREADY;
        else 
            data0_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data0_blk_n_R_assign_proc : process(m_axi_data0_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data0_blk_n_R <= m_axi_data0_RVALID;
        else 
            data0_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data1_ARVALID_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, first_iter_0_reg_160, ap_block_pp0_stage0_11001)
    begin
        if (((first_iter_0_reg_160 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data1_ARVALID <= ap_const_logic_1;
        else 
            data1_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    data1_RREADY_assign_proc : process(ap_enable_reg_pp0_iter9, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data1_RREADY <= ap_const_logic_1;
        else 
            data1_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    data1_blk_n_AR_assign_proc : process(m_axi_data1_ARREADY, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0, first_iter_0_reg_160)
    begin
        if (((first_iter_0_reg_160 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            data1_blk_n_AR <= m_axi_data1_ARREADY;
        else 
            data1_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    data1_blk_n_R_assign_proc : process(m_axi_data1_RVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter9)
    begin
        if (((ap_enable_reg_pp0_iter9 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data1_blk_n_R <= m_axi_data1_RVALID;
        else 
            data1_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    data2_AWVALID_assign_proc : process(ap_enable_reg_pp0_iter13, first_iter_0_reg_160_pp0_iter12_reg, ap_block_pp0_stage0_11001)
    begin
        if (((first_iter_0_reg_160_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data2_AWVALID <= ap_const_logic_1;
        else 
            data2_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_BREADY_assign_proc : process(ap_enable_reg_pp0_iter19, icmp_ln14_1_reg_332_pp0_iter18_reg, ap_block_pp0_stage0_11001)
    begin
        if (((icmp_ln14_1_reg_332_pp0_iter18_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data2_BREADY <= ap_const_logic_1;
        else 
            data2_BREADY <= ap_const_logic_0;
        end if; 
    end process;

    data2_WDATA <= add_reg_352;

    data2_WVALID_assign_proc : process(ap_enable_reg_pp0_iter14, ap_block_pp0_stage0_11001)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            data2_WVALID <= ap_const_logic_1;
        else 
            data2_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    data2_blk_n_AW_assign_proc : process(m_axi_data2_AWREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter13, first_iter_0_reg_160_pp0_iter12_reg)
    begin
        if (((first_iter_0_reg_160_pp0_iter12_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter13 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data2_blk_n_AW <= m_axi_data2_AWREADY;
        else 
            data2_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    data2_blk_n_B_assign_proc : process(m_axi_data2_BVALID, ap_block_pp0_stage0, ap_enable_reg_pp0_iter19, icmp_ln14_1_reg_332_pp0_iter18_reg)
    begin
        if (((icmp_ln14_1_reg_332_pp0_iter18_reg = ap_const_lv1_1) and (ap_enable_reg_pp0_iter19 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data2_blk_n_B <= m_axi_data2_BVALID;
        else 
            data2_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    data2_blk_n_W_assign_proc : process(m_axi_data2_WREADY, ap_block_pp0_stage0, ap_enable_reg_pp0_iter14)
    begin
        if (((ap_enable_reg_pp0_iter14 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            data2_blk_n_W <= m_axi_data2_WREADY;
        else 
            data2_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_173_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_173_ce <= ap_const_logic_1;
        else 
            grp_fu_173_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_173_p0 <= data0_addr_read_reg_322;
    grp_fu_173_p1 <= data1_addr_read_reg_327;
    icmp_ln14_1_fu_242_p2 <= "1" when (add_ln14_reg_305_pp0_iter8_reg = ap_const_lv11_400) else "0";
    icmp_ln14_fu_185_p2 <= "1" when (i_fu_98 = ap_const_lv11_400) else "0";
        sext_ln14_1_fu_231_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln14_1_fu_222_p4),64));

        sext_ln14_2_fu_264_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln14_2_fu_255_p4),64));

        sext_ln14_fu_211_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_202_p4),64));

    trunc_ln14_1_fu_222_p4 <= b_read_reg_291(63 downto 2);
    trunc_ln14_2_fu_255_p4 <= c_read_reg_286(63 downto 2);
    trunc_ln_fu_202_p4 <= a_read_reg_296(63 downto 2);
end behav;
