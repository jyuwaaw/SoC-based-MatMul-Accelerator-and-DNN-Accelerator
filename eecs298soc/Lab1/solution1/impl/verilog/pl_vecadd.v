// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="pl_vecadd_pl_vecadd,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=1045,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=3684,HLS_SYN_LUT=3004,HLS_VERSION=2023_1}" *)

module pl_vecadd (
        ap_clk,
        ap_rst_n,
        m_axi_data0_AWVALID,
        m_axi_data0_AWREADY,
        m_axi_data0_AWADDR,
        m_axi_data0_AWID,
        m_axi_data0_AWLEN,
        m_axi_data0_AWSIZE,
        m_axi_data0_AWBURST,
        m_axi_data0_AWLOCK,
        m_axi_data0_AWCACHE,
        m_axi_data0_AWPROT,
        m_axi_data0_AWQOS,
        m_axi_data0_AWREGION,
        m_axi_data0_AWUSER,
        m_axi_data0_WVALID,
        m_axi_data0_WREADY,
        m_axi_data0_WDATA,
        m_axi_data0_WSTRB,
        m_axi_data0_WLAST,
        m_axi_data0_WID,
        m_axi_data0_WUSER,
        m_axi_data0_ARVALID,
        m_axi_data0_ARREADY,
        m_axi_data0_ARADDR,
        m_axi_data0_ARID,
        m_axi_data0_ARLEN,
        m_axi_data0_ARSIZE,
        m_axi_data0_ARBURST,
        m_axi_data0_ARLOCK,
        m_axi_data0_ARCACHE,
        m_axi_data0_ARPROT,
        m_axi_data0_ARQOS,
        m_axi_data0_ARREGION,
        m_axi_data0_ARUSER,
        m_axi_data0_RVALID,
        m_axi_data0_RREADY,
        m_axi_data0_RDATA,
        m_axi_data0_RLAST,
        m_axi_data0_RID,
        m_axi_data0_RUSER,
        m_axi_data0_RRESP,
        m_axi_data0_BVALID,
        m_axi_data0_BREADY,
        m_axi_data0_BRESP,
        m_axi_data0_BID,
        m_axi_data0_BUSER,
        m_axi_data1_AWVALID,
        m_axi_data1_AWREADY,
        m_axi_data1_AWADDR,
        m_axi_data1_AWID,
        m_axi_data1_AWLEN,
        m_axi_data1_AWSIZE,
        m_axi_data1_AWBURST,
        m_axi_data1_AWLOCK,
        m_axi_data1_AWCACHE,
        m_axi_data1_AWPROT,
        m_axi_data1_AWQOS,
        m_axi_data1_AWREGION,
        m_axi_data1_AWUSER,
        m_axi_data1_WVALID,
        m_axi_data1_WREADY,
        m_axi_data1_WDATA,
        m_axi_data1_WSTRB,
        m_axi_data1_WLAST,
        m_axi_data1_WID,
        m_axi_data1_WUSER,
        m_axi_data1_ARVALID,
        m_axi_data1_ARREADY,
        m_axi_data1_ARADDR,
        m_axi_data1_ARID,
        m_axi_data1_ARLEN,
        m_axi_data1_ARSIZE,
        m_axi_data1_ARBURST,
        m_axi_data1_ARLOCK,
        m_axi_data1_ARCACHE,
        m_axi_data1_ARPROT,
        m_axi_data1_ARQOS,
        m_axi_data1_ARREGION,
        m_axi_data1_ARUSER,
        m_axi_data1_RVALID,
        m_axi_data1_RREADY,
        m_axi_data1_RDATA,
        m_axi_data1_RLAST,
        m_axi_data1_RID,
        m_axi_data1_RUSER,
        m_axi_data1_RRESP,
        m_axi_data1_BVALID,
        m_axi_data1_BREADY,
        m_axi_data1_BRESP,
        m_axi_data1_BID,
        m_axi_data1_BUSER,
        m_axi_data2_AWVALID,
        m_axi_data2_AWREADY,
        m_axi_data2_AWADDR,
        m_axi_data2_AWID,
        m_axi_data2_AWLEN,
        m_axi_data2_AWSIZE,
        m_axi_data2_AWBURST,
        m_axi_data2_AWLOCK,
        m_axi_data2_AWCACHE,
        m_axi_data2_AWPROT,
        m_axi_data2_AWQOS,
        m_axi_data2_AWREGION,
        m_axi_data2_AWUSER,
        m_axi_data2_WVALID,
        m_axi_data2_WREADY,
        m_axi_data2_WDATA,
        m_axi_data2_WSTRB,
        m_axi_data2_WLAST,
        m_axi_data2_WID,
        m_axi_data2_WUSER,
        m_axi_data2_ARVALID,
        m_axi_data2_ARREADY,
        m_axi_data2_ARADDR,
        m_axi_data2_ARID,
        m_axi_data2_ARLEN,
        m_axi_data2_ARSIZE,
        m_axi_data2_ARBURST,
        m_axi_data2_ARLOCK,
        m_axi_data2_ARCACHE,
        m_axi_data2_ARPROT,
        m_axi_data2_ARQOS,
        m_axi_data2_ARREGION,
        m_axi_data2_ARUSER,
        m_axi_data2_RVALID,
        m_axi_data2_RREADY,
        m_axi_data2_RDATA,
        m_axi_data2_RLAST,
        m_axi_data2_RID,
        m_axi_data2_RUSER,
        m_axi_data2_RRESP,
        m_axi_data2_BVALID,
        m_axi_data2_BREADY,
        m_axi_data2_BRESP,
        m_axi_data2_BID,
        m_axi_data2_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state23 = 4'd8;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA0_ID_WIDTH = 1;
parameter    C_M_AXI_DATA0_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA0_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA0_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA0_USER_VALUE = 0;
parameter    C_M_AXI_DATA0_PROT_VALUE = 0;
parameter    C_M_AXI_DATA0_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA1_ID_WIDTH = 1;
parameter    C_M_AXI_DATA1_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA1_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA1_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA1_USER_VALUE = 0;
parameter    C_M_AXI_DATA1_PROT_VALUE = 0;
parameter    C_M_AXI_DATA1_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA2_ID_WIDTH = 1;
parameter    C_M_AXI_DATA2_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATA2_DATA_WIDTH = 32;
parameter    C_M_AXI_DATA2_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA2_USER_VALUE = 0;
parameter    C_M_AXI_DATA2_PROT_VALUE = 0;
parameter    C_M_AXI_DATA2_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA0_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA1_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATA2_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_data0_AWVALID;
input   m_axi_data0_AWREADY;
output  [C_M_AXI_DATA0_ADDR_WIDTH - 1:0] m_axi_data0_AWADDR;
output  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_AWID;
output  [7:0] m_axi_data0_AWLEN;
output  [2:0] m_axi_data0_AWSIZE;
output  [1:0] m_axi_data0_AWBURST;
output  [1:0] m_axi_data0_AWLOCK;
output  [3:0] m_axi_data0_AWCACHE;
output  [2:0] m_axi_data0_AWPROT;
output  [3:0] m_axi_data0_AWQOS;
output  [3:0] m_axi_data0_AWREGION;
output  [C_M_AXI_DATA0_AWUSER_WIDTH - 1:0] m_axi_data0_AWUSER;
output   m_axi_data0_WVALID;
input   m_axi_data0_WREADY;
output  [C_M_AXI_DATA0_DATA_WIDTH - 1:0] m_axi_data0_WDATA;
output  [C_M_AXI_DATA0_WSTRB_WIDTH - 1:0] m_axi_data0_WSTRB;
output   m_axi_data0_WLAST;
output  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_WID;
output  [C_M_AXI_DATA0_WUSER_WIDTH - 1:0] m_axi_data0_WUSER;
output   m_axi_data0_ARVALID;
input   m_axi_data0_ARREADY;
output  [C_M_AXI_DATA0_ADDR_WIDTH - 1:0] m_axi_data0_ARADDR;
output  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_ARID;
output  [7:0] m_axi_data0_ARLEN;
output  [2:0] m_axi_data0_ARSIZE;
output  [1:0] m_axi_data0_ARBURST;
output  [1:0] m_axi_data0_ARLOCK;
output  [3:0] m_axi_data0_ARCACHE;
output  [2:0] m_axi_data0_ARPROT;
output  [3:0] m_axi_data0_ARQOS;
output  [3:0] m_axi_data0_ARREGION;
output  [C_M_AXI_DATA0_ARUSER_WIDTH - 1:0] m_axi_data0_ARUSER;
input   m_axi_data0_RVALID;
output   m_axi_data0_RREADY;
input  [C_M_AXI_DATA0_DATA_WIDTH - 1:0] m_axi_data0_RDATA;
input   m_axi_data0_RLAST;
input  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_RID;
input  [C_M_AXI_DATA0_RUSER_WIDTH - 1:0] m_axi_data0_RUSER;
input  [1:0] m_axi_data0_RRESP;
input   m_axi_data0_BVALID;
output   m_axi_data0_BREADY;
input  [1:0] m_axi_data0_BRESP;
input  [C_M_AXI_DATA0_ID_WIDTH - 1:0] m_axi_data0_BID;
input  [C_M_AXI_DATA0_BUSER_WIDTH - 1:0] m_axi_data0_BUSER;
output   m_axi_data1_AWVALID;
input   m_axi_data1_AWREADY;
output  [C_M_AXI_DATA1_ADDR_WIDTH - 1:0] m_axi_data1_AWADDR;
output  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_AWID;
output  [7:0] m_axi_data1_AWLEN;
output  [2:0] m_axi_data1_AWSIZE;
output  [1:0] m_axi_data1_AWBURST;
output  [1:0] m_axi_data1_AWLOCK;
output  [3:0] m_axi_data1_AWCACHE;
output  [2:0] m_axi_data1_AWPROT;
output  [3:0] m_axi_data1_AWQOS;
output  [3:0] m_axi_data1_AWREGION;
output  [C_M_AXI_DATA1_AWUSER_WIDTH - 1:0] m_axi_data1_AWUSER;
output   m_axi_data1_WVALID;
input   m_axi_data1_WREADY;
output  [C_M_AXI_DATA1_DATA_WIDTH - 1:0] m_axi_data1_WDATA;
output  [C_M_AXI_DATA1_WSTRB_WIDTH - 1:0] m_axi_data1_WSTRB;
output   m_axi_data1_WLAST;
output  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_WID;
output  [C_M_AXI_DATA1_WUSER_WIDTH - 1:0] m_axi_data1_WUSER;
output   m_axi_data1_ARVALID;
input   m_axi_data1_ARREADY;
output  [C_M_AXI_DATA1_ADDR_WIDTH - 1:0] m_axi_data1_ARADDR;
output  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_ARID;
output  [7:0] m_axi_data1_ARLEN;
output  [2:0] m_axi_data1_ARSIZE;
output  [1:0] m_axi_data1_ARBURST;
output  [1:0] m_axi_data1_ARLOCK;
output  [3:0] m_axi_data1_ARCACHE;
output  [2:0] m_axi_data1_ARPROT;
output  [3:0] m_axi_data1_ARQOS;
output  [3:0] m_axi_data1_ARREGION;
output  [C_M_AXI_DATA1_ARUSER_WIDTH - 1:0] m_axi_data1_ARUSER;
input   m_axi_data1_RVALID;
output   m_axi_data1_RREADY;
input  [C_M_AXI_DATA1_DATA_WIDTH - 1:0] m_axi_data1_RDATA;
input   m_axi_data1_RLAST;
input  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_RID;
input  [C_M_AXI_DATA1_RUSER_WIDTH - 1:0] m_axi_data1_RUSER;
input  [1:0] m_axi_data1_RRESP;
input   m_axi_data1_BVALID;
output   m_axi_data1_BREADY;
input  [1:0] m_axi_data1_BRESP;
input  [C_M_AXI_DATA1_ID_WIDTH - 1:0] m_axi_data1_BID;
input  [C_M_AXI_DATA1_BUSER_WIDTH - 1:0] m_axi_data1_BUSER;
output   m_axi_data2_AWVALID;
input   m_axi_data2_AWREADY;
output  [C_M_AXI_DATA2_ADDR_WIDTH - 1:0] m_axi_data2_AWADDR;
output  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_AWID;
output  [7:0] m_axi_data2_AWLEN;
output  [2:0] m_axi_data2_AWSIZE;
output  [1:0] m_axi_data2_AWBURST;
output  [1:0] m_axi_data2_AWLOCK;
output  [3:0] m_axi_data2_AWCACHE;
output  [2:0] m_axi_data2_AWPROT;
output  [3:0] m_axi_data2_AWQOS;
output  [3:0] m_axi_data2_AWREGION;
output  [C_M_AXI_DATA2_AWUSER_WIDTH - 1:0] m_axi_data2_AWUSER;
output   m_axi_data2_WVALID;
input   m_axi_data2_WREADY;
output  [C_M_AXI_DATA2_DATA_WIDTH - 1:0] m_axi_data2_WDATA;
output  [C_M_AXI_DATA2_WSTRB_WIDTH - 1:0] m_axi_data2_WSTRB;
output   m_axi_data2_WLAST;
output  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_WID;
output  [C_M_AXI_DATA2_WUSER_WIDTH - 1:0] m_axi_data2_WUSER;
output   m_axi_data2_ARVALID;
input   m_axi_data2_ARREADY;
output  [C_M_AXI_DATA2_ADDR_WIDTH - 1:0] m_axi_data2_ARADDR;
output  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_ARID;
output  [7:0] m_axi_data2_ARLEN;
output  [2:0] m_axi_data2_ARSIZE;
output  [1:0] m_axi_data2_ARBURST;
output  [1:0] m_axi_data2_ARLOCK;
output  [3:0] m_axi_data2_ARCACHE;
output  [2:0] m_axi_data2_ARPROT;
output  [3:0] m_axi_data2_ARQOS;
output  [3:0] m_axi_data2_ARREGION;
output  [C_M_AXI_DATA2_ARUSER_WIDTH - 1:0] m_axi_data2_ARUSER;
input   m_axi_data2_RVALID;
output   m_axi_data2_RREADY;
input  [C_M_AXI_DATA2_DATA_WIDTH - 1:0] m_axi_data2_RDATA;
input   m_axi_data2_RLAST;
input  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_RID;
input  [C_M_AXI_DATA2_RUSER_WIDTH - 1:0] m_axi_data2_RUSER;
input  [1:0] m_axi_data2_RRESP;
input   m_axi_data2_BVALID;
output   m_axi_data2_BREADY;
input  [1:0] m_axi_data2_BRESP;
input  [C_M_AXI_DATA2_ID_WIDTH - 1:0] m_axi_data2_BID;
input  [C_M_AXI_DATA2_BUSER_WIDTH - 1:0] m_axi_data2_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] a;
reg   [63:0] a_0_data_reg;
reg    a_0_vld_reg;
reg    a_0_ack_out;
wire   [63:0] b;
reg   [63:0] b_0_data_reg;
reg    b_0_vld_reg;
reg    b_0_ack_out;
wire   [63:0] c;
reg   [63:0] c_0_data_reg;
reg    c_0_vld_reg;
reg    c_0_ack_out;
reg    data0_blk_n_AR;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
reg   [0:0] first_iter_0_reg_160;
reg    data0_blk_n_R;
reg    ap_enable_reg_pp0_iter9;
reg    data1_blk_n_AR;
reg    data1_blk_n_R;
reg    data2_blk_n_AW;
reg    ap_enable_reg_pp0_iter13;
reg   [0:0] first_iter_0_reg_160_pp0_iter12_reg;
reg    data2_blk_n_W;
reg    ap_enable_reg_pp0_iter14;
reg    data2_blk_n_B;
reg    ap_enable_reg_pp0_iter19;
reg   [0:0] icmp_ln14_1_reg_332;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter18_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter1_reg;
wire    ap_block_state3_pp0_stage0_iter0;
wire    data0_AWREADY;
wire    data0_WREADY;
reg    data0_ARVALID;
wire    data0_ARREADY;
wire    data0_RVALID;
reg    data0_RREADY;
wire   [31:0] data0_RDATA;
wire   [8:0] data0_RFIFONUM;
wire    data0_BVALID;
wire    data1_AWREADY;
wire    data1_WREADY;
reg    data1_ARVALID;
wire    data1_ARREADY;
wire    data1_RVALID;
reg    data1_RREADY;
wire   [31:0] data1_RDATA;
wire   [8:0] data1_RFIFONUM;
wire    data1_BVALID;
wire    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
wire    ap_block_state6_pp0_stage0_iter3;
wire    ap_block_state7_pp0_stage0_iter4;
wire    ap_block_state8_pp0_stage0_iter5;
wire    ap_block_state9_pp0_stage0_iter6;
wire    ap_block_state10_pp0_stage0_iter7;
wire    ap_block_state11_pp0_stage0_iter8;
reg    ap_block_state12_pp0_stage0_iter9;
wire    ap_block_state13_pp0_stage0_iter10;
wire    ap_block_state14_pp0_stage0_iter11;
wire    ap_block_state15_pp0_stage0_iter12;
reg    data2_AWVALID;
wire    data2_AWREADY;
reg    data2_WVALID;
wire    data2_WREADY;
wire   [31:0] data2_WDATA;
wire    data2_ARREADY;
wire    data2_RVALID;
wire   [31:0] data2_RDATA;
wire   [8:0] data2_RFIFONUM;
wire    data2_BVALID;
reg    data2_BREADY;
wire    ap_block_state16_pp0_stage0_iter13;
reg    ap_block_state16_io;
wire    ap_block_state17_pp0_stage0_iter14;
wire    ap_block_state18_pp0_stage0_iter15;
wire    ap_block_state19_pp0_stage0_iter16;
wire    ap_block_state20_pp0_stage0_iter17;
wire    ap_block_state21_pp0_stage0_iter18;
reg    ap_block_state22_pp0_stage0_iter19;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] first_iter_0_reg_160_pp0_iter2_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter3_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter4_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter5_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter6_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter7_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter8_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter9_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter10_reg;
reg   [0:0] first_iter_0_reg_160_pp0_iter11_reg;
reg   [63:0] c_read_reg_286;
wire    ap_CS_fsm_state2;
reg   [63:0] b_read_reg_291;
reg   [63:0] a_read_reg_296;
wire   [0:0] icmp_ln14_fu_185_p2;
reg   [0:0] icmp_ln14_reg_301;
wire   [10:0] add_ln14_fu_191_p2;
reg   [10:0] add_ln14_reg_305;
reg   [10:0] add_ln14_reg_305_pp0_iter1_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter2_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter3_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter4_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter5_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter6_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter7_reg;
reg   [10:0] add_ln14_reg_305_pp0_iter8_reg;
reg   [31:0] data0_addr_read_reg_322;
reg   [31:0] data1_addr_read_reg_327;
wire   [0:0] icmp_ln14_1_fu_242_p2;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter10_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter11_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter12_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter13_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter14_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter15_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter16_reg;
reg   [0:0] icmp_ln14_1_reg_332_pp0_iter17_reg;
wire   [31:0] grp_fu_173_p2;
reg   [31:0] add_reg_352;
reg    ap_enable_reg_pp0_iter0;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state3;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter10;
reg    ap_enable_reg_pp0_iter11;
reg    ap_enable_reg_pp0_iter12;
reg    ap_enable_reg_pp0_iter15;
reg    ap_enable_reg_pp0_iter16;
reg    ap_enable_reg_pp0_iter17;
reg    ap_enable_reg_pp0_iter18;
wire   [63:0] sext_ln14_fu_211_p1;
wire   [63:0] sext_ln14_1_fu_231_p1;
wire   [63:0] sext_ln14_2_fu_264_p1;
reg    ap_block_pp0_stage0_01001;
reg   [10:0] i_fu_98;
wire   [31:0] grp_fu_173_p0;
wire   [31:0] grp_fu_173_p1;
wire   [61:0] trunc_ln_fu_202_p4;
wire   [61:0] trunc_ln14_1_fu_222_p4;
wire   [61:0] trunc_ln14_2_fu_255_p4;
reg    grp_fu_173_ce;
wire    ap_CS_fsm_state23;
reg   [3:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state2_blk;
wire    ap_ST_fsm_state23_blk;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 4'd1;
#0 a_0_data_reg = 64'd0;
#0 a_0_vld_reg = 1'b0;
#0 b_0_data_reg = 64'd0;
#0 b_0_vld_reg = 1'b0;
#0 c_0_data_reg = 64'd0;
#0 c_0_vld_reg = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
#0 ap_enable_reg_pp0_iter13 = 1'b0;
#0 ap_enable_reg_pp0_iter14 = 1'b0;
#0 ap_enable_reg_pp0_iter19 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter10 = 1'b0;
#0 ap_enable_reg_pp0_iter11 = 1'b0;
#0 ap_enable_reg_pp0_iter12 = 1'b0;
#0 ap_enable_reg_pp0_iter15 = 1'b0;
#0 ap_enable_reg_pp0_iter16 = 1'b0;
#0 ap_enable_reg_pp0_iter17 = 1'b0;
#0 ap_enable_reg_pp0_iter18 = 1'b0;
end

pl_vecadd_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .a(a),
    .b(b),
    .c(c),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

pl_vecadd_data0_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA0_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA0_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA0_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA0_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA0_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA0_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA0_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA0_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA0_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA0_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA0_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
data0_m_axi_U(
    .AWVALID(m_axi_data0_AWVALID),
    .AWREADY(m_axi_data0_AWREADY),
    .AWADDR(m_axi_data0_AWADDR),
    .AWID(m_axi_data0_AWID),
    .AWLEN(m_axi_data0_AWLEN),
    .AWSIZE(m_axi_data0_AWSIZE),
    .AWBURST(m_axi_data0_AWBURST),
    .AWLOCK(m_axi_data0_AWLOCK),
    .AWCACHE(m_axi_data0_AWCACHE),
    .AWPROT(m_axi_data0_AWPROT),
    .AWQOS(m_axi_data0_AWQOS),
    .AWREGION(m_axi_data0_AWREGION),
    .AWUSER(m_axi_data0_AWUSER),
    .WVALID(m_axi_data0_WVALID),
    .WREADY(m_axi_data0_WREADY),
    .WDATA(m_axi_data0_WDATA),
    .WSTRB(m_axi_data0_WSTRB),
    .WLAST(m_axi_data0_WLAST),
    .WID(m_axi_data0_WID),
    .WUSER(m_axi_data0_WUSER),
    .ARVALID(m_axi_data0_ARVALID),
    .ARREADY(m_axi_data0_ARREADY),
    .ARADDR(m_axi_data0_ARADDR),
    .ARID(m_axi_data0_ARID),
    .ARLEN(m_axi_data0_ARLEN),
    .ARSIZE(m_axi_data0_ARSIZE),
    .ARBURST(m_axi_data0_ARBURST),
    .ARLOCK(m_axi_data0_ARLOCK),
    .ARCACHE(m_axi_data0_ARCACHE),
    .ARPROT(m_axi_data0_ARPROT),
    .ARQOS(m_axi_data0_ARQOS),
    .ARREGION(m_axi_data0_ARREGION),
    .ARUSER(m_axi_data0_ARUSER),
    .RVALID(m_axi_data0_RVALID),
    .RREADY(m_axi_data0_RREADY),
    .RDATA(m_axi_data0_RDATA),
    .RLAST(m_axi_data0_RLAST),
    .RID(m_axi_data0_RID),
    .RUSER(m_axi_data0_RUSER),
    .RRESP(m_axi_data0_RRESP),
    .BVALID(m_axi_data0_BVALID),
    .BREADY(m_axi_data0_BREADY),
    .BRESP(m_axi_data0_BRESP),
    .BID(m_axi_data0_BID),
    .BUSER(m_axi_data0_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data0_ARVALID),
    .I_ARREADY(data0_ARREADY),
    .I_ARADDR(sext_ln14_fu_211_p1),
    .I_ARLEN(32'd1024),
    .I_RVALID(data0_RVALID),
    .I_RREADY(data0_RREADY),
    .I_RDATA(data0_RDATA),
    .I_RFIFONUM(data0_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(data0_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(data0_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(data0_BVALID),
    .I_BREADY(1'b0)
);

pl_vecadd_data1_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA1_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA1_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA1_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA1_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA1_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA1_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA1_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA1_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA1_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA1_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA1_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
data1_m_axi_U(
    .AWVALID(m_axi_data1_AWVALID),
    .AWREADY(m_axi_data1_AWREADY),
    .AWADDR(m_axi_data1_AWADDR),
    .AWID(m_axi_data1_AWID),
    .AWLEN(m_axi_data1_AWLEN),
    .AWSIZE(m_axi_data1_AWSIZE),
    .AWBURST(m_axi_data1_AWBURST),
    .AWLOCK(m_axi_data1_AWLOCK),
    .AWCACHE(m_axi_data1_AWCACHE),
    .AWPROT(m_axi_data1_AWPROT),
    .AWQOS(m_axi_data1_AWQOS),
    .AWREGION(m_axi_data1_AWREGION),
    .AWUSER(m_axi_data1_AWUSER),
    .WVALID(m_axi_data1_WVALID),
    .WREADY(m_axi_data1_WREADY),
    .WDATA(m_axi_data1_WDATA),
    .WSTRB(m_axi_data1_WSTRB),
    .WLAST(m_axi_data1_WLAST),
    .WID(m_axi_data1_WID),
    .WUSER(m_axi_data1_WUSER),
    .ARVALID(m_axi_data1_ARVALID),
    .ARREADY(m_axi_data1_ARREADY),
    .ARADDR(m_axi_data1_ARADDR),
    .ARID(m_axi_data1_ARID),
    .ARLEN(m_axi_data1_ARLEN),
    .ARSIZE(m_axi_data1_ARSIZE),
    .ARBURST(m_axi_data1_ARBURST),
    .ARLOCK(m_axi_data1_ARLOCK),
    .ARCACHE(m_axi_data1_ARCACHE),
    .ARPROT(m_axi_data1_ARPROT),
    .ARQOS(m_axi_data1_ARQOS),
    .ARREGION(m_axi_data1_ARREGION),
    .ARUSER(m_axi_data1_ARUSER),
    .RVALID(m_axi_data1_RVALID),
    .RREADY(m_axi_data1_RREADY),
    .RDATA(m_axi_data1_RDATA),
    .RLAST(m_axi_data1_RLAST),
    .RID(m_axi_data1_RID),
    .RUSER(m_axi_data1_RUSER),
    .RRESP(m_axi_data1_RRESP),
    .BVALID(m_axi_data1_BVALID),
    .BREADY(m_axi_data1_BREADY),
    .BRESP(m_axi_data1_BRESP),
    .BID(m_axi_data1_BID),
    .BUSER(m_axi_data1_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(data1_ARVALID),
    .I_ARREADY(data1_ARREADY),
    .I_ARADDR(sext_ln14_1_fu_231_p1),
    .I_ARLEN(32'd1024),
    .I_RVALID(data1_RVALID),
    .I_RREADY(data1_RREADY),
    .I_RDATA(data1_RDATA),
    .I_RFIFONUM(data1_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(data1_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(data1_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(data1_BVALID),
    .I_BREADY(1'b0)
);

pl_vecadd_data2_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATA2_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATA2_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATA2_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATA2_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATA2_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATA2_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATA2_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATA2_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATA2_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATA2_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATA2_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
data2_m_axi_U(
    .AWVALID(m_axi_data2_AWVALID),
    .AWREADY(m_axi_data2_AWREADY),
    .AWADDR(m_axi_data2_AWADDR),
    .AWID(m_axi_data2_AWID),
    .AWLEN(m_axi_data2_AWLEN),
    .AWSIZE(m_axi_data2_AWSIZE),
    .AWBURST(m_axi_data2_AWBURST),
    .AWLOCK(m_axi_data2_AWLOCK),
    .AWCACHE(m_axi_data2_AWCACHE),
    .AWPROT(m_axi_data2_AWPROT),
    .AWQOS(m_axi_data2_AWQOS),
    .AWREGION(m_axi_data2_AWREGION),
    .AWUSER(m_axi_data2_AWUSER),
    .WVALID(m_axi_data2_WVALID),
    .WREADY(m_axi_data2_WREADY),
    .WDATA(m_axi_data2_WDATA),
    .WSTRB(m_axi_data2_WSTRB),
    .WLAST(m_axi_data2_WLAST),
    .WID(m_axi_data2_WID),
    .WUSER(m_axi_data2_WUSER),
    .ARVALID(m_axi_data2_ARVALID),
    .ARREADY(m_axi_data2_ARREADY),
    .ARADDR(m_axi_data2_ARADDR),
    .ARID(m_axi_data2_ARID),
    .ARLEN(m_axi_data2_ARLEN),
    .ARSIZE(m_axi_data2_ARSIZE),
    .ARBURST(m_axi_data2_ARBURST),
    .ARLOCK(m_axi_data2_ARLOCK),
    .ARCACHE(m_axi_data2_ARCACHE),
    .ARPROT(m_axi_data2_ARPROT),
    .ARQOS(m_axi_data2_ARQOS),
    .ARREGION(m_axi_data2_ARREGION),
    .ARUSER(m_axi_data2_ARUSER),
    .RVALID(m_axi_data2_RVALID),
    .RREADY(m_axi_data2_RREADY),
    .RDATA(m_axi_data2_RDATA),
    .RLAST(m_axi_data2_RLAST),
    .RID(m_axi_data2_RID),
    .RUSER(m_axi_data2_RUSER),
    .RRESP(m_axi_data2_RRESP),
    .BVALID(m_axi_data2_BVALID),
    .BREADY(m_axi_data2_BREADY),
    .BRESP(m_axi_data2_BRESP),
    .BID(m_axi_data2_BID),
    .BUSER(m_axi_data2_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(data2_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(data2_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(data2_RDATA),
    .I_RFIFONUM(data2_RFIFONUM),
    .I_AWVALID(data2_AWVALID),
    .I_AWREADY(data2_AWREADY),
    .I_AWADDR(sext_ln14_2_fu_264_p1),
    .I_AWLEN(32'd1024),
    .I_WVALID(data2_WVALID),
    .I_WREADY(data2_WREADY),
    .I_WDATA(data2_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(data2_BVALID),
    .I_BREADY(data2_BREADY)
);

pl_vecadd_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_173_p0),
    .din1(grp_fu_173_p1),
    .ce(grp_fu_173_ce),
    .dout(grp_fu_173_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state3) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state3);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter10 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter11 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter12 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter13 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter14 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter15 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter16 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter17 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter18 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter19 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter19 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        first_iter_0_reg_160 <= 1'd1;
    end else if (((icmp_ln14_reg_301 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_160 <= 1'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        i_fu_98 <= 11'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln14_fu_185_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_fu_98 <= add_ln14_fu_191_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == a_0_ack_out) & (1'b1 == 1'b1) & (1'b1 == a_0_vld_reg)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b0 == a_0_vld_reg) & (1'b1 == 1'b1)))) begin
        a_0_data_reg <= a;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        a_read_reg_296 <= a_0_data_reg;
        b_read_reg_291 <= b_0_data_reg;
        c_read_reg_286 <= c_0_data_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln14_reg_305 <= add_ln14_fu_191_p2;
        add_ln14_reg_305_pp0_iter1_reg <= add_ln14_reg_305;
        first_iter_0_reg_160_pp0_iter1_reg <= first_iter_0_reg_160;
        icmp_ln14_reg_301 <= icmp_ln14_fu_185_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        add_ln14_reg_305_pp0_iter2_reg <= add_ln14_reg_305_pp0_iter1_reg;
        add_ln14_reg_305_pp0_iter3_reg <= add_ln14_reg_305_pp0_iter2_reg;
        add_ln14_reg_305_pp0_iter4_reg <= add_ln14_reg_305_pp0_iter3_reg;
        add_ln14_reg_305_pp0_iter5_reg <= add_ln14_reg_305_pp0_iter4_reg;
        add_ln14_reg_305_pp0_iter6_reg <= add_ln14_reg_305_pp0_iter5_reg;
        add_ln14_reg_305_pp0_iter7_reg <= add_ln14_reg_305_pp0_iter6_reg;
        add_ln14_reg_305_pp0_iter8_reg <= add_ln14_reg_305_pp0_iter7_reg;
        add_reg_352 <= grp_fu_173_p2;
        data0_addr_read_reg_322 <= data0_RDATA;
        data1_addr_read_reg_327 <= data1_RDATA;
        first_iter_0_reg_160_pp0_iter10_reg <= first_iter_0_reg_160_pp0_iter9_reg;
        first_iter_0_reg_160_pp0_iter11_reg <= first_iter_0_reg_160_pp0_iter10_reg;
        first_iter_0_reg_160_pp0_iter12_reg <= first_iter_0_reg_160_pp0_iter11_reg;
        first_iter_0_reg_160_pp0_iter2_reg <= first_iter_0_reg_160_pp0_iter1_reg;
        first_iter_0_reg_160_pp0_iter3_reg <= first_iter_0_reg_160_pp0_iter2_reg;
        first_iter_0_reg_160_pp0_iter4_reg <= first_iter_0_reg_160_pp0_iter3_reg;
        first_iter_0_reg_160_pp0_iter5_reg <= first_iter_0_reg_160_pp0_iter4_reg;
        first_iter_0_reg_160_pp0_iter6_reg <= first_iter_0_reg_160_pp0_iter5_reg;
        first_iter_0_reg_160_pp0_iter7_reg <= first_iter_0_reg_160_pp0_iter6_reg;
        first_iter_0_reg_160_pp0_iter8_reg <= first_iter_0_reg_160_pp0_iter7_reg;
        first_iter_0_reg_160_pp0_iter9_reg <= first_iter_0_reg_160_pp0_iter8_reg;
        icmp_ln14_1_reg_332 <= icmp_ln14_1_fu_242_p2;
        icmp_ln14_1_reg_332_pp0_iter10_reg <= icmp_ln14_1_reg_332;
        icmp_ln14_1_reg_332_pp0_iter11_reg <= icmp_ln14_1_reg_332_pp0_iter10_reg;
        icmp_ln14_1_reg_332_pp0_iter12_reg <= icmp_ln14_1_reg_332_pp0_iter11_reg;
        icmp_ln14_1_reg_332_pp0_iter13_reg <= icmp_ln14_1_reg_332_pp0_iter12_reg;
        icmp_ln14_1_reg_332_pp0_iter14_reg <= icmp_ln14_1_reg_332_pp0_iter13_reg;
        icmp_ln14_1_reg_332_pp0_iter15_reg <= icmp_ln14_1_reg_332_pp0_iter14_reg;
        icmp_ln14_1_reg_332_pp0_iter16_reg <= icmp_ln14_1_reg_332_pp0_iter15_reg;
        icmp_ln14_1_reg_332_pp0_iter17_reg <= icmp_ln14_1_reg_332_pp0_iter16_reg;
        icmp_ln14_1_reg_332_pp0_iter18_reg <= icmp_ln14_1_reg_332_pp0_iter17_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (b_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (b_0_vld_reg == 1'b1)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (b_0_vld_reg == 1'b0)))) begin
        b_0_data_reg <= b;
    end
end

always @ (posedge ap_clk) begin
    if (((~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (c_0_ack_out == 1'b1) & (1'b1 == 1'b1) & (c_0_vld_reg == 1'b1)) | (~((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0)) & (1'b1 == 1'b1) & (c_0_vld_reg == 1'b0)))) begin
        c_0_data_reg <= c;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        a_0_ack_out = 1'b1;
    end else begin
        a_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state23_blk = 1'b0;

assign ap_ST_fsm_state2_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln14_fu_185_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter17 == 1'b0) & (ap_enable_reg_pp0_iter16 == 1'b0) & (ap_enable_reg_pp0_iter15 == 1'b0) & (ap_enable_reg_pp0_iter12 == 1'b0) & (ap_enable_reg_pp0_iter11 == 1'b0) & (ap_enable_reg_pp0_iter10 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b0) & (ap_enable_reg_pp0_iter13 == 1'b0) & (ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state23)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        b_0_ack_out = 1'b1;
    end else begin
        b_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state2))) begin
        c_0_ack_out = 1'b1;
    end else begin
        c_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_160 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data0_ARVALID = 1'b1;
    end else begin
        data0_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data0_RREADY = 1'b1;
    end else begin
        data0_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_160 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data0_blk_n_AR = m_axi_data0_ARREADY;
    end else begin
        data0_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data0_blk_n_R = m_axi_data0_RVALID;
    end else begin
        data0_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_160 == 1'd1) & (1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_ARVALID = 1'b1;
    end else begin
        data1_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data1_RREADY = 1'b1;
    end else begin
        data1_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_160 == 1'd1) & (1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        data1_blk_n_AR = m_axi_data1_ARREADY;
    end else begin
        data1_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data1_blk_n_R = m_axi_data1_RVALID;
    end else begin
        data1_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_160_pp0_iter12_reg == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data2_AWVALID = 1'b1;
    end else begin
        data2_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln14_1_reg_332_pp0_iter18_reg == 1'd1) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data2_BREADY = 1'b1;
    end else begin
        data2_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        data2_WVALID = 1'b1;
    end else begin
        data2_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_160_pp0_iter12_reg == 1'd1) & (ap_enable_reg_pp0_iter13 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data2_blk_n_AW = m_axi_data2_AWREADY;
    end else begin
        data2_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln14_1_reg_332_pp0_iter18_reg == 1'd1) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data2_blk_n_B = m_axi_data2_BVALID;
    end else begin
        data2_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter14 == 1'b1) & (1'b0 == ap_block_pp0_stage0))) begin
        data2_blk_n_W = m_axi_data2_WREADY;
    end else begin
        data2_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_173_ce = 1'b1;
    end else begin
        grp_fu_173_ce = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln14_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln14_fu_185_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((ap_enable_reg_pp0_iter18 == 1'b0) & (ap_enable_reg_pp0_iter19 == 1'b1) & (1'b0 == ap_block_pp0_stage0_subdone)))) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln14_fu_191_p2 = (i_fu_98 + 11'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd3];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = (((data2_BVALID == 1'b0) & (icmp_ln14_1_reg_332_pp0_iter18_reg == 1'd1) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((data2_BVALID == 1'b0) & (icmp_ln14_1_reg_332_pp0_iter18_reg == 1'd1) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((data2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state16_io)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((data2_BVALID == 1'b0) & (icmp_ln14_1_reg_332_pp0_iter18_reg == 1'd1) & (ap_enable_reg_pp0_iter19 == 1'b1)) | ((data2_WREADY == 1'b0) & (ap_enable_reg_pp0_iter14 == 1'b1)) | ((ap_enable_reg_pp0_iter13 == 1'b1) & (1'b1 == ap_block_state16_io)) | ((ap_enable_reg_pp0_iter9 == 1'b1) & ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0))) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state4_io)));
end

assign ap_block_state10_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state11_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state12_pp0_stage0_iter9 = ((data1_RVALID == 1'b0) | (data0_RVALID == 1'b0));
end

assign ap_block_state13_pp0_stage0_iter10 = ~(1'b1 == 1'b1);

assign ap_block_state14_pp0_stage0_iter11 = ~(1'b1 == 1'b1);

assign ap_block_state15_pp0_stage0_iter12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state16_io = ((data2_AWREADY == 1'b0) & (first_iter_0_reg_160_pp0_iter12_reg == 1'd1));
end

assign ap_block_state16_pp0_stage0_iter13 = ~(1'b1 == 1'b1);

assign ap_block_state17_pp0_stage0_iter14 = ~(1'b1 == 1'b1);

assign ap_block_state18_pp0_stage0_iter15 = ~(1'b1 == 1'b1);

assign ap_block_state19_pp0_stage0_iter16 = ~(1'b1 == 1'b1);

assign ap_block_state20_pp0_stage0_iter17 = ~(1'b1 == 1'b1);

assign ap_block_state21_pp0_stage0_iter18 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state22_pp0_stage0_iter19 = ((data2_BVALID == 1'b0) & (icmp_ln14_1_reg_332_pp0_iter18_reg == 1'd1));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = (((data1_ARREADY == 1'b0) & (first_iter_0_reg_160 == 1'd1)) | ((data0_ARREADY == 1'b0) & (first_iter_0_reg_160 == 1'd1)));
end

assign ap_block_state4_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign data2_WDATA = add_reg_352;

assign grp_fu_173_p0 = data0_addr_read_reg_322;

assign grp_fu_173_p1 = data1_addr_read_reg_327;

assign icmp_ln14_1_fu_242_p2 = ((add_ln14_reg_305_pp0_iter8_reg == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln14_fu_185_p2 = ((i_fu_98 == 11'd1024) ? 1'b1 : 1'b0);

assign sext_ln14_1_fu_231_p1 = $signed(trunc_ln14_1_fu_222_p4);

assign sext_ln14_2_fu_264_p1 = $signed(trunc_ln14_2_fu_255_p4);

assign sext_ln14_fu_211_p1 = $signed(trunc_ln_fu_202_p4);

assign trunc_ln14_1_fu_222_p4 = {{b_read_reg_291[63:2]}};

assign trunc_ln14_2_fu_255_p4 = {{c_read_reg_286[63:2]}};

assign trunc_ln_fu_202_p4 = {{a_read_reg_296[63:2]}};

endmodule //pl_vecadd
