// ==============================================================
// Generated by Vitis HLS v2023.1
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="matmul_plain_matmul_plain,hls_ip_2023_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=4167,HLS_SYN_TPT=none,HLS_SYN_MEM=12,HLS_SYN_DSP=0,HLS_SYN_FF=6420,HLS_SYN_LUT=5052,HLS_VERSION=2023_1}" *)

module matmul_plain (
        ap_clk,
        ap_rst_n,
        m_axi_dataA_AWVALID,
        m_axi_dataA_AWREADY,
        m_axi_dataA_AWADDR,
        m_axi_dataA_AWID,
        m_axi_dataA_AWLEN,
        m_axi_dataA_AWSIZE,
        m_axi_dataA_AWBURST,
        m_axi_dataA_AWLOCK,
        m_axi_dataA_AWCACHE,
        m_axi_dataA_AWPROT,
        m_axi_dataA_AWQOS,
        m_axi_dataA_AWREGION,
        m_axi_dataA_AWUSER,
        m_axi_dataA_WVALID,
        m_axi_dataA_WREADY,
        m_axi_dataA_WDATA,
        m_axi_dataA_WSTRB,
        m_axi_dataA_WLAST,
        m_axi_dataA_WID,
        m_axi_dataA_WUSER,
        m_axi_dataA_ARVALID,
        m_axi_dataA_ARREADY,
        m_axi_dataA_ARADDR,
        m_axi_dataA_ARID,
        m_axi_dataA_ARLEN,
        m_axi_dataA_ARSIZE,
        m_axi_dataA_ARBURST,
        m_axi_dataA_ARLOCK,
        m_axi_dataA_ARCACHE,
        m_axi_dataA_ARPROT,
        m_axi_dataA_ARQOS,
        m_axi_dataA_ARREGION,
        m_axi_dataA_ARUSER,
        m_axi_dataA_RVALID,
        m_axi_dataA_RREADY,
        m_axi_dataA_RDATA,
        m_axi_dataA_RLAST,
        m_axi_dataA_RID,
        m_axi_dataA_RUSER,
        m_axi_dataA_RRESP,
        m_axi_dataA_BVALID,
        m_axi_dataA_BREADY,
        m_axi_dataA_BRESP,
        m_axi_dataA_BID,
        m_axi_dataA_BUSER,
        m_axi_dataB_AWVALID,
        m_axi_dataB_AWREADY,
        m_axi_dataB_AWADDR,
        m_axi_dataB_AWID,
        m_axi_dataB_AWLEN,
        m_axi_dataB_AWSIZE,
        m_axi_dataB_AWBURST,
        m_axi_dataB_AWLOCK,
        m_axi_dataB_AWCACHE,
        m_axi_dataB_AWPROT,
        m_axi_dataB_AWQOS,
        m_axi_dataB_AWREGION,
        m_axi_dataB_AWUSER,
        m_axi_dataB_WVALID,
        m_axi_dataB_WREADY,
        m_axi_dataB_WDATA,
        m_axi_dataB_WSTRB,
        m_axi_dataB_WLAST,
        m_axi_dataB_WID,
        m_axi_dataB_WUSER,
        m_axi_dataB_ARVALID,
        m_axi_dataB_ARREADY,
        m_axi_dataB_ARADDR,
        m_axi_dataB_ARID,
        m_axi_dataB_ARLEN,
        m_axi_dataB_ARSIZE,
        m_axi_dataB_ARBURST,
        m_axi_dataB_ARLOCK,
        m_axi_dataB_ARCACHE,
        m_axi_dataB_ARPROT,
        m_axi_dataB_ARQOS,
        m_axi_dataB_ARREGION,
        m_axi_dataB_ARUSER,
        m_axi_dataB_RVALID,
        m_axi_dataB_RREADY,
        m_axi_dataB_RDATA,
        m_axi_dataB_RLAST,
        m_axi_dataB_RID,
        m_axi_dataB_RUSER,
        m_axi_dataB_RRESP,
        m_axi_dataB_BVALID,
        m_axi_dataB_BREADY,
        m_axi_dataB_BRESP,
        m_axi_dataB_BID,
        m_axi_dataB_BUSER,
        m_axi_dataAB_AWVALID,
        m_axi_dataAB_AWREADY,
        m_axi_dataAB_AWADDR,
        m_axi_dataAB_AWID,
        m_axi_dataAB_AWLEN,
        m_axi_dataAB_AWSIZE,
        m_axi_dataAB_AWBURST,
        m_axi_dataAB_AWLOCK,
        m_axi_dataAB_AWCACHE,
        m_axi_dataAB_AWPROT,
        m_axi_dataAB_AWQOS,
        m_axi_dataAB_AWREGION,
        m_axi_dataAB_AWUSER,
        m_axi_dataAB_WVALID,
        m_axi_dataAB_WREADY,
        m_axi_dataAB_WDATA,
        m_axi_dataAB_WSTRB,
        m_axi_dataAB_WLAST,
        m_axi_dataAB_WID,
        m_axi_dataAB_WUSER,
        m_axi_dataAB_ARVALID,
        m_axi_dataAB_ARREADY,
        m_axi_dataAB_ARADDR,
        m_axi_dataAB_ARID,
        m_axi_dataAB_ARLEN,
        m_axi_dataAB_ARSIZE,
        m_axi_dataAB_ARBURST,
        m_axi_dataAB_ARLOCK,
        m_axi_dataAB_ARCACHE,
        m_axi_dataAB_ARPROT,
        m_axi_dataAB_ARQOS,
        m_axi_dataAB_ARREGION,
        m_axi_dataAB_ARUSER,
        m_axi_dataAB_RVALID,
        m_axi_dataAB_RREADY,
        m_axi_dataAB_RDATA,
        m_axi_dataAB_RLAST,
        m_axi_dataAB_RID,
        m_axi_dataAB_RUSER,
        m_axi_dataAB_RRESP,
        m_axi_dataAB_BVALID,
        m_axi_dataAB_BREADY,
        m_axi_dataAB_BRESP,
        m_axi_dataAB_BID,
        m_axi_dataAB_BUSER,
        s_axi_ctrl_AWVALID,
        s_axi_ctrl_AWREADY,
        s_axi_ctrl_AWADDR,
        s_axi_ctrl_WVALID,
        s_axi_ctrl_WREADY,
        s_axi_ctrl_WDATA,
        s_axi_ctrl_WSTRB,
        s_axi_ctrl_ARVALID,
        s_axi_ctrl_ARREADY,
        s_axi_ctrl_ARADDR,
        s_axi_ctrl_RVALID,
        s_axi_ctrl_RREADY,
        s_axi_ctrl_RDATA,
        s_axi_ctrl_RRESP,
        s_axi_ctrl_BVALID,
        s_axi_ctrl_BREADY,
        s_axi_ctrl_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 18'd1;
parameter    ap_ST_fsm_pp0_stage0 = 18'd2;
parameter    ap_ST_fsm_pp0_stage1 = 18'd4;
parameter    ap_ST_fsm_pp0_stage2 = 18'd8;
parameter    ap_ST_fsm_pp0_stage3 = 18'd16;
parameter    ap_ST_fsm_pp0_stage4 = 18'd32;
parameter    ap_ST_fsm_pp0_stage5 = 18'd64;
parameter    ap_ST_fsm_pp0_stage6 = 18'd128;
parameter    ap_ST_fsm_pp0_stage7 = 18'd256;
parameter    ap_ST_fsm_pp0_stage8 = 18'd512;
parameter    ap_ST_fsm_pp0_stage9 = 18'd1024;
parameter    ap_ST_fsm_pp0_stage10 = 18'd2048;
parameter    ap_ST_fsm_pp0_stage11 = 18'd4096;
parameter    ap_ST_fsm_pp0_stage12 = 18'd8192;
parameter    ap_ST_fsm_pp0_stage13 = 18'd16384;
parameter    ap_ST_fsm_pp0_stage14 = 18'd32768;
parameter    ap_ST_fsm_pp0_stage15 = 18'd65536;
parameter    ap_ST_fsm_state88 = 18'd131072;
parameter    C_S_AXI_CTRL_DATA_WIDTH = 32;
parameter    C_S_AXI_CTRL_ADDR_WIDTH = 6;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAA_ID_WIDTH = 1;
parameter    C_M_AXI_DATAA_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATAA_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAA_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATAA_USER_VALUE = 0;
parameter    C_M_AXI_DATAA_PROT_VALUE = 0;
parameter    C_M_AXI_DATAA_CACHE_VALUE = 3;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAAB_ID_WIDTH = 1;
parameter    C_M_AXI_DATAAB_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATAAB_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAAB_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATAAB_USER_VALUE = 0;
parameter    C_M_AXI_DATAAB_PROT_VALUE = 0;
parameter    C_M_AXI_DATAAB_CACHE_VALUE = 3;
parameter    C_M_AXI_DATAB_ID_WIDTH = 1;
parameter    C_M_AXI_DATAB_ADDR_WIDTH = 64;
parameter    C_M_AXI_DATAB_DATA_WIDTH = 32;
parameter    C_M_AXI_DATAB_AWUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_ARUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_WUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_RUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATAB_USER_VALUE = 0;
parameter    C_M_AXI_DATAB_PROT_VALUE = 0;
parameter    C_M_AXI_DATAB_CACHE_VALUE = 3;

parameter C_S_AXI_CTRL_WSTRB_WIDTH = (32 / 8);
parameter C_S_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATAA_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATAAB_WSTRB_WIDTH = (32 / 8);
parameter C_M_AXI_DATAB_WSTRB_WIDTH = (32 / 8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_dataA_AWVALID;
input   m_axi_dataA_AWREADY;
output  [C_M_AXI_DATAA_ADDR_WIDTH - 1:0] m_axi_dataA_AWADDR;
output  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_AWID;
output  [7:0] m_axi_dataA_AWLEN;
output  [2:0] m_axi_dataA_AWSIZE;
output  [1:0] m_axi_dataA_AWBURST;
output  [1:0] m_axi_dataA_AWLOCK;
output  [3:0] m_axi_dataA_AWCACHE;
output  [2:0] m_axi_dataA_AWPROT;
output  [3:0] m_axi_dataA_AWQOS;
output  [3:0] m_axi_dataA_AWREGION;
output  [C_M_AXI_DATAA_AWUSER_WIDTH - 1:0] m_axi_dataA_AWUSER;
output   m_axi_dataA_WVALID;
input   m_axi_dataA_WREADY;
output  [C_M_AXI_DATAA_DATA_WIDTH - 1:0] m_axi_dataA_WDATA;
output  [C_M_AXI_DATAA_WSTRB_WIDTH - 1:0] m_axi_dataA_WSTRB;
output   m_axi_dataA_WLAST;
output  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_WID;
output  [C_M_AXI_DATAA_WUSER_WIDTH - 1:0] m_axi_dataA_WUSER;
output   m_axi_dataA_ARVALID;
input   m_axi_dataA_ARREADY;
output  [C_M_AXI_DATAA_ADDR_WIDTH - 1:0] m_axi_dataA_ARADDR;
output  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_ARID;
output  [7:0] m_axi_dataA_ARLEN;
output  [2:0] m_axi_dataA_ARSIZE;
output  [1:0] m_axi_dataA_ARBURST;
output  [1:0] m_axi_dataA_ARLOCK;
output  [3:0] m_axi_dataA_ARCACHE;
output  [2:0] m_axi_dataA_ARPROT;
output  [3:0] m_axi_dataA_ARQOS;
output  [3:0] m_axi_dataA_ARREGION;
output  [C_M_AXI_DATAA_ARUSER_WIDTH - 1:0] m_axi_dataA_ARUSER;
input   m_axi_dataA_RVALID;
output   m_axi_dataA_RREADY;
input  [C_M_AXI_DATAA_DATA_WIDTH - 1:0] m_axi_dataA_RDATA;
input   m_axi_dataA_RLAST;
input  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_RID;
input  [C_M_AXI_DATAA_RUSER_WIDTH - 1:0] m_axi_dataA_RUSER;
input  [1:0] m_axi_dataA_RRESP;
input   m_axi_dataA_BVALID;
output   m_axi_dataA_BREADY;
input  [1:0] m_axi_dataA_BRESP;
input  [C_M_AXI_DATAA_ID_WIDTH - 1:0] m_axi_dataA_BID;
input  [C_M_AXI_DATAA_BUSER_WIDTH - 1:0] m_axi_dataA_BUSER;
output   m_axi_dataB_AWVALID;
input   m_axi_dataB_AWREADY;
output  [C_M_AXI_DATAB_ADDR_WIDTH - 1:0] m_axi_dataB_AWADDR;
output  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_AWID;
output  [7:0] m_axi_dataB_AWLEN;
output  [2:0] m_axi_dataB_AWSIZE;
output  [1:0] m_axi_dataB_AWBURST;
output  [1:0] m_axi_dataB_AWLOCK;
output  [3:0] m_axi_dataB_AWCACHE;
output  [2:0] m_axi_dataB_AWPROT;
output  [3:0] m_axi_dataB_AWQOS;
output  [3:0] m_axi_dataB_AWREGION;
output  [C_M_AXI_DATAB_AWUSER_WIDTH - 1:0] m_axi_dataB_AWUSER;
output   m_axi_dataB_WVALID;
input   m_axi_dataB_WREADY;
output  [C_M_AXI_DATAB_DATA_WIDTH - 1:0] m_axi_dataB_WDATA;
output  [C_M_AXI_DATAB_WSTRB_WIDTH - 1:0] m_axi_dataB_WSTRB;
output   m_axi_dataB_WLAST;
output  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_WID;
output  [C_M_AXI_DATAB_WUSER_WIDTH - 1:0] m_axi_dataB_WUSER;
output   m_axi_dataB_ARVALID;
input   m_axi_dataB_ARREADY;
output  [C_M_AXI_DATAB_ADDR_WIDTH - 1:0] m_axi_dataB_ARADDR;
output  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_ARID;
output  [7:0] m_axi_dataB_ARLEN;
output  [2:0] m_axi_dataB_ARSIZE;
output  [1:0] m_axi_dataB_ARBURST;
output  [1:0] m_axi_dataB_ARLOCK;
output  [3:0] m_axi_dataB_ARCACHE;
output  [2:0] m_axi_dataB_ARPROT;
output  [3:0] m_axi_dataB_ARQOS;
output  [3:0] m_axi_dataB_ARREGION;
output  [C_M_AXI_DATAB_ARUSER_WIDTH - 1:0] m_axi_dataB_ARUSER;
input   m_axi_dataB_RVALID;
output   m_axi_dataB_RREADY;
input  [C_M_AXI_DATAB_DATA_WIDTH - 1:0] m_axi_dataB_RDATA;
input   m_axi_dataB_RLAST;
input  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_RID;
input  [C_M_AXI_DATAB_RUSER_WIDTH - 1:0] m_axi_dataB_RUSER;
input  [1:0] m_axi_dataB_RRESP;
input   m_axi_dataB_BVALID;
output   m_axi_dataB_BREADY;
input  [1:0] m_axi_dataB_BRESP;
input  [C_M_AXI_DATAB_ID_WIDTH - 1:0] m_axi_dataB_BID;
input  [C_M_AXI_DATAB_BUSER_WIDTH - 1:0] m_axi_dataB_BUSER;
output   m_axi_dataAB_AWVALID;
input   m_axi_dataAB_AWREADY;
output  [C_M_AXI_DATAAB_ADDR_WIDTH - 1:0] m_axi_dataAB_AWADDR;
output  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_AWID;
output  [7:0] m_axi_dataAB_AWLEN;
output  [2:0] m_axi_dataAB_AWSIZE;
output  [1:0] m_axi_dataAB_AWBURST;
output  [1:0] m_axi_dataAB_AWLOCK;
output  [3:0] m_axi_dataAB_AWCACHE;
output  [2:0] m_axi_dataAB_AWPROT;
output  [3:0] m_axi_dataAB_AWQOS;
output  [3:0] m_axi_dataAB_AWREGION;
output  [C_M_AXI_DATAAB_AWUSER_WIDTH - 1:0] m_axi_dataAB_AWUSER;
output   m_axi_dataAB_WVALID;
input   m_axi_dataAB_WREADY;
output  [C_M_AXI_DATAAB_DATA_WIDTH - 1:0] m_axi_dataAB_WDATA;
output  [C_M_AXI_DATAAB_WSTRB_WIDTH - 1:0] m_axi_dataAB_WSTRB;
output   m_axi_dataAB_WLAST;
output  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_WID;
output  [C_M_AXI_DATAAB_WUSER_WIDTH - 1:0] m_axi_dataAB_WUSER;
output   m_axi_dataAB_ARVALID;
input   m_axi_dataAB_ARREADY;
output  [C_M_AXI_DATAAB_ADDR_WIDTH - 1:0] m_axi_dataAB_ARADDR;
output  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_ARID;
output  [7:0] m_axi_dataAB_ARLEN;
output  [2:0] m_axi_dataAB_ARSIZE;
output  [1:0] m_axi_dataAB_ARBURST;
output  [1:0] m_axi_dataAB_ARLOCK;
output  [3:0] m_axi_dataAB_ARCACHE;
output  [2:0] m_axi_dataAB_ARPROT;
output  [3:0] m_axi_dataAB_ARQOS;
output  [3:0] m_axi_dataAB_ARREGION;
output  [C_M_AXI_DATAAB_ARUSER_WIDTH - 1:0] m_axi_dataAB_ARUSER;
input   m_axi_dataAB_RVALID;
output   m_axi_dataAB_RREADY;
input  [C_M_AXI_DATAAB_DATA_WIDTH - 1:0] m_axi_dataAB_RDATA;
input   m_axi_dataAB_RLAST;
input  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_RID;
input  [C_M_AXI_DATAAB_RUSER_WIDTH - 1:0] m_axi_dataAB_RUSER;
input  [1:0] m_axi_dataAB_RRESP;
input   m_axi_dataAB_BVALID;
output   m_axi_dataAB_BREADY;
input  [1:0] m_axi_dataAB_BRESP;
input  [C_M_AXI_DATAAB_ID_WIDTH - 1:0] m_axi_dataAB_BID;
input  [C_M_AXI_DATAAB_BUSER_WIDTH - 1:0] m_axi_dataAB_BUSER;
input   s_axi_ctrl_AWVALID;
output   s_axi_ctrl_AWREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_AWADDR;
input   s_axi_ctrl_WVALID;
output   s_axi_ctrl_WREADY;
input  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_WDATA;
input  [C_S_AXI_CTRL_WSTRB_WIDTH - 1:0] s_axi_ctrl_WSTRB;
input   s_axi_ctrl_ARVALID;
output   s_axi_ctrl_ARREADY;
input  [C_S_AXI_CTRL_ADDR_WIDTH - 1:0] s_axi_ctrl_ARADDR;
output   s_axi_ctrl_RVALID;
input   s_axi_ctrl_RREADY;
output  [C_S_AXI_CTRL_DATA_WIDTH - 1:0] s_axi_ctrl_RDATA;
output  [1:0] s_axi_ctrl_RRESP;
output   s_axi_ctrl_BVALID;
input   s_axi_ctrl_BREADY;
output  [1:0] s_axi_ctrl_BRESP;
output   interrupt;

 reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [17:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg    ap_ready;
wire   [63:0] A;
wire   [63:0] B;
wire   [63:0] AB;
reg    dataA_blk_n_AR;
wire    ap_CS_fsm_pp0_stage1;
reg    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage1;
reg   [0:0] icmp_ln15_reg_1200;
reg    dataA_blk_n_R;
wire    ap_CS_fsm_pp0_stage9;
wire    ap_block_pp0_stage9;
wire    ap_CS_fsm_pp0_stage10;
wire    ap_block_pp0_stage10;
wire    ap_CS_fsm_pp0_stage11;
wire    ap_block_pp0_stage11;
wire    ap_CS_fsm_pp0_stage12;
wire    ap_block_pp0_stage12;
wire    ap_CS_fsm_pp0_stage13;
wire    ap_block_pp0_stage13;
wire    ap_CS_fsm_pp0_stage14;
wire    ap_block_pp0_stage14;
wire    ap_CS_fsm_pp0_stage15;
wire    ap_block_pp0_stage15;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2;
wire    ap_CS_fsm_pp0_stage3;
wire    ap_block_pp0_stage3;
wire    ap_CS_fsm_pp0_stage4;
wire    ap_block_pp0_stage4;
wire    ap_CS_fsm_pp0_stage5;
wire    ap_block_pp0_stage5;
wire    ap_CS_fsm_pp0_stage6;
wire    ap_block_pp0_stage6;
wire    ap_CS_fsm_pp0_stage7;
wire    ap_block_pp0_stage7;
wire    ap_CS_fsm_pp0_stage8;
wire    ap_block_pp0_stage8;
reg    dataB_blk_n_AR;
reg    dataB_blk_n_R;
reg    dataAB_blk_n_AW;
reg    ap_enable_reg_pp0_iter4;
reg   [0:0] first_iter_0_reg_398;
reg   [0:0] first_iter_0_reg_398_pp0_iter4_reg;
reg    dataAB_blk_n_W;
reg    ap_enable_reg_pp0_iter5;
reg    dataAB_blk_n_B;
reg   [0:0] icmp_ln15_1_reg_1250;
reg   [0:0] icmp_ln15_1_reg_1250_pp0_iter5_reg;
reg   [0:0] first_iter_0_reg_398_pp0_iter1_reg;
wire    ap_block_state2_pp0_stage0_iter0;
wire    dataA_AWREADY;
wire    dataA_WREADY;
reg    dataA_ARVALID;
wire    dataA_ARREADY;
wire    dataA_RVALID;
reg    dataA_RREADY;
wire   [31:0] dataA_RDATA;
wire   [8:0] dataA_RFIFONUM;
wire    dataA_BVALID;
wire    dataB_AWREADY;
wire    dataB_WREADY;
reg    dataB_ARVALID;
wire    dataB_ARREADY;
reg   [63:0] dataB_ARADDR;
wire    dataB_RVALID;
reg    dataB_RREADY;
wire   [31:0] dataB_RDATA;
wire   [8:0] dataB_RFIFONUM;
wire    dataB_BVALID;
reg    ap_block_state18_pp0_stage0_iter1;
wire    ap_block_state34_pp0_stage0_iter2;
wire    ap_block_state50_pp0_stage0_iter3;
wire    ap_block_state66_pp0_stage0_iter4;
reg    dataAB_AWVALID;
wire    dataAB_AWREADY;
reg    dataAB_WVALID;
wire    dataAB_WREADY;
wire   [31:0] dataAB_WDATA;
wire    dataAB_ARREADY;
wire    dataAB_RVALID;
wire   [31:0] dataAB_RDATA;
wire   [8:0] dataAB_RFIFONUM;
wire    dataAB_BVALID;
reg    dataAB_BREADY;
wire    ap_block_state82_pp0_stage0_iter5;
reg    ap_block_pp0_stage0_11001;
reg   [0:0] first_iter_0_reg_398_pp0_iter2_reg;
reg   [0:0] first_iter_0_reg_398_pp0_iter3_reg;
reg   [31:0] reg_421;
reg    ap_block_state11_pp0_stage9_iter0;
reg    ap_block_state11_io;
wire    ap_block_state27_pp0_stage9_iter1;
wire    ap_block_state43_pp0_stage9_iter2;
wire    ap_block_state59_pp0_stage9_iter3;
wire    ap_block_state75_pp0_stage9_iter4;
reg    ap_block_pp0_stage9_11001;
reg    ap_block_state12_pp0_stage10_iter0;
reg    ap_block_state12_io;
wire    ap_block_state28_pp0_stage10_iter1;
wire    ap_block_state44_pp0_stage10_iter2;
wire    ap_block_state60_pp0_stage10_iter3;
wire    ap_block_state76_pp0_stage10_iter4;
reg    ap_block_pp0_stage10_11001;
reg    ap_block_state13_pp0_stage11_iter0;
reg    ap_block_state13_io;
wire    ap_block_state29_pp0_stage11_iter1;
wire    ap_block_state45_pp0_stage11_iter2;
wire    ap_block_state61_pp0_stage11_iter3;
wire    ap_block_state77_pp0_stage11_iter4;
reg    ap_block_pp0_stage11_11001;
reg    ap_block_state14_pp0_stage12_iter0;
reg    ap_block_state14_io;
wire    ap_block_state30_pp0_stage12_iter1;
wire    ap_block_state46_pp0_stage12_iter2;
wire    ap_block_state62_pp0_stage12_iter3;
wire    ap_block_state78_pp0_stage12_iter4;
reg    ap_block_pp0_stage12_11001;
reg    ap_block_state15_pp0_stage13_iter0;
reg    ap_block_state15_io;
wire    ap_block_state31_pp0_stage13_iter1;
wire    ap_block_state47_pp0_stage13_iter2;
wire    ap_block_state63_pp0_stage13_iter3;
wire    ap_block_state79_pp0_stage13_iter4;
reg    ap_block_pp0_stage13_11001;
reg    ap_block_state16_pp0_stage14_iter0;
reg    ap_block_state16_io;
wire    ap_block_state32_pp0_stage14_iter1;
wire    ap_block_state48_pp0_stage14_iter2;
wire    ap_block_state64_pp0_stage14_iter3;
wire    ap_block_state80_pp0_stage14_iter4;
reg    ap_block_pp0_stage14_11001;
reg    ap_block_state17_pp0_stage15_iter0;
reg    ap_block_state17_io;
wire    ap_block_state33_pp0_stage15_iter1;
wire    ap_block_state49_pp0_stage15_iter2;
wire    ap_block_state65_pp0_stage15_iter3;
wire    ap_block_state81_pp0_stage15_iter4;
reg    ap_block_state81_io;
reg    ap_block_pp0_stage15_11001;
wire    ap_block_state3_pp0_stage1_iter0;
reg    ap_block_state3_io;
reg    ap_block_state19_pp0_stage1_iter1;
wire    ap_block_state35_pp0_stage1_iter2;
wire    ap_block_state51_pp0_stage1_iter3;
wire    ap_block_state67_pp0_stage1_iter4;
wire    ap_block_state83_pp0_stage1_iter5;
reg    ap_block_pp0_stage1_11001;
wire    ap_block_state4_pp0_stage2_iter0;
reg    ap_block_state4_io;
reg    ap_block_state20_pp0_stage2_iter1;
wire    ap_block_state36_pp0_stage2_iter2;
wire    ap_block_state52_pp0_stage2_iter3;
wire    ap_block_state68_pp0_stage2_iter4;
wire    ap_block_state84_pp0_stage2_iter5;
reg    ap_block_pp0_stage2_11001;
wire    ap_block_state5_pp0_stage3_iter0;
reg    ap_block_state5_io;
reg    ap_block_state21_pp0_stage3_iter1;
wire    ap_block_state37_pp0_stage3_iter2;
wire    ap_block_state53_pp0_stage3_iter3;
wire    ap_block_state69_pp0_stage3_iter4;
wire    ap_block_state85_pp0_stage3_iter5;
reg    ap_block_pp0_stage3_11001;
wire    ap_block_state6_pp0_stage4_iter0;
reg    ap_block_state6_io;
reg    ap_block_state22_pp0_stage4_iter1;
wire    ap_block_state38_pp0_stage4_iter2;
wire    ap_block_state54_pp0_stage4_iter3;
wire    ap_block_state70_pp0_stage4_iter4;
wire    ap_block_state86_pp0_stage4_iter5;
reg    ap_block_pp0_stage4_11001;
wire    ap_block_state7_pp0_stage5_iter0;
reg    ap_block_state7_io;
reg    ap_block_state23_pp0_stage5_iter1;
wire    ap_block_state39_pp0_stage5_iter2;
wire    ap_block_state55_pp0_stage5_iter3;
wire    ap_block_state71_pp0_stage5_iter4;
reg    ap_block_state87_pp0_stage5_iter5;
reg    ap_block_pp0_stage5_11001;
wire    ap_block_state8_pp0_stage6_iter0;
reg    ap_block_state8_io;
reg    ap_block_state24_pp0_stage6_iter1;
wire    ap_block_state40_pp0_stage6_iter2;
wire    ap_block_state56_pp0_stage6_iter3;
wire    ap_block_state72_pp0_stage6_iter4;
reg    ap_block_pp0_stage6_11001;
wire    ap_block_state9_pp0_stage7_iter0;
reg    ap_block_state9_io;
reg    ap_block_state25_pp0_stage7_iter1;
wire    ap_block_state41_pp0_stage7_iter2;
wire    ap_block_state57_pp0_stage7_iter3;
wire    ap_block_state73_pp0_stage7_iter4;
reg    ap_block_pp0_stage7_11001;
wire    ap_block_state10_pp0_stage8_iter0;
reg    ap_block_state10_io;
reg    ap_block_state26_pp0_stage8_iter1;
wire    ap_block_state42_pp0_stage8_iter2;
wire    ap_block_state58_pp0_stage8_iter3;
wire    ap_block_state74_pp0_stage8_iter4;
reg    ap_block_pp0_stage8_11001;
wire   [31:0] grp_fu_412_p2;
reg   [31:0] reg_425;
reg   [31:0] reg_430;
reg    ap_enable_reg_pp0_iter2;
reg   [31:0] reg_435;
reg    ap_enable_reg_pp0_iter3;
reg   [31:0] reg_440;
reg   [31:0] reg_445;
reg   [63:0] AB_read_reg_1185;
reg   [63:0] B_read_reg_1190;
reg   [63:0] A_read_reg_1195;
wire   [0:0] icmp_ln15_fu_468_p2;
wire   [8:0] add_ln15_fu_474_p2;
reg   [8:0] add_ln15_reg_1204;
wire   [4:0] select_ln15_fu_492_p3;
reg   [4:0] select_ln15_reg_1209;
wire   [4:0] select_ln15_1_fu_506_p3;
reg   [4:0] select_ln15_1_reg_1214;
reg   [63:0] dataA_addr_reg_1219;
wire   [63:0] add_ln19_fu_571_p2;
reg   [63:0] add_ln19_reg_1225;
reg   [63:0] dataB_addr_reg_1244;
wire   [0:0] icmp_ln15_1_fu_596_p2;
reg   [0:0] icmp_ln15_1_reg_1250_pp0_iter1_reg;
reg   [0:0] icmp_ln15_1_reg_1250_pp0_iter2_reg;
reg   [0:0] icmp_ln15_1_reg_1250_pp0_iter3_reg;
reg   [0:0] icmp_ln15_1_reg_1250_pp0_iter4_reg;
reg   [63:0] dataB_addr_1_reg_1254;
reg   [63:0] dataB_addr_2_reg_1260;
reg   [63:0] dataB_addr_3_reg_1266;
reg   [63:0] dataB_addr_4_reg_1272;
reg   [63:0] dataB_addr_5_reg_1278;
reg   [63:0] dataB_addr_6_reg_1284;
reg   [63:0] dataB_addr_7_reg_1290;
reg   [63:0] dataB_addr_8_reg_1296;
reg   [31:0] dataB_addr_read_reg_1302;
reg   [63:0] dataB_addr_9_reg_1307;
wire   [31:0] bitcast_ln19_fu_827_p1;
wire   [31:0] bitcast_ln19_1_fu_832_p1;
reg   [31:0] dataB_addr_1_read_reg_1323;
reg   [63:0] dataB_addr_10_reg_1328;
wire   [31:0] bitcast_ln19_12_fu_861_p1;
wire   [31:0] bitcast_ln19_16_fu_866_p1;
reg   [31:0] dataB_addr_2_read_reg_1344;
reg   [63:0] dataB_addr_11_reg_1349;
wire   [31:0] grp_fu_417_p2;
reg   [31:0] mul_reg_1355;
wire   [31:0] bitcast_ln19_2_fu_895_p1;
wire   [31:0] bitcast_ln19_17_fu_900_p1;
reg   [31:0] dataB_addr_3_read_reg_1370;
reg   [63:0] dataB_addr_12_reg_1375;
reg   [31:0] mul_1_reg_1381;
wire   [31:0] bitcast_ln19_3_fu_929_p1;
wire   [31:0] bitcast_ln19_18_fu_934_p1;
reg   [31:0] dataB_addr_4_read_reg_1396;
reg   [63:0] dataB_addr_13_reg_1401;
reg   [31:0] mul_2_reg_1407;
wire   [31:0] bitcast_ln19_4_fu_963_p1;
wire   [31:0] bitcast_ln19_19_fu_968_p1;
reg   [31:0] dataB_addr_5_read_reg_1422;
reg   [63:0] dataB_addr_14_reg_1427;
reg   [63:0] dataB_addr_15_reg_1433;
reg   [31:0] mul_3_reg_1439;
wire   [31:0] bitcast_ln19_5_fu_1022_p1;
wire   [31:0] bitcast_ln19_20_fu_1027_p1;
reg   [31:0] dataB_addr_6_read_reg_1454;
reg   [31:0] mul_4_reg_1459;
wire   [31:0] bitcast_ln19_6_fu_1049_p1;
wire   [31:0] bitcast_ln19_21_fu_1054_p1;
reg   [31:0] dataB_addr_7_read_reg_1474;
reg   [31:0] mul_5_reg_1479;
reg   [31:0] mul_5_reg_1479_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_7_fu_1058_p1;
wire   [31:0] bitcast_ln19_22_fu_1063_p1;
reg   [31:0] dataB_addr_8_read_reg_1494;
reg   [31:0] mul_6_reg_1499;
reg   [31:0] mul_6_reg_1499_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_8_fu_1067_p1;
wire   [31:0] bitcast_ln19_23_fu_1072_p1;
reg   [31:0] dataB_addr_9_read_reg_1514;
reg   [31:0] mul_7_reg_1519;
reg   [31:0] mul_7_reg_1519_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_9_fu_1076_p1;
wire   [31:0] bitcast_ln19_24_fu_1081_p1;
reg   [31:0] dataB_addr_10_read_reg_1534;
reg   [31:0] mul_8_reg_1539;
reg   [31:0] mul_8_reg_1539_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_10_fu_1085_p1;
wire   [31:0] bitcast_ln19_25_fu_1090_p1;
reg   [31:0] dataB_addr_11_read_reg_1554;
reg   [31:0] mul_9_reg_1559;
reg   [31:0] mul_9_reg_1559_pp0_iter2_reg;
wire   [31:0] bitcast_ln19_11_fu_1094_p1;
wire   [31:0] bitcast_ln19_26_fu_1099_p1;
reg   [31:0] dataB_addr_12_read_reg_1574;
reg   [31:0] mul_s_reg_1579;
reg   [31:0] mul_s_reg_1579_pp0_iter2_reg;
reg   [31:0] mul_s_reg_1579_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_27_fu_1103_p1;
wire   [31:0] bitcast_ln19_28_fu_1108_p1;
reg   [31:0] dataB_addr_13_read_reg_1594;
reg   [31:0] mul_10_reg_1599;
reg   [31:0] mul_10_reg_1599_pp0_iter2_reg;
reg   [31:0] mul_10_reg_1599_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_13_fu_1112_p1;
wire   [31:0] bitcast_ln19_29_fu_1117_p1;
reg   [31:0] dataB_addr_14_read_reg_1614;
reg   [31:0] mul_11_reg_1619;
reg   [31:0] mul_11_reg_1619_pp0_iter2_reg;
reg   [31:0] mul_11_reg_1619_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_14_fu_1121_p1;
wire   [31:0] bitcast_ln19_30_fu_1126_p1;
reg   [31:0] dataB_addr_15_read_reg_1634;
reg   [31:0] mul_12_reg_1639;
reg   [31:0] mul_12_reg_1639_pp0_iter2_reg;
reg   [31:0] mul_12_reg_1639_pp0_iter3_reg;
wire   [31:0] bitcast_ln19_15_fu_1130_p1;
wire   [31:0] bitcast_ln19_31_fu_1135_p1;
reg   [31:0] mul_13_reg_1654;
reg   [31:0] mul_13_reg_1654_pp0_iter2_reg;
reg   [31:0] mul_13_reg_1654_pp0_iter3_reg;
reg   [31:0] mul_14_reg_1659;
reg   [31:0] mul_14_reg_1659_pp0_iter2_reg;
reg   [31:0] mul_14_reg_1659_pp0_iter3_reg;
reg   [31:0] mul_14_reg_1659_pp0_iter4_reg;
reg    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state2;
reg    ap_block_pp0_stage15_subdone;
reg    ap_block_pp0_stage5_subdone;
wire  signed [63:0] sext_ln15_1_fu_545_p1;
wire  signed [63:0] sext_ln19_fu_586_p1;
wire  signed [63:0] sext_ln19_1_fu_617_p1;
wire  signed [63:0] sext_ln19_2_fu_642_p1;
wire  signed [63:0] sext_ln19_3_fu_667_p1;
wire  signed [63:0] sext_ln19_4_fu_692_p1;
wire  signed [63:0] sext_ln19_5_fu_717_p1;
wire  signed [63:0] sext_ln19_6_fu_742_p1;
wire  signed [63:0] sext_ln19_7_fu_767_p1;
wire  signed [63:0] sext_ln19_8_fu_792_p1;
wire  signed [63:0] sext_ln19_9_fu_817_p1;
wire  signed [63:0] sext_ln19_10_fu_851_p1;
wire  signed [63:0] sext_ln19_11_fu_885_p1;
wire  signed [63:0] sext_ln19_12_fu_919_p1;
wire  signed [63:0] sext_ln19_13_fu_953_p1;
wire  signed [63:0] sext_ln19_14_fu_987_p1;
wire  signed [63:0] sext_ln19_15_fu_1012_p1;
wire   [63:0] sext_ln15_fu_1148_p1;
reg    ap_block_pp0_stage0_01001;
reg   [4:0] j_fu_148;
wire   [4:0] add_ln16_fu_1031_p2;
reg   [4:0] i_fu_152;
reg   [8:0] indvar_flatten_fu_156;
reg   [31:0] grp_fu_412_p0;
reg   [31:0] grp_fu_412_p1;
reg   [31:0] grp_fu_417_p0;
reg   [31:0] grp_fu_417_p1;
wire   [0:0] icmp_ln16_fu_486_p2;
wire   [4:0] add_ln15_2_fu_500_p2;
wire   [3:0] trunc_ln15_fu_514_p1;
wire   [9:0] sext_ln18_mid2_v_v_v_v_v_fu_518_p3;
wire   [63:0] zext_ln15_fu_526_p1;
wire   [63:0] add_ln15_1_fu_530_p2;
wire   [61:0] sext_ln18_mid2_v_fu_535_p4;
wire   [3:0] trunc_ln19_fu_555_p1;
wire   [5:0] shl_ln_fu_559_p3;
wire   [63:0] zext_ln19_fu_567_p1;
wire   [61:0] trunc_ln1_fu_576_p4;
wire   [63:0] add_ln19_1_fu_602_p2;
wire   [61:0] trunc_ln19_1_fu_607_p4;
wire   [63:0] add_ln19_2_fu_627_p2;
wire   [61:0] trunc_ln19_2_fu_632_p4;
wire   [63:0] add_ln19_3_fu_652_p2;
wire   [61:0] trunc_ln19_3_fu_657_p4;
wire   [63:0] add_ln19_4_fu_677_p2;
wire   [61:0] trunc_ln19_4_fu_682_p4;
wire   [63:0] add_ln19_5_fu_702_p2;
wire   [61:0] trunc_ln19_5_fu_707_p4;
wire   [63:0] add_ln19_6_fu_727_p2;
wire   [61:0] trunc_ln19_6_fu_732_p4;
wire   [63:0] add_ln19_7_fu_752_p2;
wire   [61:0] trunc_ln19_7_fu_757_p4;
wire   [63:0] add_ln19_8_fu_777_p2;
wire   [61:0] trunc_ln19_8_fu_782_p4;
wire   [63:0] add_ln19_9_fu_802_p2;
wire   [61:0] trunc_ln19_9_fu_807_p4;
wire   [63:0] add_ln19_10_fu_836_p2;
wire   [61:0] trunc_ln19_s_fu_841_p4;
wire   [63:0] add_ln19_11_fu_870_p2;
wire   [61:0] trunc_ln19_10_fu_875_p4;
wire   [63:0] add_ln19_12_fu_904_p2;
wire   [61:0] trunc_ln19_11_fu_909_p4;
wire   [63:0] add_ln19_13_fu_938_p2;
wire   [61:0] trunc_ln19_12_fu_943_p4;
wire   [63:0] add_ln19_14_fu_972_p2;
wire   [61:0] trunc_ln19_13_fu_977_p4;
wire   [63:0] add_ln19_15_fu_997_p2;
wire   [61:0] trunc_ln19_14_fu_1002_p4;
wire   [61:0] trunc_ln_fu_1139_p4;
reg    grp_fu_412_ce;
reg    grp_fu_417_ce;
wire    ap_CS_fsm_state88;
reg   [17:0] ap_NS_fsm;
reg    ap_ST_fsm_state1_blk;
wire    ap_ST_fsm_state88_blk;
reg    ap_block_pp0_stage1_subdone;
reg    ap_block_pp0_stage2_subdone;
reg    ap_block_pp0_stage3_subdone;
reg    ap_block_pp0_stage4_subdone;
reg    ap_block_pp0_stage6_subdone;
reg    ap_block_pp0_stage7_subdone;
reg    ap_block_pp0_stage8_subdone;
reg    ap_block_pp0_stage9_subdone;
reg    ap_block_pp0_stage10_subdone;
reg    ap_block_pp0_stage11_subdone;
reg    ap_block_pp0_stage12_subdone;
reg    ap_block_pp0_stage13_subdone;
reg    ap_block_pp0_stage14_subdone;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 18'd1;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
end

matmul_plain_ctrl_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_CTRL_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_CTRL_DATA_WIDTH ))
ctrl_s_axi_U(
    .AWVALID(s_axi_ctrl_AWVALID),
    .AWREADY(s_axi_ctrl_AWREADY),
    .AWADDR(s_axi_ctrl_AWADDR),
    .WVALID(s_axi_ctrl_WVALID),
    .WREADY(s_axi_ctrl_WREADY),
    .WDATA(s_axi_ctrl_WDATA),
    .WSTRB(s_axi_ctrl_WSTRB),
    .ARVALID(s_axi_ctrl_ARVALID),
    .ARREADY(s_axi_ctrl_ARREADY),
    .ARADDR(s_axi_ctrl_ARADDR),
    .RVALID(s_axi_ctrl_RVALID),
    .RREADY(s_axi_ctrl_RREADY),
    .RDATA(s_axi_ctrl_RDATA),
    .RRESP(s_axi_ctrl_RRESP),
    .BVALID(s_axi_ctrl_BVALID),
    .BREADY(s_axi_ctrl_BREADY),
    .BRESP(s_axi_ctrl_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .A(A),
    .B(B),
    .AB(AB),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle)
);

matmul_plain_dataA_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATAA_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATAA_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATAA_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATAA_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATAA_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATAA_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATAA_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATAA_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATAA_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATAA_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATAA_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
dataA_m_axi_U(
    .AWVALID(m_axi_dataA_AWVALID),
    .AWREADY(m_axi_dataA_AWREADY),
    .AWADDR(m_axi_dataA_AWADDR),
    .AWID(m_axi_dataA_AWID),
    .AWLEN(m_axi_dataA_AWLEN),
    .AWSIZE(m_axi_dataA_AWSIZE),
    .AWBURST(m_axi_dataA_AWBURST),
    .AWLOCK(m_axi_dataA_AWLOCK),
    .AWCACHE(m_axi_dataA_AWCACHE),
    .AWPROT(m_axi_dataA_AWPROT),
    .AWQOS(m_axi_dataA_AWQOS),
    .AWREGION(m_axi_dataA_AWREGION),
    .AWUSER(m_axi_dataA_AWUSER),
    .WVALID(m_axi_dataA_WVALID),
    .WREADY(m_axi_dataA_WREADY),
    .WDATA(m_axi_dataA_WDATA),
    .WSTRB(m_axi_dataA_WSTRB),
    .WLAST(m_axi_dataA_WLAST),
    .WID(m_axi_dataA_WID),
    .WUSER(m_axi_dataA_WUSER),
    .ARVALID(m_axi_dataA_ARVALID),
    .ARREADY(m_axi_dataA_ARREADY),
    .ARADDR(m_axi_dataA_ARADDR),
    .ARID(m_axi_dataA_ARID),
    .ARLEN(m_axi_dataA_ARLEN),
    .ARSIZE(m_axi_dataA_ARSIZE),
    .ARBURST(m_axi_dataA_ARBURST),
    .ARLOCK(m_axi_dataA_ARLOCK),
    .ARCACHE(m_axi_dataA_ARCACHE),
    .ARPROT(m_axi_dataA_ARPROT),
    .ARQOS(m_axi_dataA_ARQOS),
    .ARREGION(m_axi_dataA_ARREGION),
    .ARUSER(m_axi_dataA_ARUSER),
    .RVALID(m_axi_dataA_RVALID),
    .RREADY(m_axi_dataA_RREADY),
    .RDATA(m_axi_dataA_RDATA),
    .RLAST(m_axi_dataA_RLAST),
    .RID(m_axi_dataA_RID),
    .RUSER(m_axi_dataA_RUSER),
    .RRESP(m_axi_dataA_RRESP),
    .BVALID(m_axi_dataA_BVALID),
    .BREADY(m_axi_dataA_BREADY),
    .BRESP(m_axi_dataA_BRESP),
    .BID(m_axi_dataA_BID),
    .BUSER(m_axi_dataA_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(dataA_ARVALID),
    .I_ARREADY(dataA_ARREADY),
    .I_ARADDR(dataA_addr_reg_1219),
    .I_ARLEN(32'd16),
    .I_RVALID(dataA_RVALID),
    .I_RREADY(dataA_RREADY),
    .I_RDATA(dataA_RDATA),
    .I_RFIFONUM(dataA_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(dataA_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(dataA_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(dataA_BVALID),
    .I_BREADY(1'b0)
);

matmul_plain_dataAB_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATAAB_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATAAB_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATAAB_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATAAB_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATAAB_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATAAB_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATAAB_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATAAB_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATAAB_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATAAB_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATAAB_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
dataAB_m_axi_U(
    .AWVALID(m_axi_dataAB_AWVALID),
    .AWREADY(m_axi_dataAB_AWREADY),
    .AWADDR(m_axi_dataAB_AWADDR),
    .AWID(m_axi_dataAB_AWID),
    .AWLEN(m_axi_dataAB_AWLEN),
    .AWSIZE(m_axi_dataAB_AWSIZE),
    .AWBURST(m_axi_dataAB_AWBURST),
    .AWLOCK(m_axi_dataAB_AWLOCK),
    .AWCACHE(m_axi_dataAB_AWCACHE),
    .AWPROT(m_axi_dataAB_AWPROT),
    .AWQOS(m_axi_dataAB_AWQOS),
    .AWREGION(m_axi_dataAB_AWREGION),
    .AWUSER(m_axi_dataAB_AWUSER),
    .WVALID(m_axi_dataAB_WVALID),
    .WREADY(m_axi_dataAB_WREADY),
    .WDATA(m_axi_dataAB_WDATA),
    .WSTRB(m_axi_dataAB_WSTRB),
    .WLAST(m_axi_dataAB_WLAST),
    .WID(m_axi_dataAB_WID),
    .WUSER(m_axi_dataAB_WUSER),
    .ARVALID(m_axi_dataAB_ARVALID),
    .ARREADY(m_axi_dataAB_ARREADY),
    .ARADDR(m_axi_dataAB_ARADDR),
    .ARID(m_axi_dataAB_ARID),
    .ARLEN(m_axi_dataAB_ARLEN),
    .ARSIZE(m_axi_dataAB_ARSIZE),
    .ARBURST(m_axi_dataAB_ARBURST),
    .ARLOCK(m_axi_dataAB_ARLOCK),
    .ARCACHE(m_axi_dataAB_ARCACHE),
    .ARPROT(m_axi_dataAB_ARPROT),
    .ARQOS(m_axi_dataAB_ARQOS),
    .ARREGION(m_axi_dataAB_ARREGION),
    .ARUSER(m_axi_dataAB_ARUSER),
    .RVALID(m_axi_dataAB_RVALID),
    .RREADY(m_axi_dataAB_RREADY),
    .RDATA(m_axi_dataAB_RDATA),
    .RLAST(m_axi_dataAB_RLAST),
    .RID(m_axi_dataAB_RID),
    .RUSER(m_axi_dataAB_RUSER),
    .RRESP(m_axi_dataAB_RRESP),
    .BVALID(m_axi_dataAB_BVALID),
    .BREADY(m_axi_dataAB_BREADY),
    .BRESP(m_axi_dataAB_BRESP),
    .BID(m_axi_dataAB_BID),
    .BUSER(m_axi_dataAB_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(dataAB_ARREADY),
    .I_ARADDR(64'd0),
    .I_ARLEN(32'd0),
    .I_RVALID(dataAB_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(dataAB_RDATA),
    .I_RFIFONUM(dataAB_RFIFONUM),
    .I_AWVALID(dataAB_AWVALID),
    .I_AWREADY(dataAB_AWREADY),
    .I_AWADDR(sext_ln15_fu_1148_p1),
    .I_AWLEN(32'd256),
    .I_WVALID(dataAB_WVALID),
    .I_WREADY(dataAB_WREADY),
    .I_WDATA(dataAB_WDATA),
    .I_WSTRB(4'd15),
    .I_BVALID(dataAB_BVALID),
    .I_BREADY(dataAB_BREADY)
);

matmul_plain_dataB_m_axi #(
    .CONSERVATIVE( 1 ),
    .USER_MAXREQS( 5 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_DATAB_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_DATAB_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_DATAB_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_DATAB_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_DATAB_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_DATAB_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_DATAB_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_DATAB_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_DATAB_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_DATAB_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_DATAB_CACHE_VALUE ),
    .USER_RFIFONUM_WIDTH( 9 ),
    .USER_DW( 32 ),
    .USER_AW( 64 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ))
dataB_m_axi_U(
    .AWVALID(m_axi_dataB_AWVALID),
    .AWREADY(m_axi_dataB_AWREADY),
    .AWADDR(m_axi_dataB_AWADDR),
    .AWID(m_axi_dataB_AWID),
    .AWLEN(m_axi_dataB_AWLEN),
    .AWSIZE(m_axi_dataB_AWSIZE),
    .AWBURST(m_axi_dataB_AWBURST),
    .AWLOCK(m_axi_dataB_AWLOCK),
    .AWCACHE(m_axi_dataB_AWCACHE),
    .AWPROT(m_axi_dataB_AWPROT),
    .AWQOS(m_axi_dataB_AWQOS),
    .AWREGION(m_axi_dataB_AWREGION),
    .AWUSER(m_axi_dataB_AWUSER),
    .WVALID(m_axi_dataB_WVALID),
    .WREADY(m_axi_dataB_WREADY),
    .WDATA(m_axi_dataB_WDATA),
    .WSTRB(m_axi_dataB_WSTRB),
    .WLAST(m_axi_dataB_WLAST),
    .WID(m_axi_dataB_WID),
    .WUSER(m_axi_dataB_WUSER),
    .ARVALID(m_axi_dataB_ARVALID),
    .ARREADY(m_axi_dataB_ARREADY),
    .ARADDR(m_axi_dataB_ARADDR),
    .ARID(m_axi_dataB_ARID),
    .ARLEN(m_axi_dataB_ARLEN),
    .ARSIZE(m_axi_dataB_ARSIZE),
    .ARBURST(m_axi_dataB_ARBURST),
    .ARLOCK(m_axi_dataB_ARLOCK),
    .ARCACHE(m_axi_dataB_ARCACHE),
    .ARPROT(m_axi_dataB_ARPROT),
    .ARQOS(m_axi_dataB_ARQOS),
    .ARREGION(m_axi_dataB_ARREGION),
    .ARUSER(m_axi_dataB_ARUSER),
    .RVALID(m_axi_dataB_RVALID),
    .RREADY(m_axi_dataB_RREADY),
    .RDATA(m_axi_dataB_RDATA),
    .RLAST(m_axi_dataB_RLAST),
    .RID(m_axi_dataB_RID),
    .RUSER(m_axi_dataB_RUSER),
    .RRESP(m_axi_dataB_RRESP),
    .BVALID(m_axi_dataB_BVALID),
    .BREADY(m_axi_dataB_BREADY),
    .BRESP(m_axi_dataB_BRESP),
    .BID(m_axi_dataB_BID),
    .BUSER(m_axi_dataB_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(dataB_ARVALID),
    .I_ARREADY(dataB_ARREADY),
    .I_ARADDR(dataB_ARADDR),
    .I_ARLEN(32'd1),
    .I_RVALID(dataB_RVALID),
    .I_RREADY(dataB_RREADY),
    .I_RDATA(dataB_RDATA),
    .I_RFIFONUM(dataB_RFIFONUM),
    .I_AWVALID(1'b0),
    .I_AWREADY(dataB_AWREADY),
    .I_AWADDR(64'd0),
    .I_AWLEN(32'd0),
    .I_WVALID(1'b0),
    .I_WREADY(dataB_WREADY),
    .I_WDATA(32'd0),
    .I_WSTRB(4'd0),
    .I_BVALID(dataB_BVALID),
    .I_BREADY(1'b0)
);

matmul_plain_fadd_32ns_32ns_32_4_full_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fadd_32ns_32ns_32_4_full_dsp_1_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_412_p0),
    .din1(grp_fu_412_p1),
    .ce(grp_fu_412_ce),
    .dout(grp_fu_412_p2)
);

matmul_plain_fmul_32ns_32ns_32_3_max_dsp_1 #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fmul_32ns_32ns_32_3_max_dsp_1_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_417_p0),
    .din1(grp_fu_417_p1),
    .ce(grp_fu_417_ce),
    .dout(grp_fu_417_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_condition_pp0_exit_iter0_state2))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((((ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage15_subdone) & (1'b1 == ap_CS_fsm_pp0_stage15)))) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
            ap_enable_reg_pp0_iter5 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        first_iter_0_reg_398 <= 1'd0;
    end else if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        first_iter_0_reg_398 <= 1'd1;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        i_fu_152 <= 5'd0;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        i_fu_152 <= select_ln15_1_reg_1214;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        indvar_flatten_fu_156 <= 9'd0;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        indvar_flatten_fu_156 <= add_ln15_reg_1204;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
        j_fu_148 <= 5'd0;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        j_fu_148 <= add_ln16_fu_1031_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state1)) begin
        AB_read_reg_1185 <= AB;
        A_read_reg_1195 <= A;
        B_read_reg_1190 <= B;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln15_reg_1204 <= add_ln15_fu_474_p2;
        dataB_addr_7_read_reg_1474 <= dataB_RDATA;
        first_iter_0_reg_398_pp0_iter1_reg <= first_iter_0_reg_398;
        first_iter_0_reg_398_pp0_iter2_reg <= first_iter_0_reg_398_pp0_iter1_reg;
        first_iter_0_reg_398_pp0_iter3_reg <= first_iter_0_reg_398_pp0_iter2_reg;
        first_iter_0_reg_398_pp0_iter4_reg <= first_iter_0_reg_398_pp0_iter3_reg;
        icmp_ln15_1_reg_1250_pp0_iter1_reg <= icmp_ln15_1_reg_1250;
        icmp_ln15_1_reg_1250_pp0_iter2_reg <= icmp_ln15_1_reg_1250_pp0_iter1_reg;
        icmp_ln15_1_reg_1250_pp0_iter3_reg <= icmp_ln15_1_reg_1250_pp0_iter2_reg;
        icmp_ln15_1_reg_1250_pp0_iter4_reg <= icmp_ln15_1_reg_1250_pp0_iter3_reg;
        icmp_ln15_1_reg_1250_pp0_iter5_reg <= icmp_ln15_1_reg_1250_pp0_iter4_reg;
        icmp_ln15_reg_1200 <= icmp_ln15_fu_468_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_fu_468_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        add_ln19_reg_1225 <= add_ln19_fu_571_p2;
        dataA_addr_reg_1219 <= sext_ln15_1_fu_545_p1;
        dataB_addr_reg_1244 <= sext_ln19_fu_586_p1;
        icmp_ln15_1_reg_1250 <= icmp_ln15_1_fu_596_p2;
        select_ln15_1_reg_1214 <= select_ln15_1_fu_506_p3;
        select_ln15_reg_1209 <= select_ln15_fu_492_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataB_addr_10_read_reg_1534 <= dataB_RDATA;
        mul_7_reg_1519_pp0_iter2_reg <= mul_7_reg_1519;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        dataB_addr_10_reg_1328 <= sext_ln19_10_fu_851_p1;
        dataB_addr_1_read_reg_1323 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        dataB_addr_11_read_reg_1554 <= dataB_RDATA;
        mul_8_reg_1539_pp0_iter2_reg <= mul_8_reg_1539;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        dataB_addr_11_reg_1349 <= sext_ln19_11_fu_885_p1;
        dataB_addr_2_read_reg_1344 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataB_addr_12_read_reg_1574 <= dataB_RDATA;
        mul_9_reg_1559_pp0_iter2_reg <= mul_9_reg_1559;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        dataB_addr_12_reg_1375 <= sext_ln19_12_fu_919_p1;
        dataB_addr_3_read_reg_1370 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        dataB_addr_13_read_reg_1594 <= dataB_RDATA;
        mul_s_reg_1579_pp0_iter2_reg <= mul_s_reg_1579;
        mul_s_reg_1579_pp0_iter3_reg <= mul_s_reg_1579_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        dataB_addr_13_reg_1401 <= sext_ln19_13_fu_953_p1;
        dataB_addr_4_read_reg_1396 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        dataB_addr_14_read_reg_1614 <= dataB_RDATA;
        mul_10_reg_1599_pp0_iter2_reg <= mul_10_reg_1599;
        mul_10_reg_1599_pp0_iter3_reg <= mul_10_reg_1599_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        dataB_addr_14_reg_1427 <= sext_ln19_14_fu_987_p1;
        dataB_addr_15_reg_1433 <= sext_ln19_15_fu_1012_p1;
        dataB_addr_5_read_reg_1422 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        dataB_addr_15_read_reg_1634 <= dataB_RDATA;
        mul_11_reg_1619_pp0_iter2_reg <= mul_11_reg_1619;
        mul_11_reg_1619_pp0_iter3_reg <= mul_11_reg_1619_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataB_addr_1_reg_1254 <= sext_ln19_1_fu_617_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataB_addr_2_reg_1260 <= sext_ln19_2_fu_642_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataB_addr_3_reg_1266 <= sext_ln19_3_fu_667_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        dataB_addr_4_reg_1272 <= sext_ln19_4_fu_692_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataB_addr_5_reg_1278 <= sext_ln19_5_fu_717_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataB_addr_6_read_reg_1454 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        dataB_addr_6_reg_1284 <= sext_ln19_6_fu_742_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        dataB_addr_7_reg_1290 <= sext_ln19_7_fu_767_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataB_addr_8_read_reg_1494 <= dataB_RDATA;
        mul_5_reg_1479_pp0_iter2_reg <= mul_5_reg_1479;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        dataB_addr_8_reg_1296 <= sext_ln19_8_fu_792_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataB_addr_9_read_reg_1514 <= dataB_RDATA;
        mul_6_reg_1499_pp0_iter2_reg <= mul_6_reg_1499;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        dataB_addr_9_reg_1307 <= sext_ln19_9_fu_817_p1;
        dataB_addr_read_reg_1302 <= dataB_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        mul_10_reg_1599 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        mul_11_reg_1619 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_12_reg_1639 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        mul_12_reg_1639_pp0_iter2_reg <= mul_12_reg_1639;
        mul_12_reg_1639_pp0_iter3_reg <= mul_12_reg_1639_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_13_reg_1654 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        mul_13_reg_1654_pp0_iter2_reg <= mul_13_reg_1654;
        mul_13_reg_1654_pp0_iter3_reg <= mul_13_reg_1654_pp0_iter2_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        mul_14_reg_1659 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        mul_14_reg_1659_pp0_iter2_reg <= mul_14_reg_1659;
        mul_14_reg_1659_pp0_iter3_reg <= mul_14_reg_1659_pp0_iter2_reg;
        mul_14_reg_1659_pp0_iter4_reg <= mul_14_reg_1659_pp0_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        mul_1_reg_1381 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        mul_2_reg_1407 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        mul_3_reg_1439 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        mul_4_reg_1459 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        mul_5_reg_1479 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        mul_6_reg_1499 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        mul_7_reg_1519 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        mul_8_reg_1539 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        mul_9_reg_1559 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        mul_reg_1355 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        mul_s_reg_1579 <= grp_fu_417_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) 
    & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        reg_421 <= dataA_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        reg_425 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        reg_430 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        reg_435 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        reg_440 <= grp_fu_412_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)))) begin
        reg_445 <= grp_fu_412_p2;
    end
end

always @ (*) begin
    if ((ap_start == 1'b0)) begin
        ap_ST_fsm_state1_blk = 1'b1;
    end else begin
        ap_ST_fsm_state1_blk = 1'b0;
    end
end

assign ap_ST_fsm_state88_blk = 1'b0;

always @ (*) begin
    if ((icmp_ln15_fu_468_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state2 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state2 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state88)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_398_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataAB_AWVALID = 1'b1;
    end else begin
        dataAB_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_1_reg_1250_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataAB_BREADY = 1'b1;
    end else begin
        dataAB_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataAB_WVALID = 1'b1;
    end else begin
        dataAB_WVALID = 1'b0;
    end
end

always @ (*) begin
    if (((first_iter_0_reg_398_pp0_iter4_reg == 1'd1) & (ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataAB_blk_n_AW = m_axi_dataAB_AWREADY;
    end else begin
        dataAB_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln15_1_reg_1250_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataAB_blk_n_B = m_axi_dataAB_BVALID;
    end else begin
        dataAB_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter5 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataAB_blk_n_W = m_axi_dataAB_WREADY;
    end else begin
        dataAB_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA_ARVALID = 1'b1;
    end else begin
        dataA_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) 
    & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataA_RREADY = 1'b1;
    end else begin
        dataA_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataA_blk_n_AR = m_axi_dataA_ARREADY;
    end else begin
        dataA_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) 
    & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataA_blk_n_R = m_axi_dataA_RVALID;
    end else begin
        dataA_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        dataB_ARADDR = dataB_addr_15_reg_1433;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        dataB_ARADDR = dataB_addr_14_reg_1427;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        dataB_ARADDR = dataB_addr_13_reg_1401;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        dataB_ARADDR = dataB_addr_12_reg_1375;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        dataB_ARADDR = dataB_addr_11_reg_1349;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        dataB_ARADDR = dataB_addr_10_reg_1328;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        dataB_ARADDR = dataB_addr_9_reg_1307;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        dataB_ARADDR = dataB_addr_8_reg_1296;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        dataB_ARADDR = dataB_addr_7_reg_1290;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        dataB_ARADDR = dataB_addr_6_reg_1284;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        dataB_ARADDR = dataB_addr_5_reg_1278;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        dataB_ARADDR = dataB_addr_4_reg_1272;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        dataB_ARADDR = dataB_addr_3_reg_1266;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        dataB_ARADDR = dataB_addr_2_reg_1260;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        dataB_ARADDR = dataB_addr_1_reg_1254;
    end else if (((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        dataB_ARADDR = dataB_addr_reg_1244;
    end else begin
        dataB_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage8_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage7_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage6_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage5_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage4_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage3_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter0 
    == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) 
    | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataB_ARVALID = 1'b1;
    end else begin
        dataB_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15_11001) 
    & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataB_RREADY = 1'b1;
    end else begin
        dataB_RREADY = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage8) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage7) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage6) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage5) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage4) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage3) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2)) 
    | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 
    == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        dataB_blk_n_AR = m_axi_dataB_ARREADY;
    end else begin
        dataB_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) 
    & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10)) | ((icmp_ln15_reg_1200 == 1'd0) & (1'b0 == ap_block_pp0_stage9) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage9)))) begin
        dataB_blk_n_R = m_axi_dataB_RVALID;
    end else begin
        dataB_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) 
    | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_412_ce = 1'b1;
    end else begin
        grp_fu_412_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12)))) begin
        grp_fu_412_p0 = reg_445;
    end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_412_p0 = reg_440;
    end else if ((((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10)))) begin
        grp_fu_412_p0 = reg_435;
    end else if ((((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14)))) begin
        grp_fu_412_p0 = reg_430;
    end else if ((((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1)))) begin
        grp_fu_412_p0 = reg_425;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_412_p0 = mul_reg_1355;
    end else begin
        grp_fu_412_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage12) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_412_p1 = mul_14_reg_1659_pp0_iter4_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_412_p1 = mul_13_reg_1654_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_412_p1 = mul_12_reg_1639_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_412_p1 = mul_11_reg_1619_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage11) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_412_p1 = mul_10_reg_1599_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_412_p1 = mul_s_reg_1579_pp0_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_412_p1 = mul_9_reg_1559_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage15) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_412_p1 = mul_8_reg_1539_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage10) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_412_p1 = mul_7_reg_1519_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_412_p1 = mul_6_reg_1499_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_412_p1 = mul_5_reg_1479_pp0_iter2_reg;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage14) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_412_p1 = mul_4_reg_1459;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_412_p1 = mul_3_reg_1439;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_412_p1 = mul_2_reg_1407;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_412_p1 = mul_1_reg_1381;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_412_p1 = 32'd0;
    end else begin
        grp_fu_412_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage8_11001) & (1'b1 == ap_CS_fsm_pp0_stage8)) | ((1'b0 == ap_block_pp0_stage7_11001) & (1'b1 == ap_CS_fsm_pp0_stage7)) | ((1'b0 == ap_block_pp0_stage6_11001) & (1'b1 == ap_CS_fsm_pp0_stage6)) | ((1'b0 == ap_block_pp0_stage5_11001) & (1'b1 == ap_CS_fsm_pp0_stage5)) | ((1'b0 == ap_block_pp0_stage4_11001) & (1'b1 == ap_CS_fsm_pp0_stage4)) | ((1'b0 == ap_block_pp0_stage3_11001) & (1'b1 == ap_CS_fsm_pp0_stage3)) | ((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage15_11001) & (1'b1 == ap_CS_fsm_pp0_stage15)) | ((1'b0 == ap_block_pp0_stage14_11001) & (1'b1 == ap_CS_fsm_pp0_stage14)) | ((1'b0 == ap_block_pp0_stage13_11001) & (1'b1 == ap_CS_fsm_pp0_stage13)) | ((1'b0 == ap_block_pp0_stage12_11001) & (1'b1 == ap_CS_fsm_pp0_stage12)) | ((1'b0 == ap_block_pp0_stage11_11001) & (1'b1 == ap_CS_fsm_pp0_stage11)) | ((1'b0 == ap_block_pp0_stage10_11001) & (1'b1 == ap_CS_fsm_pp0_stage10)) 
    | ((1'b0 == ap_block_pp0_stage9_11001) & (1'b1 == ap_CS_fsm_pp0_stage9)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_417_ce = 1'b1;
    end else begin
        grp_fu_417_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_417_p0 = bitcast_ln19_15_fu_1130_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_417_p0 = bitcast_ln19_14_fu_1121_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_417_p0 = bitcast_ln19_13_fu_1112_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_417_p0 = bitcast_ln19_27_fu_1103_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_417_p0 = bitcast_ln19_11_fu_1094_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_417_p0 = bitcast_ln19_10_fu_1085_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_417_p0 = bitcast_ln19_9_fu_1076_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_417_p0 = bitcast_ln19_8_fu_1067_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_417_p0 = bitcast_ln19_7_fu_1058_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_417_p0 = bitcast_ln19_6_fu_1049_p1;
    end else if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_417_p0 = bitcast_ln19_5_fu_1022_p1;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_417_p0 = bitcast_ln19_4_fu_963_p1;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_417_p0 = bitcast_ln19_3_fu_929_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_417_p0 = bitcast_ln19_2_fu_895_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_417_p0 = bitcast_ln19_12_fu_861_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_417_p0 = bitcast_ln19_fu_827_p1;
    end else begin
        grp_fu_417_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage9) & (1'b1 == ap_CS_fsm_pp0_stage9))) begin
        grp_fu_417_p1 = bitcast_ln19_31_fu_1135_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage8) & (1'b1 == ap_CS_fsm_pp0_stage8))) begin
        grp_fu_417_p1 = bitcast_ln19_30_fu_1126_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage7) & (1'b1 == ap_CS_fsm_pp0_stage7))) begin
        grp_fu_417_p1 = bitcast_ln19_29_fu_1117_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage6) & (1'b1 == ap_CS_fsm_pp0_stage6))) begin
        grp_fu_417_p1 = bitcast_ln19_28_fu_1108_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage5) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
        grp_fu_417_p1 = bitcast_ln19_26_fu_1099_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage4) & (1'b1 == ap_CS_fsm_pp0_stage4))) begin
        grp_fu_417_p1 = bitcast_ln19_25_fu_1090_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage3) & (1'b1 == ap_CS_fsm_pp0_stage3))) begin
        grp_fu_417_p1 = bitcast_ln19_24_fu_1081_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage2) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        grp_fu_417_p1 = bitcast_ln19_23_fu_1072_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        grp_fu_417_p1 = bitcast_ln19_22_fu_1063_p1;
    end else if (((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        grp_fu_417_p1 = bitcast_ln19_21_fu_1054_p1;
    end else if (((1'b0 == ap_block_pp0_stage15) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage15))) begin
        grp_fu_417_p1 = bitcast_ln19_20_fu_1027_p1;
    end else if (((1'b0 == ap_block_pp0_stage14) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage14))) begin
        grp_fu_417_p1 = bitcast_ln19_19_fu_968_p1;
    end else if (((1'b0 == ap_block_pp0_stage13) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage13))) begin
        grp_fu_417_p1 = bitcast_ln19_18_fu_934_p1;
    end else if (((1'b0 == ap_block_pp0_stage12) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage12))) begin
        grp_fu_417_p1 = bitcast_ln19_17_fu_900_p1;
    end else if (((1'b0 == ap_block_pp0_stage11) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage11))) begin
        grp_fu_417_p1 = bitcast_ln19_16_fu_866_p1;
    end else if (((1'b0 == ap_block_pp0_stage10) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage10))) begin
        grp_fu_417_p1 = bitcast_ln19_1_fu_832_p1;
    end else begin
        grp_fu_417_p1 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((ap_start == 1'b1) & (1'b1 == ap_CS_fsm_state1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((icmp_ln15_fu_468_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else if (((icmp_ln15_fu_468_p2 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b0) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        ap_ST_fsm_pp0_stage3 : begin
            if ((1'b0 == ap_block_pp0_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage3;
            end
        end
        ap_ST_fsm_pp0_stage4 : begin
            if ((1'b0 == ap_block_pp0_stage4_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage4;
            end
        end
        ap_ST_fsm_pp0_stage5 : begin
            if ((~((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5)) & (1'b0 == ap_block_pp0_stage5_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end else if (((ap_enable_reg_pp0_iter5 == 1'b1) & (ap_enable_reg_pp0_iter4 == 1'b0) & (1'b0 == ap_block_pp0_stage5_subdone) & (1'b1 == ap_CS_fsm_pp0_stage5))) begin
                ap_NS_fsm = ap_ST_fsm_state88;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage5;
            end
        end
        ap_ST_fsm_pp0_stage6 : begin
            if ((1'b0 == ap_block_pp0_stage6_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage6;
            end
        end
        ap_ST_fsm_pp0_stage7 : begin
            if ((1'b0 == ap_block_pp0_stage7_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage7;
            end
        end
        ap_ST_fsm_pp0_stage8 : begin
            if ((1'b0 == ap_block_pp0_stage8_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage8;
            end
        end
        ap_ST_fsm_pp0_stage9 : begin
            if ((1'b0 == ap_block_pp0_stage9_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage9;
            end
        end
        ap_ST_fsm_pp0_stage10 : begin
            if ((1'b0 == ap_block_pp0_stage10_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage10;
            end
        end
        ap_ST_fsm_pp0_stage11 : begin
            if ((1'b0 == ap_block_pp0_stage11_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage11;
            end
        end
        ap_ST_fsm_pp0_stage12 : begin
            if ((1'b0 == ap_block_pp0_stage12_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage12;
            end
        end
        ap_ST_fsm_pp0_stage13 : begin
            if ((1'b0 == ap_block_pp0_stage13_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage13;
            end
        end
        ap_ST_fsm_pp0_stage14 : begin
            if ((1'b0 == ap_block_pp0_stage14_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage14;
            end
        end
        ap_ST_fsm_pp0_stage15 : begin
            if ((1'b0 == ap_block_pp0_stage15_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage15;
            end
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln15_1_fu_530_p2 = (zext_ln15_fu_526_p1 + A_read_reg_1195);

assign add_ln15_2_fu_500_p2 = (i_fu_152 + 5'd1);

assign add_ln15_fu_474_p2 = (indvar_flatten_fu_156 + 9'd1);

assign add_ln16_fu_1031_p2 = (select_ln15_reg_1209 + 5'd1);

assign add_ln19_10_fu_836_p2 = (add_ln19_reg_1225 + 64'd640);

assign add_ln19_11_fu_870_p2 = (add_ln19_reg_1225 + 64'd704);

assign add_ln19_12_fu_904_p2 = (add_ln19_reg_1225 + 64'd768);

assign add_ln19_13_fu_938_p2 = (add_ln19_reg_1225 + 64'd832);

assign add_ln19_14_fu_972_p2 = (add_ln19_reg_1225 + 64'd896);

assign add_ln19_15_fu_997_p2 = (add_ln19_reg_1225 + 64'd960);

assign add_ln19_1_fu_602_p2 = (add_ln19_reg_1225 + 64'd64);

assign add_ln19_2_fu_627_p2 = (add_ln19_reg_1225 + 64'd128);

assign add_ln19_3_fu_652_p2 = (add_ln19_reg_1225 + 64'd192);

assign add_ln19_4_fu_677_p2 = (add_ln19_reg_1225 + 64'd256);

assign add_ln19_5_fu_702_p2 = (add_ln19_reg_1225 + 64'd320);

assign add_ln19_6_fu_727_p2 = (add_ln19_reg_1225 + 64'd384);

assign add_ln19_7_fu_752_p2 = (add_ln19_reg_1225 + 64'd448);

assign add_ln19_8_fu_777_p2 = (add_ln19_reg_1225 + 64'd512);

assign add_ln19_9_fu_802_p2 = (add_ln19_reg_1225 + 64'd576);

assign add_ln19_fu_571_p2 = (zext_ln19_fu_567_p1 + B_read_reg_1190);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_pp0_stage10 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_pp0_stage11 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_pp0_stage12 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_pp0_stage13 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_pp0_stage14 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_pp0_stage15 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_pp0_stage3 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_pp0_stage4 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_pp0_stage5 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_pp0_stage6 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_pp0_stage7 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_pp0_stage8 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_pp0_stage9 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd17];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = (((dataAB_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataB_ARREADY == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = (((dataAB_WREADY == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataB_ARREADY == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage10 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage10_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage10_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state12_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

assign ap_block_pp0_stage11 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage11_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage11_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state13_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

assign ap_block_pp0_stage12 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage12_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage12_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state14_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

assign ap_block_pp0_stage13 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage13_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage13_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state15_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

assign ap_block_pp0_stage14 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage14_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage14_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state16_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

assign ap_block_pp0_stage15 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage15_11001 = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state81_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage15_subdone = (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state81_io)) | ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state17_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)))));
end

always @ (*) begin
    ap_block_pp0_stage1_11001 = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = (((1'b1 == ap_block_state3_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = (((1'b1 == ap_block_state4_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage3_11001 = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage3_subdone = (((1'b1 == ap_block_state5_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage4_11001 = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage4_subdone = (((1'b1 == ap_block_state6_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage5_11001 = (((dataAB_BVALID == 1'b0) & (icmp_ln15_1_reg_1250_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage5_subdone = (((dataAB_BVALID == 1'b0) & (icmp_ln15_1_reg_1250_pp0_iter5_reg == 1'd1) & (ap_enable_reg_pp0_iter5 == 1'b1)) | ((1'b1 == ap_block_state7_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage6 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage6_11001 = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage6_subdone = (((1'b1 == ap_block_state8_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage7 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage7_11001 = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage7_subdone = (((1'b1 == ap_block_state9_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage8 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage8_11001 = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

always @ (*) begin
    ap_block_pp0_stage8_subdone = (((1'b1 == ap_block_state10_io) & (ap_enable_reg_pp0_iter0 == 1'b1)) | ((ap_enable_reg_pp0_iter1 == 1'b1) & ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0))));
end

assign ap_block_pp0_stage9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage9_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_pp0_stage9_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & ((1'b1 == ap_block_state11_io) | ((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0))));
end

always @ (*) begin
    ap_block_state10_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state10_pp0_stage8_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state11_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state11_pp0_stage9_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state12_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state12_pp0_stage10_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state13_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state13_pp0_stage11_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state14_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state14_pp0_stage12_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state15_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state15_pp0_stage13_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state16_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state16_pp0_stage14_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state17_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

always @ (*) begin
    ap_block_state17_pp0_stage15_iter0 = (((dataB_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataA_RVALID == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

always @ (*) begin
    ap_block_state18_pp0_stage0_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state19_pp0_stage1_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state20_pp0_stage2_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state21_pp0_stage3_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state22_pp0_stage4_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state23_pp0_stage5_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state24_pp0_stage6_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state25_pp0_stage7_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

always @ (*) begin
    ap_block_state26_pp0_stage8_iter1 = ((dataB_RVALID == 1'b0) | (dataA_RVALID == 1'b0));
end

assign ap_block_state27_pp0_stage9_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state28_pp0_stage10_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state29_pp0_stage11_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state2_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state30_pp0_stage12_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state31_pp0_stage13_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state32_pp0_stage14_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state33_pp0_stage15_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state34_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state35_pp0_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state36_pp0_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state37_pp0_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state38_pp0_stage4_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state39_pp0_stage5_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state3_io = (((dataA_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)) | ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0)));
end

assign ap_block_state3_pp0_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state40_pp0_stage6_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state41_pp0_stage7_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state42_pp0_stage8_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state43_pp0_stage9_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state44_pp0_stage10_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state45_pp0_stage11_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state46_pp0_stage12_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state47_pp0_stage13_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state48_pp0_stage14_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state49_pp0_stage15_iter2 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state4_pp0_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state50_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state51_pp0_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state52_pp0_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state53_pp0_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state54_pp0_stage4_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state55_pp0_stage5_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state56_pp0_stage6_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state57_pp0_stage7_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state58_pp0_stage8_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state59_pp0_stage9_iter3 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state5_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state5_pp0_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state60_pp0_stage10_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state61_pp0_stage11_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state62_pp0_stage12_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state63_pp0_stage13_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state64_pp0_stage14_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state65_pp0_stage15_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state66_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state67_pp0_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state68_pp0_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state69_pp0_stage3_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state6_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state6_pp0_stage4_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state70_pp0_stage4_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state71_pp0_stage5_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state72_pp0_stage6_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state73_pp0_stage7_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state74_pp0_stage8_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state75_pp0_stage9_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state76_pp0_stage10_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state77_pp0_stage11_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state78_pp0_stage12_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state79_pp0_stage13_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state7_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state7_pp0_stage5_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state80_pp0_stage14_iter4 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state81_io = ((dataAB_AWREADY == 1'b0) & (first_iter_0_reg_398_pp0_iter4_reg == 1'd1));
end

assign ap_block_state81_pp0_stage15_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state82_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state83_pp0_stage1_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state84_pp0_stage2_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state85_pp0_stage3_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state86_pp0_stage4_iter5 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state87_pp0_stage5_iter5 = ((dataAB_BVALID == 1'b0) & (icmp_ln15_1_reg_1250_pp0_iter5_reg == 1'd1));
end

always @ (*) begin
    ap_block_state8_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state8_pp0_stage6_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state9_io = ((dataB_ARREADY == 1'b0) & (icmp_ln15_reg_1200 == 1'd0));
end

assign ap_block_state9_pp0_stage7_iter0 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign bitcast_ln19_10_fu_1085_p1 = reg_421;

assign bitcast_ln19_11_fu_1094_p1 = reg_421;

assign bitcast_ln19_12_fu_861_p1 = reg_421;

assign bitcast_ln19_13_fu_1112_p1 = reg_421;

assign bitcast_ln19_14_fu_1121_p1 = reg_421;

assign bitcast_ln19_15_fu_1130_p1 = reg_421;

assign bitcast_ln19_16_fu_866_p1 = dataB_addr_1_read_reg_1323;

assign bitcast_ln19_17_fu_900_p1 = dataB_addr_2_read_reg_1344;

assign bitcast_ln19_18_fu_934_p1 = dataB_addr_3_read_reg_1370;

assign bitcast_ln19_19_fu_968_p1 = dataB_addr_4_read_reg_1396;

assign bitcast_ln19_1_fu_832_p1 = dataB_addr_read_reg_1302;

assign bitcast_ln19_20_fu_1027_p1 = dataB_addr_5_read_reg_1422;

assign bitcast_ln19_21_fu_1054_p1 = dataB_addr_6_read_reg_1454;

assign bitcast_ln19_22_fu_1063_p1 = dataB_addr_7_read_reg_1474;

assign bitcast_ln19_23_fu_1072_p1 = dataB_addr_8_read_reg_1494;

assign bitcast_ln19_24_fu_1081_p1 = dataB_addr_9_read_reg_1514;

assign bitcast_ln19_25_fu_1090_p1 = dataB_addr_10_read_reg_1534;

assign bitcast_ln19_26_fu_1099_p1 = dataB_addr_11_read_reg_1554;

assign bitcast_ln19_27_fu_1103_p1 = reg_421;

assign bitcast_ln19_28_fu_1108_p1 = dataB_addr_12_read_reg_1574;

assign bitcast_ln19_29_fu_1117_p1 = dataB_addr_13_read_reg_1594;

assign bitcast_ln19_2_fu_895_p1 = reg_421;

assign bitcast_ln19_30_fu_1126_p1 = dataB_addr_14_read_reg_1614;

assign bitcast_ln19_31_fu_1135_p1 = dataB_addr_15_read_reg_1634;

assign bitcast_ln19_3_fu_929_p1 = reg_421;

assign bitcast_ln19_4_fu_963_p1 = reg_421;

assign bitcast_ln19_5_fu_1022_p1 = reg_421;

assign bitcast_ln19_6_fu_1049_p1 = reg_421;

assign bitcast_ln19_7_fu_1058_p1 = reg_421;

assign bitcast_ln19_8_fu_1067_p1 = reg_421;

assign bitcast_ln19_9_fu_1076_p1 = reg_421;

assign bitcast_ln19_fu_827_p1 = reg_421;

assign dataAB_WDATA = reg_425;

assign icmp_ln15_1_fu_596_p2 = ((add_ln15_fu_474_p2 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln15_fu_468_p2 = ((indvar_flatten_fu_156 == 9'd256) ? 1'b1 : 1'b0);

assign icmp_ln16_fu_486_p2 = ((j_fu_148 == 5'd16) ? 1'b1 : 1'b0);

assign select_ln15_1_fu_506_p3 = ((icmp_ln16_fu_486_p2[0:0] == 1'b1) ? add_ln15_2_fu_500_p2 : i_fu_152);

assign select_ln15_fu_492_p3 = ((icmp_ln16_fu_486_p2[0:0] == 1'b1) ? 5'd0 : j_fu_148);

assign sext_ln15_1_fu_545_p1 = $signed(sext_ln18_mid2_v_fu_535_p4);

assign sext_ln15_fu_1148_p1 = $signed(trunc_ln_fu_1139_p4);

assign sext_ln18_mid2_v_fu_535_p4 = {{add_ln15_1_fu_530_p2[63:2]}};

assign sext_ln18_mid2_v_v_v_v_v_fu_518_p3 = {{trunc_ln15_fu_514_p1}, {6'd0}};

assign sext_ln19_10_fu_851_p1 = $signed(trunc_ln19_s_fu_841_p4);

assign sext_ln19_11_fu_885_p1 = $signed(trunc_ln19_10_fu_875_p4);

assign sext_ln19_12_fu_919_p1 = $signed(trunc_ln19_11_fu_909_p4);

assign sext_ln19_13_fu_953_p1 = $signed(trunc_ln19_12_fu_943_p4);

assign sext_ln19_14_fu_987_p1 = $signed(trunc_ln19_13_fu_977_p4);

assign sext_ln19_15_fu_1012_p1 = $signed(trunc_ln19_14_fu_1002_p4);

assign sext_ln19_1_fu_617_p1 = $signed(trunc_ln19_1_fu_607_p4);

assign sext_ln19_2_fu_642_p1 = $signed(trunc_ln19_2_fu_632_p4);

assign sext_ln19_3_fu_667_p1 = $signed(trunc_ln19_3_fu_657_p4);

assign sext_ln19_4_fu_692_p1 = $signed(trunc_ln19_4_fu_682_p4);

assign sext_ln19_5_fu_717_p1 = $signed(trunc_ln19_5_fu_707_p4);

assign sext_ln19_6_fu_742_p1 = $signed(trunc_ln19_6_fu_732_p4);

assign sext_ln19_7_fu_767_p1 = $signed(trunc_ln19_7_fu_757_p4);

assign sext_ln19_8_fu_792_p1 = $signed(trunc_ln19_8_fu_782_p4);

assign sext_ln19_9_fu_817_p1 = $signed(trunc_ln19_9_fu_807_p4);

assign sext_ln19_fu_586_p1 = $signed(trunc_ln1_fu_576_p4);

assign shl_ln_fu_559_p3 = {{trunc_ln19_fu_555_p1}, {2'd0}};

assign trunc_ln15_fu_514_p1 = select_ln15_1_fu_506_p3[3:0];

assign trunc_ln19_10_fu_875_p4 = {{add_ln19_11_fu_870_p2[63:2]}};

assign trunc_ln19_11_fu_909_p4 = {{add_ln19_12_fu_904_p2[63:2]}};

assign trunc_ln19_12_fu_943_p4 = {{add_ln19_13_fu_938_p2[63:2]}};

assign trunc_ln19_13_fu_977_p4 = {{add_ln19_14_fu_972_p2[63:2]}};

assign trunc_ln19_14_fu_1002_p4 = {{add_ln19_15_fu_997_p2[63:2]}};

assign trunc_ln19_1_fu_607_p4 = {{add_ln19_1_fu_602_p2[63:2]}};

assign trunc_ln19_2_fu_632_p4 = {{add_ln19_2_fu_627_p2[63:2]}};

assign trunc_ln19_3_fu_657_p4 = {{add_ln19_3_fu_652_p2[63:2]}};

assign trunc_ln19_4_fu_682_p4 = {{add_ln19_4_fu_677_p2[63:2]}};

assign trunc_ln19_5_fu_707_p4 = {{add_ln19_5_fu_702_p2[63:2]}};

assign trunc_ln19_6_fu_732_p4 = {{add_ln19_6_fu_727_p2[63:2]}};

assign trunc_ln19_7_fu_757_p4 = {{add_ln19_7_fu_752_p2[63:2]}};

assign trunc_ln19_8_fu_782_p4 = {{add_ln19_8_fu_777_p2[63:2]}};

assign trunc_ln19_9_fu_807_p4 = {{add_ln19_9_fu_802_p2[63:2]}};

assign trunc_ln19_fu_555_p1 = select_ln15_fu_492_p3[3:0];

assign trunc_ln19_s_fu_841_p4 = {{add_ln19_10_fu_836_p2[63:2]}};

assign trunc_ln1_fu_576_p4 = {{add_ln19_fu_571_p2[63:2]}};

assign trunc_ln_fu_1139_p4 = {{AB_read_reg_1185[63:2]}};

assign zext_ln15_fu_526_p1 = sext_ln18_mid2_v_v_v_v_v_fu_518_p3;

assign zext_ln19_fu_567_p1 = shl_ln_fu_559_p3;

endmodule //matmul_plain
