-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity fc6_hls is
generic (
    C_M_AXI_INPUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_INPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_INPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_INPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_WEIGHTS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_WEIGHTS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_WEIGHTS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIAS_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_BIAS_ID_WIDTH : INTEGER := 1;
    C_M_AXI_BIAS_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIAS_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BIAS_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIAS_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIAS_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_BIAS_BUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ADDR_WIDTH : INTEGER := 64;
    C_M_AXI_OUTPUT_R_ID_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_AWUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_OUTPUT_R_WUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_ARUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_RUSER_WIDTH : INTEGER := 1;
    C_M_AXI_OUTPUT_R_BUSER_WIDTH : INTEGER := 1;
    C_S_AXI_CTRL_BUS_ADDR_WIDTH : INTEGER := 4;
    C_S_AXI_CTRL_BUS_DATA_WIDTH : INTEGER := 32;
    C_S_AXI_CONTROL_ADDR_WIDTH : INTEGER := 6;
    C_S_AXI_CONTROL_DATA_WIDTH : INTEGER := 32;
    C_M_AXI_BIAS_USER_VALUE : INTEGER := 0;
    C_M_AXI_BIAS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_BIAS_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_INPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_INPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_OUTPUT_R_USER_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_PROT_VALUE : INTEGER := 0;
    C_M_AXI_OUTPUT_R_CACHE_VALUE : INTEGER := 3;
    C_M_AXI_WEIGHTS_USER_VALUE : INTEGER := 0;
    C_M_AXI_WEIGHTS_PROT_VALUE : INTEGER := 0;
    C_M_AXI_WEIGHTS_CACHE_VALUE : INTEGER := 3 );
port (
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_ID_WIDTH-1 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_INPUT_R_BUSER_WIDTH-1 downto 0);
    m_axi_WEIGHTS_AWVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_AWREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ADDR_WIDTH-1 downto 0);
    m_axi_WEIGHTS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_WEIGHTS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_WEIGHTS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_AWUSER_WIDTH-1 downto 0);
    m_axi_WEIGHTS_WVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_WREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH-1 downto 0);
    m_axi_WEIGHTS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH/8-1 downto 0);
    m_axi_WEIGHTS_WLAST : OUT STD_LOGIC;
    m_axi_WEIGHTS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_WEIGHTS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_WUSER_WIDTH-1 downto 0);
    m_axi_WEIGHTS_ARVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_ARREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ADDR_WIDTH-1 downto 0);
    m_axi_WEIGHTS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_WEIGHTS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_WEIGHTS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ARUSER_WIDTH-1 downto 0);
    m_axi_WEIGHTS_RVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_RREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_DATA_WIDTH-1 downto 0);
    m_axi_WEIGHTS_RLAST : IN STD_LOGIC;
    m_axi_WEIGHTS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_WEIGHTS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_RUSER_WIDTH-1 downto 0);
    m_axi_WEIGHTS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_BVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_BREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_ID_WIDTH-1 downto 0);
    m_axi_WEIGHTS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_WEIGHTS_BUSER_WIDTH-1 downto 0);
    m_axi_BIAS_AWVALID : OUT STD_LOGIC;
    m_axi_BIAS_AWREADY : IN STD_LOGIC;
    m_axi_BIAS_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_BIAS_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_ID_WIDTH-1 downto 0);
    m_axi_BIAS_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BIAS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_AWUSER_WIDTH-1 downto 0);
    m_axi_BIAS_WVALID : OUT STD_LOGIC;
    m_axi_BIAS_WREADY : IN STD_LOGIC;
    m_axi_BIAS_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_BIAS_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_DATA_WIDTH/8-1 downto 0);
    m_axi_BIAS_WLAST : OUT STD_LOGIC;
    m_axi_BIAS_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_ID_WIDTH-1 downto 0);
    m_axi_BIAS_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_WUSER_WIDTH-1 downto 0);
    m_axi_BIAS_ARVALID : OUT STD_LOGIC;
    m_axi_BIAS_ARREADY : IN STD_LOGIC;
    m_axi_BIAS_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_ADDR_WIDTH-1 downto 0);
    m_axi_BIAS_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_ID_WIDTH-1 downto 0);
    m_axi_BIAS_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_BIAS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_BIAS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_BIAS_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_BIAS_ARUSER_WIDTH-1 downto 0);
    m_axi_BIAS_RVALID : IN STD_LOGIC;
    m_axi_BIAS_RREADY : OUT STD_LOGIC;
    m_axi_BIAS_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_BIAS_DATA_WIDTH-1 downto 0);
    m_axi_BIAS_RLAST : IN STD_LOGIC;
    m_axi_BIAS_RID : IN STD_LOGIC_VECTOR (C_M_AXI_BIAS_ID_WIDTH-1 downto 0);
    m_axi_BIAS_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BIAS_RUSER_WIDTH-1 downto 0);
    m_axi_BIAS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_BVALID : IN STD_LOGIC;
    m_axi_BIAS_BREADY : OUT STD_LOGIC;
    m_axi_BIAS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_BIAS_BID : IN STD_LOGIC_VECTOR (C_M_AXI_BIAS_ID_WIDTH-1 downto 0);
    m_axi_BIAS_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BIAS_BUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_AWUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH/8-1 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_WUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ADDR_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ARUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_DATA_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_RUSER_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_ID_WIDTH-1 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_OUTPUT_R_BUSER_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_AWVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_AWREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_WREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH/8-1 downto 0);
    s_axi_CTRL_BUS_ARVALID : IN STD_LOGIC;
    s_axi_CTRL_BUS_ARREADY : OUT STD_LOGIC;
    s_axi_CTRL_BUS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_ADDR_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_RREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CTRL_BUS_DATA_WIDTH-1 downto 0);
    s_axi_CTRL_BUS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_CTRL_BUS_BVALID : OUT STD_LOGIC;
    s_axi_CTRL_BUS_BREADY : IN STD_LOGIC;
    s_axi_CTRL_BUS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    interrupt : OUT STD_LOGIC;
    s_axi_control_AWVALID : IN STD_LOGIC;
    s_axi_control_AWREADY : OUT STD_LOGIC;
    s_axi_control_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_WVALID : IN STD_LOGIC;
    s_axi_control_WREADY : OUT STD_LOGIC;
    s_axi_control_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH/8-1 downto 0);
    s_axi_control_ARVALID : IN STD_LOGIC;
    s_axi_control_ARREADY : OUT STD_LOGIC;
    s_axi_control_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_CONTROL_ADDR_WIDTH-1 downto 0);
    s_axi_control_RVALID : OUT STD_LOGIC;
    s_axi_control_RREADY : IN STD_LOGIC;
    s_axi_control_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_CONTROL_DATA_WIDTH-1 downto 0);
    s_axi_control_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_control_BVALID : OUT STD_LOGIC;
    s_axi_control_BREADY : IN STD_LOGIC;
    s_axi_control_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0) );
end;


architecture behav of fc6_hls is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "fc6_hls_fc6_hls,hls_ip_2023_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xck26-sfvc784-2LV-c,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.300000,HLS_SYN_LAT=3826,HLS_SYN_TPT=none,HLS_SYN_MEM=16,HLS_SYN_DSP=0,HLS_SYN_FF=5143,HLS_SYN_LUT=5025,HLS_VERSION=2023_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (31 downto 0) := "00000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (31 downto 0) := "00000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (31 downto 0) := "00000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (31 downto 0) := "00001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (31 downto 0) := "00010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (31 downto 0) := "00100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (31 downto 0) := "10000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant C_S_AXI_DATA_WIDTH : INTEGER := 32;
    constant C_M_AXI_DATA_WIDTH : INTEGER := 32;
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv9_0 : STD_LOGIC_VECTOR (8 downto 0) := "000000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv14_1E0 : STD_LOGIC_VECTOR (13 downto 0) := "00000111100000";
    constant ap_const_lv6_4 : STD_LOGIC_VECTOR (5 downto 0) := "000100";
    constant ap_const_lv4_2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal ap_ready : STD_LOGIC;
    signal input_r_r : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_r : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_r : STD_LOGIC_VECTOR (63 downto 0);
    signal output_r_r : STD_LOGIC_VECTOR (63 downto 0);
    signal INPUT_r_blk_n_AR : STD_LOGIC;
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal WEIGHTS_blk_n_AR : STD_LOGIC;
    signal BIAS_blk_n_AR : STD_LOGIC;
    signal BIAS_blk_n_R : STD_LOGIC;
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal OUTPUT_r_blk_n_AW : STD_LOGIC;
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal OUTPUT_r_blk_n_B : STD_LOGIC;
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal grp_fu_263_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_267 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal output_r_read_reg_565 : STD_LOGIC_VECTOR (63 downto 0);
    signal bias_read_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal weights_read_reg_577 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln_fu_271_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal trunc_ln_reg_595 : STD_LOGIC_VECTOR (61 downto 0);
    signal INPUT_r_addr_reg_601 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln24_1_reg_609 : STD_LOGIC_VECTOR (61 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal BIAS_addr_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal OUTPUT_r_addr_reg_621 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln24_2_reg_627 : STD_LOGIC_VECTOR (61 downto 0);
    signal BIAS_addr_1_reg_633 : STD_LOGIC_VECTOR (63 downto 0);
    signal OUTPUT_r_addr_1_reg_639 : STD_LOGIC_VECTOR (63 downto 0);
    signal BIAS_addr_read_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_fu_526_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal BIAS_addr_1_read_reg_668 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_2_fu_549_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_idle : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_ready : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WLAST : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_RREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_BREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WLAST : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_RREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_BREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_sum_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_sum_out_ap_vld : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_ce : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_ce : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_idle : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_ready : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WLAST : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_RREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_BREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WSTRB : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WLAST : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARID : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARSIZE : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARBURST : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARLOCK : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARCACHE : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARPROT : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARQOS : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARREGION : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARUSER : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_RREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_BREADY : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_sum_2_out : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_sum_2_out_ap_vld : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_ce : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_ce : STD_LOGIC;
    signal BIAS_AWREADY : STD_LOGIC;
    signal BIAS_WREADY : STD_LOGIC;
    signal BIAS_ARVALID : STD_LOGIC;
    signal BIAS_ARREADY : STD_LOGIC;
    signal BIAS_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal BIAS_RVALID : STD_LOGIC;
    signal BIAS_RREADY : STD_LOGIC;
    signal BIAS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal BIAS_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal BIAS_BVALID : STD_LOGIC;
    signal INPUT_r_AWREADY : STD_LOGIC;
    signal INPUT_r_WREADY : STD_LOGIC;
    signal INPUT_r_ARVALID : STD_LOGIC;
    signal INPUT_r_ARREADY : STD_LOGIC;
    signal INPUT_r_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal INPUT_r_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RVALID : STD_LOGIC;
    signal INPUT_r_RREADY : STD_LOGIC;
    signal INPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal INPUT_r_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal INPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_AWVALID : STD_LOGIC;
    signal OUTPUT_r_AWREADY : STD_LOGIC;
    signal OUTPUT_r_AWADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal OUTPUT_r_WVALID : STD_LOGIC;
    signal OUTPUT_r_WREADY : STD_LOGIC;
    signal OUTPUT_r_WDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_ARREADY : STD_LOGIC;
    signal OUTPUT_r_RVALID : STD_LOGIC;
    signal OUTPUT_r_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal OUTPUT_r_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal OUTPUT_r_BVALID : STD_LOGIC;
    signal OUTPUT_r_BREADY : STD_LOGIC;
    signal WEIGHTS_AWREADY : STD_LOGIC;
    signal WEIGHTS_WREADY : STD_LOGIC;
    signal WEIGHTS_ARVALID : STD_LOGIC;
    signal WEIGHTS_ARREADY : STD_LOGIC;
    signal WEIGHTS_ARADDR : STD_LOGIC_VECTOR (63 downto 0);
    signal WEIGHTS_ARLEN : STD_LOGIC_VECTOR (31 downto 0);
    signal WEIGHTS_RVALID : STD_LOGIC;
    signal WEIGHTS_RREADY : STD_LOGIC;
    signal WEIGHTS_RDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal WEIGHTS_RFIFONUM : STD_LOGIC_VECTOR (8 downto 0);
    signal WEIGHTS_BVALID : STD_LOGIC;
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal sext_ln24_fu_281_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_fu_396_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal icmp_ln18_fu_299_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln32_1_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_2_fu_466_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln32_3_fu_491_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln24_1_fu_512_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sext_ln24_2_fu_530_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_state3_io : BOOLEAN;
    signal ap_block_state13_io : BOOLEAN;
    signal ap_block_state22 : BOOLEAN;
    signal bitcast_ln32_1_fu_540_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln32_3_fu_553_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal n_fu_128 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln18_fu_501_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal grp_fu_263_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_263_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal shl_ln_fu_305_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal shl_ln24_1_fu_317_p3 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln24_fu_313_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln24_1_fu_325_p1 : STD_LOGIC_VECTOR (13 downto 0);
    signal sub_ln24_fu_329_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal sext_ln24_3_fu_335_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln24_fu_339_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln24_1_fu_354_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal zext_ln24_2_fu_360_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal shl_ln1_fu_369_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln32_fu_377_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_fu_381_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln1_fu_386_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_1_fu_406_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_1_fu_411_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln24_2_fu_364_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal or_ln32_fu_441_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln32_1_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal add_ln32_2_fu_451_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_2_fu_456_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal add_ln32_3_fu_476_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal trunc_ln32_3_fu_481_p4 : STD_LOGIC_VECTOR (61 downto 0);
    signal grp_fu_263_ce : STD_LOGIC;
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal grp_fu_681_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_681_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_681_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_681_ce : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_ST_fsm_state1_blk : STD_LOGIC;
    signal ap_ST_fsm_state2_blk : STD_LOGIC;
    signal ap_ST_fsm_state3_blk : STD_LOGIC;
    signal ap_ST_fsm_state4_blk : STD_LOGIC;
    signal ap_ST_fsm_state5_blk : STD_LOGIC;
    signal ap_ST_fsm_state6_blk : STD_LOGIC;
    signal ap_ST_fsm_state7_blk : STD_LOGIC;
    signal ap_ST_fsm_state8_blk : STD_LOGIC;
    signal ap_ST_fsm_state9_blk : STD_LOGIC;
    signal ap_ST_fsm_state10_blk : STD_LOGIC;
    signal ap_ST_fsm_state11_blk : STD_LOGIC;
    signal ap_ST_fsm_state12_blk : STD_LOGIC;
    signal ap_ST_fsm_state13_blk : STD_LOGIC;
    signal ap_ST_fsm_state14_blk : STD_LOGIC;
    signal ap_ST_fsm_state15_blk : STD_LOGIC;
    signal ap_ST_fsm_state16_blk : STD_LOGIC;
    signal ap_ST_fsm_state17_blk : STD_LOGIC;
    signal ap_ST_fsm_state18_blk : STD_LOGIC;
    signal ap_ST_fsm_state19_blk : STD_LOGIC;
    signal ap_ST_fsm_state20_blk : STD_LOGIC;
    signal ap_ST_fsm_state21_blk : STD_LOGIC;
    signal ap_ST_fsm_state22_blk : STD_LOGIC;
    signal ap_ST_fsm_state23_blk : STD_LOGIC;
    signal ap_ST_fsm_state24_blk : STD_LOGIC;
    signal ap_ST_fsm_state25_blk : STD_LOGIC;
    signal ap_ST_fsm_state26_blk : STD_LOGIC;
    signal ap_ST_fsm_state27_blk : STD_LOGIC;
    signal ap_ST_fsm_state28_blk : STD_LOGIC;
    signal ap_ST_fsm_state29_blk : STD_LOGIC;
    signal ap_ST_fsm_state30_blk : STD_LOGIC;
    signal ap_ST_fsm_state31_blk : STD_LOGIC;
    signal ap_ST_fsm_state32_blk : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component fc6_hls_fc6_hls_Pipeline_VITIS_LOOP_24_2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_WEIGHTS_AWVALID : OUT STD_LOGIC;
        m_axi_WEIGHTS_AWREADY : IN STD_LOGIC;
        m_axi_WEIGHTS_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_WEIGHTS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_WVALID : OUT STD_LOGIC;
        m_axi_WEIGHTS_WREADY : IN STD_LOGIC;
        m_axi_WEIGHTS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_WLAST : OUT STD_LOGIC;
        m_axi_WEIGHTS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_ARVALID : OUT STD_LOGIC;
        m_axi_WEIGHTS_ARREADY : IN STD_LOGIC;
        m_axi_WEIGHTS_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_WEIGHTS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_RVALID : IN STD_LOGIC;
        m_axi_WEIGHTS_RREADY : OUT STD_LOGIC;
        m_axi_WEIGHTS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_RLAST : IN STD_LOGIC;
        m_axi_WEIGHTS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_WEIGHTS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_BVALID : IN STD_LOGIC;
        m_axi_WEIGHTS_BREADY : OUT STD_LOGIC;
        m_axi_WEIGHTS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
        m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
        m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
        m_axi_INPUT_r_WREADY : IN STD_LOGIC;
        m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
        m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
        m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
        m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_RVALID : IN STD_LOGIC;
        m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
        m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_RLAST : IN STD_LOGIC;
        m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_BVALID : IN STD_LOGIC;
        m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
        m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln24 : IN STD_LOGIC_VECTOR (61 downto 0);
        sext_ln24_1 : IN STD_LOGIC_VECTOR (61 downto 0);
        sum_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_out_ap_vld : OUT STD_LOGIC;
        grp_fu_681_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_681_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_681_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_681_p_ce : OUT STD_LOGIC;
        grp_fu_263_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_263_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_263_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_263_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_263_p_ce : OUT STD_LOGIC );
    end component;


    component fc6_hls_fc6_hls_Pipeline_VITIS_LOOP_24_21 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        m_axi_WEIGHTS_AWVALID : OUT STD_LOGIC;
        m_axi_WEIGHTS_AWREADY : IN STD_LOGIC;
        m_axi_WEIGHTS_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_WEIGHTS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_WVALID : OUT STD_LOGIC;
        m_axi_WEIGHTS_WREADY : IN STD_LOGIC;
        m_axi_WEIGHTS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_WLAST : OUT STD_LOGIC;
        m_axi_WEIGHTS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_ARVALID : OUT STD_LOGIC;
        m_axi_WEIGHTS_ARREADY : IN STD_LOGIC;
        m_axi_WEIGHTS_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_WEIGHTS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_WEIGHTS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_WEIGHTS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_RVALID : IN STD_LOGIC;
        m_axi_WEIGHTS_RREADY : OUT STD_LOGIC;
        m_axi_WEIGHTS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_WEIGHTS_RLAST : IN STD_LOGIC;
        m_axi_WEIGHTS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_WEIGHTS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_BVALID : IN STD_LOGIC;
        m_axi_WEIGHTS_BREADY : OUT STD_LOGIC;
        m_axi_WEIGHTS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_WEIGHTS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_WEIGHTS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
        m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
        m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
        m_axi_INPUT_r_WREADY : IN STD_LOGIC;
        m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
        m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
        m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
        m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
        m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_RVALID : IN STD_LOGIC;
        m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
        m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        m_axi_INPUT_r_RLAST : IN STD_LOGIC;
        m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
        m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_BVALID : IN STD_LOGIC;
        m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
        m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
        m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
        sext_ln24 : IN STD_LOGIC_VECTOR (61 downto 0);
        sext_ln24_2 : IN STD_LOGIC_VECTOR (61 downto 0);
        sum_2_out : OUT STD_LOGIC_VECTOR (31 downto 0);
        sum_2_out_ap_vld : OUT STD_LOGIC;
        grp_fu_681_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_681_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_681_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_681_p_ce : OUT STD_LOGIC;
        grp_fu_263_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_263_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_263_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
        grp_fu_263_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
        grp_fu_263_p_ce : OUT STD_LOGIC );
    end component;


    component fc6_hls_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_hls_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component fc6_hls_CTRL_BUS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC );
    end component;


    component fc6_hls_control_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        input_r_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        weights_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        bias_r : OUT STD_LOGIC_VECTOR (63 downto 0);
        output_r_r : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fc6_hls_BIAS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component fc6_hls_INPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component fc6_hls_OUTPUT_r_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;


    component fc6_hls_WEIGHTS_m_axi IS
    generic (
        CONSERVATIVE : INTEGER;
        USER_MAXREQS : INTEGER;
        MAX_READ_BURST_LENGTH : INTEGER;
        MAX_WRITE_BURST_LENGTH : INTEGER;
        C_M_AXI_ID_WIDTH : INTEGER;
        C_M_AXI_ADDR_WIDTH : INTEGER;
        C_M_AXI_DATA_WIDTH : INTEGER;
        C_M_AXI_AWUSER_WIDTH : INTEGER;
        C_M_AXI_ARUSER_WIDTH : INTEGER;
        C_M_AXI_WUSER_WIDTH : INTEGER;
        C_M_AXI_RUSER_WIDTH : INTEGER;
        C_M_AXI_BUSER_WIDTH : INTEGER;
        C_USER_VALUE : INTEGER;
        C_PROT_VALUE : INTEGER;
        C_CACHE_VALUE : INTEGER;
        USER_RFIFONUM_WIDTH : INTEGER;
        USER_DW : INTEGER;
        USER_AW : INTEGER;
        NUM_READ_OUTSTANDING : INTEGER;
        NUM_WRITE_OUTSTANDING : INTEGER );
    port (
        AWVALID : OUT STD_LOGIC;
        AWREADY : IN STD_LOGIC;
        AWADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        AWID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        AWLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        AWUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_AWUSER_WIDTH-1 downto 0);
        WVALID : OUT STD_LOGIC;
        WREADY : IN STD_LOGIC;
        WDATA : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : OUT STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH/8-1 downto 0);
        WLAST : OUT STD_LOGIC;
        WID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        WUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_WUSER_WIDTH-1 downto 0);
        ARVALID : OUT STD_LOGIC;
        ARREADY : IN STD_LOGIC;
        ARADDR : OUT STD_LOGIC_VECTOR (C_M_AXI_ADDR_WIDTH-1 downto 0);
        ARID : OUT STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        ARLEN : OUT STD_LOGIC_VECTOR (7 downto 0);
        ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
        ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
        ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
        ARUSER : OUT STD_LOGIC_VECTOR (C_M_AXI_ARUSER_WIDTH-1 downto 0);
        RVALID : IN STD_LOGIC;
        RREADY : OUT STD_LOGIC;
        RDATA : IN STD_LOGIC_VECTOR (C_M_AXI_DATA_WIDTH-1 downto 0);
        RLAST : IN STD_LOGIC;
        RID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        RUSER : IN STD_LOGIC_VECTOR (C_M_AXI_RUSER_WIDTH-1 downto 0);
        RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BVALID : IN STD_LOGIC;
        BREADY : OUT STD_LOGIC;
        BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
        BID : IN STD_LOGIC_VECTOR (C_M_AXI_ID_WIDTH-1 downto 0);
        BUSER : IN STD_LOGIC_VECTOR (C_M_AXI_BUSER_WIDTH-1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        I_ARVALID : IN STD_LOGIC;
        I_ARREADY : OUT STD_LOGIC;
        I_ARADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_ARLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_RVALID : OUT STD_LOGIC;
        I_RREADY : IN STD_LOGIC;
        I_RDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        I_RFIFONUM : OUT STD_LOGIC_VECTOR (8 downto 0);
        I_AWVALID : IN STD_LOGIC;
        I_AWREADY : OUT STD_LOGIC;
        I_AWADDR : IN STD_LOGIC_VECTOR (63 downto 0);
        I_AWLEN : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WVALID : IN STD_LOGIC;
        I_WREADY : OUT STD_LOGIC;
        I_WDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        I_WSTRB : IN STD_LOGIC_VECTOR (3 downto 0);
        I_BVALID : OUT STD_LOGIC;
        I_BREADY : IN STD_LOGIC );
    end component;



begin
    grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241 : component fc6_hls_fc6_hls_Pipeline_VITIS_LOOP_24_2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start,
        ap_done => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done,
        ap_idle => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_idle,
        ap_ready => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_ready,
        m_axi_WEIGHTS_AWVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWVALID,
        m_axi_WEIGHTS_AWREADY => ap_const_logic_0,
        m_axi_WEIGHTS_AWADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWADDR,
        m_axi_WEIGHTS_AWID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWID,
        m_axi_WEIGHTS_AWLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWLEN,
        m_axi_WEIGHTS_AWSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWSIZE,
        m_axi_WEIGHTS_AWBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWBURST,
        m_axi_WEIGHTS_AWLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWLOCK,
        m_axi_WEIGHTS_AWCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWCACHE,
        m_axi_WEIGHTS_AWPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWPROT,
        m_axi_WEIGHTS_AWQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWQOS,
        m_axi_WEIGHTS_AWREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWREGION,
        m_axi_WEIGHTS_AWUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_AWUSER,
        m_axi_WEIGHTS_WVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WVALID,
        m_axi_WEIGHTS_WREADY => ap_const_logic_0,
        m_axi_WEIGHTS_WDATA => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WDATA,
        m_axi_WEIGHTS_WSTRB => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WSTRB,
        m_axi_WEIGHTS_WLAST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WLAST,
        m_axi_WEIGHTS_WID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WID,
        m_axi_WEIGHTS_WUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_WUSER,
        m_axi_WEIGHTS_ARVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARVALID,
        m_axi_WEIGHTS_ARREADY => WEIGHTS_ARREADY,
        m_axi_WEIGHTS_ARADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARADDR,
        m_axi_WEIGHTS_ARID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARID,
        m_axi_WEIGHTS_ARLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARLEN,
        m_axi_WEIGHTS_ARSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARSIZE,
        m_axi_WEIGHTS_ARBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARBURST,
        m_axi_WEIGHTS_ARLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARLOCK,
        m_axi_WEIGHTS_ARCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARCACHE,
        m_axi_WEIGHTS_ARPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARPROT,
        m_axi_WEIGHTS_ARQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARQOS,
        m_axi_WEIGHTS_ARREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARREGION,
        m_axi_WEIGHTS_ARUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARUSER,
        m_axi_WEIGHTS_RVALID => WEIGHTS_RVALID,
        m_axi_WEIGHTS_RREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_RREADY,
        m_axi_WEIGHTS_RDATA => WEIGHTS_RDATA,
        m_axi_WEIGHTS_RLAST => ap_const_logic_0,
        m_axi_WEIGHTS_RID => ap_const_lv1_0,
        m_axi_WEIGHTS_RFIFONUM => WEIGHTS_RFIFONUM,
        m_axi_WEIGHTS_RUSER => ap_const_lv1_0,
        m_axi_WEIGHTS_RRESP => ap_const_lv2_0,
        m_axi_WEIGHTS_BVALID => ap_const_logic_0,
        m_axi_WEIGHTS_BREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_BREADY,
        m_axi_WEIGHTS_BRESP => ap_const_lv2_0,
        m_axi_WEIGHTS_BID => ap_const_lv1_0,
        m_axi_WEIGHTS_BUSER => ap_const_lv1_0,
        m_axi_INPUT_r_AWVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY => ap_const_logic_0,
        m_axi_INPUT_r_AWADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY => ap_const_logic_0,
        m_axi_INPUT_r_WDATA => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY => INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID => INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA => INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST => ap_const_logic_0,
        m_axi_INPUT_r_RID => ap_const_lv1_0,
        m_axi_INPUT_r_RFIFONUM => INPUT_r_RFIFONUM,
        m_axi_INPUT_r_RUSER => ap_const_lv1_0,
        m_axi_INPUT_r_RRESP => ap_const_lv2_0,
        m_axi_INPUT_r_BVALID => ap_const_logic_0,
        m_axi_INPUT_r_BREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP => ap_const_lv2_0,
        m_axi_INPUT_r_BID => ap_const_lv1_0,
        m_axi_INPUT_r_BUSER => ap_const_lv1_0,
        sext_ln24 => trunc_ln_reg_595,
        sext_ln24_1 => trunc_ln24_1_reg_609,
        sum_out => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_sum_out,
        sum_out_ap_vld => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_sum_out_ap_vld,
        grp_fu_681_p_din0 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din0,
        grp_fu_681_p_din1 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din1,
        grp_fu_681_p_dout0 => grp_fu_681_p2,
        grp_fu_681_p_ce => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_ce,
        grp_fu_263_p_din0 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din0,
        grp_fu_263_p_din1 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din1,
        grp_fu_263_p_opcode => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_opcode,
        grp_fu_263_p_dout0 => grp_fu_263_p2,
        grp_fu_263_p_ce => grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_ce);

    grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252 : component fc6_hls_fc6_hls_Pipeline_VITIS_LOOP_24_21
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start,
        ap_done => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done,
        ap_idle => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_idle,
        ap_ready => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_ready,
        m_axi_WEIGHTS_AWVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWVALID,
        m_axi_WEIGHTS_AWREADY => ap_const_logic_0,
        m_axi_WEIGHTS_AWADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWADDR,
        m_axi_WEIGHTS_AWID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWID,
        m_axi_WEIGHTS_AWLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWLEN,
        m_axi_WEIGHTS_AWSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWSIZE,
        m_axi_WEIGHTS_AWBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWBURST,
        m_axi_WEIGHTS_AWLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWLOCK,
        m_axi_WEIGHTS_AWCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWCACHE,
        m_axi_WEIGHTS_AWPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWPROT,
        m_axi_WEIGHTS_AWQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWQOS,
        m_axi_WEIGHTS_AWREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWREGION,
        m_axi_WEIGHTS_AWUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_AWUSER,
        m_axi_WEIGHTS_WVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WVALID,
        m_axi_WEIGHTS_WREADY => ap_const_logic_0,
        m_axi_WEIGHTS_WDATA => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WDATA,
        m_axi_WEIGHTS_WSTRB => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WSTRB,
        m_axi_WEIGHTS_WLAST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WLAST,
        m_axi_WEIGHTS_WID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WID,
        m_axi_WEIGHTS_WUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_WUSER,
        m_axi_WEIGHTS_ARVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARVALID,
        m_axi_WEIGHTS_ARREADY => WEIGHTS_ARREADY,
        m_axi_WEIGHTS_ARADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARADDR,
        m_axi_WEIGHTS_ARID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARID,
        m_axi_WEIGHTS_ARLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARLEN,
        m_axi_WEIGHTS_ARSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARSIZE,
        m_axi_WEIGHTS_ARBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARBURST,
        m_axi_WEIGHTS_ARLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARLOCK,
        m_axi_WEIGHTS_ARCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARCACHE,
        m_axi_WEIGHTS_ARPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARPROT,
        m_axi_WEIGHTS_ARQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARQOS,
        m_axi_WEIGHTS_ARREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARREGION,
        m_axi_WEIGHTS_ARUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARUSER,
        m_axi_WEIGHTS_RVALID => WEIGHTS_RVALID,
        m_axi_WEIGHTS_RREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_RREADY,
        m_axi_WEIGHTS_RDATA => WEIGHTS_RDATA,
        m_axi_WEIGHTS_RLAST => ap_const_logic_0,
        m_axi_WEIGHTS_RID => ap_const_lv1_0,
        m_axi_WEIGHTS_RFIFONUM => WEIGHTS_RFIFONUM,
        m_axi_WEIGHTS_RUSER => ap_const_lv1_0,
        m_axi_WEIGHTS_RRESP => ap_const_lv2_0,
        m_axi_WEIGHTS_BVALID => ap_const_logic_0,
        m_axi_WEIGHTS_BREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_BREADY,
        m_axi_WEIGHTS_BRESP => ap_const_lv2_0,
        m_axi_WEIGHTS_BID => ap_const_lv1_0,
        m_axi_WEIGHTS_BUSER => ap_const_lv1_0,
        m_axi_INPUT_r_AWVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY => ap_const_logic_0,
        m_axi_INPUT_r_AWADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY => ap_const_logic_0,
        m_axi_INPUT_r_WDATA => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY => INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID => INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA => INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST => ap_const_logic_0,
        m_axi_INPUT_r_RID => ap_const_lv1_0,
        m_axi_INPUT_r_RFIFONUM => INPUT_r_RFIFONUM,
        m_axi_INPUT_r_RUSER => ap_const_lv1_0,
        m_axi_INPUT_r_RRESP => ap_const_lv2_0,
        m_axi_INPUT_r_BVALID => ap_const_logic_0,
        m_axi_INPUT_r_BREADY => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP => ap_const_lv2_0,
        m_axi_INPUT_r_BID => ap_const_lv1_0,
        m_axi_INPUT_r_BUSER => ap_const_lv1_0,
        sext_ln24 => trunc_ln_reg_595,
        sext_ln24_2 => trunc_ln24_2_reg_627,
        sum_2_out => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_sum_2_out,
        sum_2_out_ap_vld => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_sum_2_out_ap_vld,
        grp_fu_681_p_din0 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din0,
        grp_fu_681_p_din1 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din1,
        grp_fu_681_p_dout0 => grp_fu_681_p2,
        grp_fu_681_p_ce => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_ce,
        grp_fu_263_p_din0 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din0,
        grp_fu_263_p_din1 => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din1,
        grp_fu_263_p_opcode => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_opcode,
        grp_fu_263_p_dout0 => grp_fu_263_p2,
        grp_fu_263_p_ce => grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_ce);

    CTRL_BUS_s_axi_U : component fc6_hls_CTRL_BUS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CTRL_BUS_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CTRL_BUS_DATA_WIDTH)
    port map (
        AWVALID => s_axi_CTRL_BUS_AWVALID,
        AWREADY => s_axi_CTRL_BUS_AWREADY,
        AWADDR => s_axi_CTRL_BUS_AWADDR,
        WVALID => s_axi_CTRL_BUS_WVALID,
        WREADY => s_axi_CTRL_BUS_WREADY,
        WDATA => s_axi_CTRL_BUS_WDATA,
        WSTRB => s_axi_CTRL_BUS_WSTRB,
        ARVALID => s_axi_CTRL_BUS_ARVALID,
        ARREADY => s_axi_CTRL_BUS_ARREADY,
        ARADDR => s_axi_CTRL_BUS_ARADDR,
        RVALID => s_axi_CTRL_BUS_RVALID,
        RREADY => s_axi_CTRL_BUS_RREADY,
        RDATA => s_axi_CTRL_BUS_RDATA,
        RRESP => s_axi_CTRL_BUS_RRESP,
        BVALID => s_axi_CTRL_BUS_BVALID,
        BREADY => s_axi_CTRL_BUS_BREADY,
        BRESP => s_axi_CTRL_BUS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle);

    control_s_axi_U : component fc6_hls_control_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_CONTROL_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_CONTROL_DATA_WIDTH)
    port map (
        AWVALID => s_axi_control_AWVALID,
        AWREADY => s_axi_control_AWREADY,
        AWADDR => s_axi_control_AWADDR,
        WVALID => s_axi_control_WVALID,
        WREADY => s_axi_control_WREADY,
        WDATA => s_axi_control_WDATA,
        WSTRB => s_axi_control_WSTRB,
        ARVALID => s_axi_control_ARVALID,
        ARREADY => s_axi_control_ARREADY,
        ARADDR => s_axi_control_ARADDR,
        RVALID => s_axi_control_RVALID,
        RREADY => s_axi_control_RREADY,
        RDATA => s_axi_control_RDATA,
        RRESP => s_axi_control_RRESP,
        BVALID => s_axi_control_BVALID,
        BREADY => s_axi_control_BREADY,
        BRESP => s_axi_control_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        input_r_r => input_r_r,
        weights_r => weights_r,
        bias_r => bias_r,
        output_r_r => output_r_r);

    BIAS_m_axi_U : component fc6_hls_BIAS_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_BIAS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_BIAS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_BIAS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_BIAS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_BIAS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_BIAS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_BIAS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_BIAS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_BIAS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_BIAS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_BIAS_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_BIAS_AWVALID,
        AWREADY => m_axi_BIAS_AWREADY,
        AWADDR => m_axi_BIAS_AWADDR,
        AWID => m_axi_BIAS_AWID,
        AWLEN => m_axi_BIAS_AWLEN,
        AWSIZE => m_axi_BIAS_AWSIZE,
        AWBURST => m_axi_BIAS_AWBURST,
        AWLOCK => m_axi_BIAS_AWLOCK,
        AWCACHE => m_axi_BIAS_AWCACHE,
        AWPROT => m_axi_BIAS_AWPROT,
        AWQOS => m_axi_BIAS_AWQOS,
        AWREGION => m_axi_BIAS_AWREGION,
        AWUSER => m_axi_BIAS_AWUSER,
        WVALID => m_axi_BIAS_WVALID,
        WREADY => m_axi_BIAS_WREADY,
        WDATA => m_axi_BIAS_WDATA,
        WSTRB => m_axi_BIAS_WSTRB,
        WLAST => m_axi_BIAS_WLAST,
        WID => m_axi_BIAS_WID,
        WUSER => m_axi_BIAS_WUSER,
        ARVALID => m_axi_BIAS_ARVALID,
        ARREADY => m_axi_BIAS_ARREADY,
        ARADDR => m_axi_BIAS_ARADDR,
        ARID => m_axi_BIAS_ARID,
        ARLEN => m_axi_BIAS_ARLEN,
        ARSIZE => m_axi_BIAS_ARSIZE,
        ARBURST => m_axi_BIAS_ARBURST,
        ARLOCK => m_axi_BIAS_ARLOCK,
        ARCACHE => m_axi_BIAS_ARCACHE,
        ARPROT => m_axi_BIAS_ARPROT,
        ARQOS => m_axi_BIAS_ARQOS,
        ARREGION => m_axi_BIAS_ARREGION,
        ARUSER => m_axi_BIAS_ARUSER,
        RVALID => m_axi_BIAS_RVALID,
        RREADY => m_axi_BIAS_RREADY,
        RDATA => m_axi_BIAS_RDATA,
        RLAST => m_axi_BIAS_RLAST,
        RID => m_axi_BIAS_RID,
        RUSER => m_axi_BIAS_RUSER,
        RRESP => m_axi_BIAS_RRESP,
        BVALID => m_axi_BIAS_BVALID,
        BREADY => m_axi_BIAS_BREADY,
        BRESP => m_axi_BIAS_BRESP,
        BID => m_axi_BIAS_BID,
        BUSER => m_axi_BIAS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => BIAS_ARVALID,
        I_ARREADY => BIAS_ARREADY,
        I_ARADDR => BIAS_ARADDR,
        I_ARLEN => ap_const_lv32_1,
        I_RVALID => BIAS_RVALID,
        I_RREADY => BIAS_RREADY,
        I_RDATA => BIAS_RDATA,
        I_RFIFONUM => BIAS_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => BIAS_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => BIAS_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => BIAS_BVALID,
        I_BREADY => ap_const_logic_0);

    INPUT_r_m_axi_U : component fc6_hls_INPUT_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_INPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_INPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_INPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_INPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_INPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_INPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_INPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_INPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_INPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_INPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_INPUT_R_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_INPUT_r_AWVALID,
        AWREADY => m_axi_INPUT_r_AWREADY,
        AWADDR => m_axi_INPUT_r_AWADDR,
        AWID => m_axi_INPUT_r_AWID,
        AWLEN => m_axi_INPUT_r_AWLEN,
        AWSIZE => m_axi_INPUT_r_AWSIZE,
        AWBURST => m_axi_INPUT_r_AWBURST,
        AWLOCK => m_axi_INPUT_r_AWLOCK,
        AWCACHE => m_axi_INPUT_r_AWCACHE,
        AWPROT => m_axi_INPUT_r_AWPROT,
        AWQOS => m_axi_INPUT_r_AWQOS,
        AWREGION => m_axi_INPUT_r_AWREGION,
        AWUSER => m_axi_INPUT_r_AWUSER,
        WVALID => m_axi_INPUT_r_WVALID,
        WREADY => m_axi_INPUT_r_WREADY,
        WDATA => m_axi_INPUT_r_WDATA,
        WSTRB => m_axi_INPUT_r_WSTRB,
        WLAST => m_axi_INPUT_r_WLAST,
        WID => m_axi_INPUT_r_WID,
        WUSER => m_axi_INPUT_r_WUSER,
        ARVALID => m_axi_INPUT_r_ARVALID,
        ARREADY => m_axi_INPUT_r_ARREADY,
        ARADDR => m_axi_INPUT_r_ARADDR,
        ARID => m_axi_INPUT_r_ARID,
        ARLEN => m_axi_INPUT_r_ARLEN,
        ARSIZE => m_axi_INPUT_r_ARSIZE,
        ARBURST => m_axi_INPUT_r_ARBURST,
        ARLOCK => m_axi_INPUT_r_ARLOCK,
        ARCACHE => m_axi_INPUT_r_ARCACHE,
        ARPROT => m_axi_INPUT_r_ARPROT,
        ARQOS => m_axi_INPUT_r_ARQOS,
        ARREGION => m_axi_INPUT_r_ARREGION,
        ARUSER => m_axi_INPUT_r_ARUSER,
        RVALID => m_axi_INPUT_r_RVALID,
        RREADY => m_axi_INPUT_r_RREADY,
        RDATA => m_axi_INPUT_r_RDATA,
        RLAST => m_axi_INPUT_r_RLAST,
        RID => m_axi_INPUT_r_RID,
        RUSER => m_axi_INPUT_r_RUSER,
        RRESP => m_axi_INPUT_r_RRESP,
        BVALID => m_axi_INPUT_r_BVALID,
        BREADY => m_axi_INPUT_r_BREADY,
        BRESP => m_axi_INPUT_r_BRESP,
        BID => m_axi_INPUT_r_BID,
        BUSER => m_axi_INPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => INPUT_r_ARVALID,
        I_ARREADY => INPUT_r_ARREADY,
        I_ARADDR => INPUT_r_ARADDR,
        I_ARLEN => INPUT_r_ARLEN,
        I_RVALID => INPUT_r_RVALID,
        I_RREADY => INPUT_r_RREADY,
        I_RDATA => INPUT_r_RDATA,
        I_RFIFONUM => INPUT_r_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => INPUT_r_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => INPUT_r_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => INPUT_r_BVALID,
        I_BREADY => ap_const_logic_0);

    OUTPUT_r_m_axi_U : component fc6_hls_OUTPUT_r_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 4,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_OUTPUT_R_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_OUTPUT_R_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_OUTPUT_R_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_OUTPUT_R_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_OUTPUT_R_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_OUTPUT_R_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_OUTPUT_R_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_OUTPUT_R_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_OUTPUT_R_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_OUTPUT_R_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_OUTPUT_R_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_OUTPUT_r_AWVALID,
        AWREADY => m_axi_OUTPUT_r_AWREADY,
        AWADDR => m_axi_OUTPUT_r_AWADDR,
        AWID => m_axi_OUTPUT_r_AWID,
        AWLEN => m_axi_OUTPUT_r_AWLEN,
        AWSIZE => m_axi_OUTPUT_r_AWSIZE,
        AWBURST => m_axi_OUTPUT_r_AWBURST,
        AWLOCK => m_axi_OUTPUT_r_AWLOCK,
        AWCACHE => m_axi_OUTPUT_r_AWCACHE,
        AWPROT => m_axi_OUTPUT_r_AWPROT,
        AWQOS => m_axi_OUTPUT_r_AWQOS,
        AWREGION => m_axi_OUTPUT_r_AWREGION,
        AWUSER => m_axi_OUTPUT_r_AWUSER,
        WVALID => m_axi_OUTPUT_r_WVALID,
        WREADY => m_axi_OUTPUT_r_WREADY,
        WDATA => m_axi_OUTPUT_r_WDATA,
        WSTRB => m_axi_OUTPUT_r_WSTRB,
        WLAST => m_axi_OUTPUT_r_WLAST,
        WID => m_axi_OUTPUT_r_WID,
        WUSER => m_axi_OUTPUT_r_WUSER,
        ARVALID => m_axi_OUTPUT_r_ARVALID,
        ARREADY => m_axi_OUTPUT_r_ARREADY,
        ARADDR => m_axi_OUTPUT_r_ARADDR,
        ARID => m_axi_OUTPUT_r_ARID,
        ARLEN => m_axi_OUTPUT_r_ARLEN,
        ARSIZE => m_axi_OUTPUT_r_ARSIZE,
        ARBURST => m_axi_OUTPUT_r_ARBURST,
        ARLOCK => m_axi_OUTPUT_r_ARLOCK,
        ARCACHE => m_axi_OUTPUT_r_ARCACHE,
        ARPROT => m_axi_OUTPUT_r_ARPROT,
        ARQOS => m_axi_OUTPUT_r_ARQOS,
        ARREGION => m_axi_OUTPUT_r_ARREGION,
        ARUSER => m_axi_OUTPUT_r_ARUSER,
        RVALID => m_axi_OUTPUT_r_RVALID,
        RREADY => m_axi_OUTPUT_r_RREADY,
        RDATA => m_axi_OUTPUT_r_RDATA,
        RLAST => m_axi_OUTPUT_r_RLAST,
        RID => m_axi_OUTPUT_r_RID,
        RUSER => m_axi_OUTPUT_r_RUSER,
        RRESP => m_axi_OUTPUT_r_RRESP,
        BVALID => m_axi_OUTPUT_r_BVALID,
        BREADY => m_axi_OUTPUT_r_BREADY,
        BRESP => m_axi_OUTPUT_r_BRESP,
        BID => m_axi_OUTPUT_r_BID,
        BUSER => m_axi_OUTPUT_r_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => ap_const_logic_0,
        I_ARREADY => OUTPUT_r_ARREADY,
        I_ARADDR => ap_const_lv64_0,
        I_ARLEN => ap_const_lv32_0,
        I_RVALID => OUTPUT_r_RVALID,
        I_RREADY => ap_const_logic_0,
        I_RDATA => OUTPUT_r_RDATA,
        I_RFIFONUM => OUTPUT_r_RFIFONUM,
        I_AWVALID => OUTPUT_r_AWVALID,
        I_AWREADY => OUTPUT_r_AWREADY,
        I_AWADDR => OUTPUT_r_AWADDR,
        I_AWLEN => ap_const_lv32_1,
        I_WVALID => OUTPUT_r_WVALID,
        I_WREADY => OUTPUT_r_WREADY,
        I_WDATA => OUTPUT_r_WDATA,
        I_WSTRB => ap_const_lv4_F,
        I_BVALID => OUTPUT_r_BVALID,
        I_BREADY => OUTPUT_r_BREADY);

    WEIGHTS_m_axi_U : component fc6_hls_WEIGHTS_m_axi
    generic map (
        CONSERVATIVE => 1,
        USER_MAXREQS => 7,
        MAX_READ_BURST_LENGTH => 16,
        MAX_WRITE_BURST_LENGTH => 16,
        C_M_AXI_ID_WIDTH => C_M_AXI_WEIGHTS_ID_WIDTH,
        C_M_AXI_ADDR_WIDTH => C_M_AXI_WEIGHTS_ADDR_WIDTH,
        C_M_AXI_DATA_WIDTH => C_M_AXI_WEIGHTS_DATA_WIDTH,
        C_M_AXI_AWUSER_WIDTH => C_M_AXI_WEIGHTS_AWUSER_WIDTH,
        C_M_AXI_ARUSER_WIDTH => C_M_AXI_WEIGHTS_ARUSER_WIDTH,
        C_M_AXI_WUSER_WIDTH => C_M_AXI_WEIGHTS_WUSER_WIDTH,
        C_M_AXI_RUSER_WIDTH => C_M_AXI_WEIGHTS_RUSER_WIDTH,
        C_M_AXI_BUSER_WIDTH => C_M_AXI_WEIGHTS_BUSER_WIDTH,
        C_USER_VALUE => C_M_AXI_WEIGHTS_USER_VALUE,
        C_PROT_VALUE => C_M_AXI_WEIGHTS_PROT_VALUE,
        C_CACHE_VALUE => C_M_AXI_WEIGHTS_CACHE_VALUE,
        USER_RFIFONUM_WIDTH => 9,
        USER_DW => 32,
        USER_AW => 64,
        NUM_READ_OUTSTANDING => 16,
        NUM_WRITE_OUTSTANDING => 16)
    port map (
        AWVALID => m_axi_WEIGHTS_AWVALID,
        AWREADY => m_axi_WEIGHTS_AWREADY,
        AWADDR => m_axi_WEIGHTS_AWADDR,
        AWID => m_axi_WEIGHTS_AWID,
        AWLEN => m_axi_WEIGHTS_AWLEN,
        AWSIZE => m_axi_WEIGHTS_AWSIZE,
        AWBURST => m_axi_WEIGHTS_AWBURST,
        AWLOCK => m_axi_WEIGHTS_AWLOCK,
        AWCACHE => m_axi_WEIGHTS_AWCACHE,
        AWPROT => m_axi_WEIGHTS_AWPROT,
        AWQOS => m_axi_WEIGHTS_AWQOS,
        AWREGION => m_axi_WEIGHTS_AWREGION,
        AWUSER => m_axi_WEIGHTS_AWUSER,
        WVALID => m_axi_WEIGHTS_WVALID,
        WREADY => m_axi_WEIGHTS_WREADY,
        WDATA => m_axi_WEIGHTS_WDATA,
        WSTRB => m_axi_WEIGHTS_WSTRB,
        WLAST => m_axi_WEIGHTS_WLAST,
        WID => m_axi_WEIGHTS_WID,
        WUSER => m_axi_WEIGHTS_WUSER,
        ARVALID => m_axi_WEIGHTS_ARVALID,
        ARREADY => m_axi_WEIGHTS_ARREADY,
        ARADDR => m_axi_WEIGHTS_ARADDR,
        ARID => m_axi_WEIGHTS_ARID,
        ARLEN => m_axi_WEIGHTS_ARLEN,
        ARSIZE => m_axi_WEIGHTS_ARSIZE,
        ARBURST => m_axi_WEIGHTS_ARBURST,
        ARLOCK => m_axi_WEIGHTS_ARLOCK,
        ARCACHE => m_axi_WEIGHTS_ARCACHE,
        ARPROT => m_axi_WEIGHTS_ARPROT,
        ARQOS => m_axi_WEIGHTS_ARQOS,
        ARREGION => m_axi_WEIGHTS_ARREGION,
        ARUSER => m_axi_WEIGHTS_ARUSER,
        RVALID => m_axi_WEIGHTS_RVALID,
        RREADY => m_axi_WEIGHTS_RREADY,
        RDATA => m_axi_WEIGHTS_RDATA,
        RLAST => m_axi_WEIGHTS_RLAST,
        RID => m_axi_WEIGHTS_RID,
        RUSER => m_axi_WEIGHTS_RUSER,
        RRESP => m_axi_WEIGHTS_RRESP,
        BVALID => m_axi_WEIGHTS_BVALID,
        BREADY => m_axi_WEIGHTS_BREADY,
        BRESP => m_axi_WEIGHTS_BRESP,
        BID => m_axi_WEIGHTS_BID,
        BUSER => m_axi_WEIGHTS_BUSER,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        I_ARVALID => WEIGHTS_ARVALID,
        I_ARREADY => WEIGHTS_ARREADY,
        I_ARADDR => WEIGHTS_ARADDR,
        I_ARLEN => WEIGHTS_ARLEN,
        I_RVALID => WEIGHTS_RVALID,
        I_RREADY => WEIGHTS_RREADY,
        I_RDATA => WEIGHTS_RDATA,
        I_RFIFONUM => WEIGHTS_RFIFONUM,
        I_AWVALID => ap_const_logic_0,
        I_AWREADY => WEIGHTS_AWREADY,
        I_AWADDR => ap_const_lv64_0,
        I_AWLEN => ap_const_lv32_0,
        I_WVALID => ap_const_logic_0,
        I_WREADY => WEIGHTS_WREADY,
        I_WDATA => ap_const_lv32_0,
        I_WSTRB => ap_const_lv4_0,
        I_BVALID => WEIGHTS_BVALID,
        I_BREADY => ap_const_logic_0);

    fadd_32ns_32ns_32_4_full_dsp_1_U15 : component fc6_hls_fadd_32ns_32ns_32_4_full_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_263_p0,
        din1 => grp_fu_263_p1,
        ce => grp_fu_263_ce,
        dout => grp_fu_263_p2);

    fmul_32ns_32ns_32_3_max_dsp_1_U16 : component fc6_hls_fmul_32ns_32ns_32_3_max_dsp_1
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst_n_inv,
        din0 => grp_fu_681_p0,
        din1 => grp_fu_681_p1,
        ce => grp_fu_681_ce,
        dout => grp_fu_681_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
                    grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_ready = ap_const_logic_1)) then 
                    grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst_n_inv = '1') then
                grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
                    grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_ready = ap_const_logic_1)) then 
                    grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    n_fu_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                n_fu_128 <= ap_const_lv4_0;
            elsif (((icmp_ln18_fu_299_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                n_fu_128 <= add_ln18_fu_501_p2;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state22)) then
                BIAS_addr_1_read_reg_668 <= BIAS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                BIAS_addr_1_reg_633 <= sext_ln32_2_fu_466_p1;
                BIAS_addr_reg_615 <= sext_ln32_fu_396_p1;
                OUTPUT_r_addr_1_reg_639 <= sext_ln32_3_fu_491_p1;
                OUTPUT_r_addr_reg_621 <= sext_ln32_1_fu_421_p1;
                trunc_ln24_1_reg_609 <= add_ln24_fu_339_p2(63 downto 2);
                trunc_ln24_2_reg_627 <= add_ln24_2_fu_364_p2(63 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state12)) then
                BIAS_addr_read_reg_650 <= BIAS_RDATA;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state1)) then
                INPUT_r_addr_reg_601 <= sext_ln24_fu_281_p1;
                bias_read_reg_571 <= bias_r;
                output_r_read_reg_565 <= output_r_r;
                trunc_ln_reg_595 <= input_r_r(63 downto 2);
                weights_read_reg_577 <= weights_r;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16))) then
                reg_267 <= grp_fu_263_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, ap_CS_fsm_state17, ap_CS_fsm_state4, ap_CS_fsm_state27, ap_CS_fsm_state32, ap_CS_fsm_state2, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done, BIAS_RVALID, OUTPUT_r_AWREADY, OUTPUT_r_WREADY, OUTPUT_r_BVALID, icmp_ln18_fu_299_p2, ap_block_state3_io, ap_block_state13_io, ap_block_state22)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln18_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = OUTPUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                if ((not(((grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done = ap_const_logic_0) or (ap_const_logic_0 = BIAS_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state12))) then
                    ap_NS_fsm <= ap_ST_fsm_state13;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state13 => 
                if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then
                    ap_NS_fsm <= ap_ST_fsm_state14;
                else
                    ap_NS_fsm <= ap_ST_fsm_state13;
                end if;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                if (((ap_const_logic_1 = OUTPUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state17))) then
                    ap_NS_fsm <= ap_ST_fsm_state18;
                else
                    ap_NS_fsm <= ap_ST_fsm_state17;
                end if;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                if ((not(((ap_const_boolean_1 = ap_block_state22) or (grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22))) then
                    ap_NS_fsm <= ap_ST_fsm_state23;
                else
                    ap_NS_fsm <= ap_ST_fsm_state22;
                end if;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                if (((ap_const_logic_1 = OUTPUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state27))) then
                    ap_NS_fsm <= ap_ST_fsm_state28;
                else
                    ap_NS_fsm <= ap_ST_fsm_state27;
                end if;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                if (((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state32))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state32;
                end if;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    BIAS_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, BIAS_addr_reg_615, BIAS_addr_1_reg_633, ap_block_state3_io, ap_block_state13_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            BIAS_ARADDR <= BIAS_addr_1_reg_633;
        elsif (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            BIAS_ARADDR <= BIAS_addr_reg_615;
        else 
            BIAS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    BIAS_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_block_state3_io, ap_block_state13_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            BIAS_ARVALID <= ap_const_logic_1;
        else 
            BIAS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    BIAS_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done, BIAS_RVALID, ap_block_state22)
    begin
        if (((not(((grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done = ap_const_logic_0) or (ap_const_logic_0 = BIAS_RVALID))) and (ap_const_logic_1 = ap_CS_fsm_state12)) or (not(((ap_const_boolean_1 = ap_block_state22) or (grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            BIAS_RREADY <= ap_const_logic_1;
        else 
            BIAS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    BIAS_blk_n_AR_assign_proc : process(m_axi_BIAS_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            BIAS_blk_n_AR <= m_axi_BIAS_ARREADY;
        else 
            BIAS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    BIAS_blk_n_R_assign_proc : process(m_axi_BIAS_RVALID, ap_CS_fsm_state12, ap_CS_fsm_state22)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            BIAS_blk_n_R <= m_axi_BIAS_RVALID;
        else 
            BIAS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;


    INPUT_r_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, INPUT_r_addr_reg_601, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARADDR, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARADDR, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_block_state3_io, ap_block_state13_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            INPUT_r_ARADDR <= INPUT_r_addr_reg_601;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            INPUT_r_ARADDR <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            INPUT_r_ARADDR <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARADDR;
        else 
            INPUT_r_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARLEN, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARLEN, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_block_state3_io, ap_block_state13_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            INPUT_r_ARLEN <= ap_const_lv32_78;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            INPUT_r_ARLEN <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            INPUT_r_ARLEN <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARLEN;
        else 
            INPUT_r_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    INPUT_r_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARVALID, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARVALID, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_block_state3_io, ap_block_state13_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            INPUT_r_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            INPUT_r_ARVALID <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            INPUT_r_ARVALID <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_ARVALID;
        else 
            INPUT_r_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_RREADY, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_RREADY, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            INPUT_r_RREADY <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_INPUT_r_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            INPUT_r_RREADY <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_INPUT_r_RREADY;
        else 
            INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    INPUT_r_blk_n_AR_assign_proc : process(m_axi_INPUT_r_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            INPUT_r_blk_n_AR <= m_axi_INPUT_r_ARREADY;
        else 
            INPUT_r_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_AWADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, OUTPUT_r_addr_reg_621, OUTPUT_r_addr_1_reg_639, OUTPUT_r_AWREADY, ap_block_state3_io)
    begin
        if (((ap_const_logic_1 = OUTPUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            OUTPUT_r_AWADDR <= OUTPUT_r_addr_1_reg_639;
        elsif (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            OUTPUT_r_AWADDR <= OUTPUT_r_addr_reg_621;
        else 
            OUTPUT_r_AWADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_r_AWVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4, OUTPUT_r_AWREADY, ap_block_state3_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)) or ((ap_const_logic_1 = OUTPUT_r_AWREADY) and (ap_const_logic_1 = ap_CS_fsm_state4)))) then 
            OUTPUT_r_AWVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_AWVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_BREADY_assign_proc : process(ap_CS_fsm_state22, ap_CS_fsm_state32, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done, OUTPUT_r_BVALID, ap_block_state22)
    begin
        if ((((ap_const_logic_1 = OUTPUT_r_BVALID) and (ap_const_logic_1 = ap_CS_fsm_state32)) or (not(((ap_const_boolean_1 = ap_block_state22) or (grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done = ap_const_logic_0))) and (ap_const_logic_1 = ap_CS_fsm_state22)))) then 
            OUTPUT_r_BREADY <= ap_const_logic_1;
        else 
            OUTPUT_r_BREADY <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_WDATA_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state27, bitcast_ln32_1_fu_540_p1, bitcast_ln32_3_fu_553_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            OUTPUT_r_WDATA <= bitcast_ln32_3_fu_553_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            OUTPUT_r_WDATA <= bitcast_ln32_1_fu_540_p1;
        else 
            OUTPUT_r_WDATA <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    OUTPUT_r_WVALID_assign_proc : process(ap_CS_fsm_state17, ap_CS_fsm_state27, OUTPUT_r_WREADY)
    begin
        if ((((ap_const_logic_1 = OUTPUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state27)) or ((ap_const_logic_1 = OUTPUT_r_WREADY) and (ap_const_logic_1 = ap_CS_fsm_state17)))) then 
            OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;


    OUTPUT_r_blk_n_AW_assign_proc : process(m_axi_OUTPUT_r_AWREADY, ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            OUTPUT_r_blk_n_AW <= m_axi_OUTPUT_r_AWREADY;
        else 
            OUTPUT_r_blk_n_AW <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_B_assign_proc : process(m_axi_OUTPUT_r_BVALID, ap_CS_fsm_state22, ap_CS_fsm_state32)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            OUTPUT_r_blk_n_B <= m_axi_OUTPUT_r_BVALID;
        else 
            OUTPUT_r_blk_n_B <= ap_const_logic_1;
        end if; 
    end process;


    OUTPUT_r_blk_n_W_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_CS_fsm_state17, ap_CS_fsm_state27)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state17))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;


    WEIGHTS_ARADDR_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARADDR, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARADDR, ap_CS_fsm_state11, ap_CS_fsm_state21, sext_ln24_1_fu_512_p1, sext_ln24_2_fu_530_p1, ap_block_state3_io, ap_block_state13_io)
    begin
        if (((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13))) then 
            WEIGHTS_ARADDR <= sext_ln24_2_fu_530_p1;
        elsif (((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            WEIGHTS_ARADDR <= sext_ln24_1_fu_512_p1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            WEIGHTS_ARADDR <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARADDR;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            WEIGHTS_ARADDR <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARADDR;
        else 
            WEIGHTS_ARADDR <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    WEIGHTS_ARLEN_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARLEN, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARLEN, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_block_state3_io, ap_block_state13_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            WEIGHTS_ARLEN <= ap_const_lv32_78;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            WEIGHTS_ARLEN <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARLEN;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            WEIGHTS_ARLEN <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARLEN;
        else 
            WEIGHTS_ARLEN <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    WEIGHTS_ARVALID_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARVALID, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARVALID, ap_CS_fsm_state11, ap_CS_fsm_state21, ap_block_state3_io, ap_block_state13_io)
    begin
        if ((((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)) or ((ap_const_boolean_0 = ap_block_state3_io) and (ap_const_logic_1 = ap_CS_fsm_state3)))) then 
            WEIGHTS_ARVALID <= ap_const_logic_1;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            WEIGHTS_ARVALID <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_ARVALID;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            WEIGHTS_ARVALID <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_ARVALID;
        else 
            WEIGHTS_ARVALID <= ap_const_logic_0;
        end if; 
    end process;


    WEIGHTS_RREADY_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_RREADY, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_RREADY, ap_CS_fsm_state11, ap_CS_fsm_state21)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state22))) then 
            WEIGHTS_RREADY <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_m_axi_WEIGHTS_RREADY;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state12))) then 
            WEIGHTS_RREADY <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_m_axi_WEIGHTS_RREADY;
        else 
            WEIGHTS_RREADY <= ap_const_logic_0;
        end if; 
    end process;


    WEIGHTS_blk_n_AR_assign_proc : process(m_axi_WEIGHTS_ARREADY, ap_CS_fsm_state3, ap_CS_fsm_state13)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            WEIGHTS_blk_n_AR <= m_axi_WEIGHTS_ARREADY;
        else 
            WEIGHTS_blk_n_AR <= ap_const_logic_1;
        end if; 
    end process;

    add_ln18_fu_501_p2 <= std_logic_vector(unsigned(n_fu_128) + unsigned(ap_const_lv4_2));
    add_ln24_1_fu_354_p2 <= std_logic_vector(signed(sub_ln24_fu_329_p2) + signed(ap_const_lv14_1E0));
    add_ln24_2_fu_364_p2 <= std_logic_vector(unsigned(zext_ln24_2_fu_360_p1) + unsigned(weights_read_reg_577));
    add_ln24_fu_339_p2 <= std_logic_vector(signed(sext_ln24_3_fu_335_p1) + signed(weights_read_reg_577));
    add_ln32_1_fu_406_p2 <= std_logic_vector(unsigned(zext_ln32_fu_377_p1) + unsigned(output_r_read_reg_565));
    add_ln32_2_fu_451_p2 <= std_logic_vector(unsigned(zext_ln32_1_fu_447_p1) + unsigned(bias_read_reg_571));
    add_ln32_3_fu_476_p2 <= std_logic_vector(unsigned(zext_ln32_1_fu_447_p1) + unsigned(output_r_read_reg_565));
    add_ln32_fu_381_p2 <= std_logic_vector(unsigned(zext_ln32_fu_377_p1) + unsigned(bias_read_reg_571));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_ST_fsm_state10_blk <= ap_const_logic_0;
    ap_ST_fsm_state11_blk <= ap_const_logic_0;

    ap_ST_fsm_state12_blk_assign_proc : process(grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done, BIAS_RVALID)
    begin
        if (((grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_done = ap_const_logic_0) or (ap_const_logic_0 = BIAS_RVALID))) then 
            ap_ST_fsm_state12_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state12_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state13_blk_assign_proc : process(ap_block_state13_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state13_io)) then 
            ap_ST_fsm_state13_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state13_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state14_blk <= ap_const_logic_0;
    ap_ST_fsm_state15_blk <= ap_const_logic_0;
    ap_ST_fsm_state16_blk <= ap_const_logic_0;

    ap_ST_fsm_state17_blk_assign_proc : process(OUTPUT_r_WREADY)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_WREADY)) then 
            ap_ST_fsm_state17_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state17_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state18_blk <= ap_const_logic_0;
    ap_ST_fsm_state19_blk <= ap_const_logic_0;

    ap_ST_fsm_state1_blk_assign_proc : process(ap_start)
    begin
        if ((ap_start = ap_const_logic_0)) then 
            ap_ST_fsm_state1_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state1_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state20_blk <= ap_const_logic_0;
    ap_ST_fsm_state21_blk <= ap_const_logic_0;

    ap_ST_fsm_state22_blk_assign_proc : process(grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done, ap_block_state22)
    begin
        if (((ap_const_boolean_1 = ap_block_state22) or (grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_done = ap_const_logic_0))) then 
            ap_ST_fsm_state22_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state22_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state23_blk <= ap_const_logic_0;
    ap_ST_fsm_state24_blk <= ap_const_logic_0;
    ap_ST_fsm_state25_blk <= ap_const_logic_0;
    ap_ST_fsm_state26_blk <= ap_const_logic_0;

    ap_ST_fsm_state27_blk_assign_proc : process(OUTPUT_r_WREADY)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_WREADY)) then 
            ap_ST_fsm_state27_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state27_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state28_blk <= ap_const_logic_0;
    ap_ST_fsm_state29_blk <= ap_const_logic_0;
    ap_ST_fsm_state2_blk <= ap_const_logic_0;
    ap_ST_fsm_state30_blk <= ap_const_logic_0;
    ap_ST_fsm_state31_blk <= ap_const_logic_0;

    ap_ST_fsm_state32_blk_assign_proc : process(OUTPUT_r_BVALID)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_BVALID)) then 
            ap_ST_fsm_state32_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state32_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state3_blk_assign_proc : process(ap_block_state3_io)
    begin
        if ((ap_const_boolean_1 = ap_block_state3_io)) then 
            ap_ST_fsm_state3_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state3_blk <= ap_const_logic_0;
        end if; 
    end process;


    ap_ST_fsm_state4_blk_assign_proc : process(OUTPUT_r_AWREADY)
    begin
        if ((ap_const_logic_0 = OUTPUT_r_AWREADY)) then 
            ap_ST_fsm_state4_blk <= ap_const_logic_1;
        else 
            ap_ST_fsm_state4_blk <= ap_const_logic_0;
        end if; 
    end process;

    ap_ST_fsm_state5_blk <= ap_const_logic_0;
    ap_ST_fsm_state6_blk <= ap_const_logic_0;
    ap_ST_fsm_state7_blk <= ap_const_logic_0;
    ap_ST_fsm_state8_blk <= ap_const_logic_0;
    ap_ST_fsm_state9_blk <= ap_const_logic_0;

    ap_block_state13_io_assign_proc : process(BIAS_ARREADY, INPUT_r_ARREADY, WEIGHTS_ARREADY)
    begin
                ap_block_state13_io <= ((ap_const_logic_0 = WEIGHTS_ARREADY) or (ap_const_logic_0 = INPUT_r_ARREADY) or (ap_const_logic_0 = BIAS_ARREADY));
    end process;


    ap_block_state22_assign_proc : process(BIAS_RVALID, OUTPUT_r_BVALID)
    begin
                ap_block_state22 <= ((ap_const_logic_0 = OUTPUT_r_BVALID) or (ap_const_logic_0 = BIAS_RVALID));
    end process;


    ap_block_state3_io_assign_proc : process(BIAS_ARREADY, INPUT_r_ARREADY, OUTPUT_r_AWREADY, WEIGHTS_ARREADY)
    begin
                ap_block_state3_io <= ((ap_const_logic_0 = WEIGHTS_ARREADY) or (ap_const_logic_0 = OUTPUT_r_AWREADY) or (ap_const_logic_0 = INPUT_r_ARREADY) or (ap_const_logic_0 = BIAS_ARREADY));
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_299_p2)
    begin
        if (((icmp_ln18_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln18_fu_299_p2)
    begin
        if (((icmp_ln18_fu_299_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    bitcast_ln32_1_fu_540_p1 <= reg_267;
    bitcast_ln32_2_fu_549_p1 <= BIAS_addr_1_read_reg_668;
    bitcast_ln32_3_fu_553_p1 <= reg_267;
    bitcast_ln32_fu_526_p1 <= BIAS_addr_read_reg_650;
    grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_ap_start_reg;
    grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_ap_start_reg;

    grp_fu_263_ce_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, ap_CS_fsm_state16, ap_CS_fsm_state26, ap_CS_fsm_state23, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_ce, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_ce, ap_block_state13_io, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state24, ap_CS_fsm_state25)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_263_ce <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_263_ce <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_ce;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or ((ap_const_boolean_0 = ap_block_state13_io) and (ap_const_logic_1 = ap_CS_fsm_state13)))) then 
            grp_fu_263_ce <= ap_const_logic_1;
        else 
            grp_fu_263_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_263_p0_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, ap_CS_fsm_state23, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_sum_out, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din0, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_sum_2_out, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_263_p0 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_263_p0 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_263_p0 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_sum_2_out;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_263_p0 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_sum_out;
        else 
            grp_fu_263_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_263_p1_assign_proc : process(ap_CS_fsm_state13, ap_CS_fsm_state12, ap_CS_fsm_state22, bitcast_ln32_fu_526_p1, bitcast_ln32_2_fu_549_p1, ap_CS_fsm_state23, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din1, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_263_p1 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_263_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_263_p1 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_263_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            grp_fu_263_p1 <= bitcast_ln32_2_fu_549_p1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            grp_fu_263_p1 <= bitcast_ln32_fu_526_p1;
        else 
            grp_fu_263_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_681_ce_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_ce, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_ce)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_681_ce <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_ce;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_681_ce <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_ce;
        else 
            grp_fu_681_ce <= ap_const_logic_1;
        end if; 
    end process;


    grp_fu_681_p0_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din0, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_681_p0 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_681_p0 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din0;
        else 
            grp_fu_681_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_681_p1_assign_proc : process(ap_CS_fsm_state12, ap_CS_fsm_state22, grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din1, grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            grp_fu_681_p1 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_21_fu_252_grp_fu_681_p_din1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            grp_fu_681_p1 <= grp_fc6_hls_Pipeline_VITIS_LOOP_24_2_fu_241_grp_fu_681_p_din1;
        else 
            grp_fu_681_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    icmp_ln18_fu_299_p2 <= "1" when (unsigned(n_fu_128) < unsigned(ap_const_lv4_A)) else "0";
    or_ln32_fu_441_p2 <= (shl_ln1_fu_369_p3 or ap_const_lv6_4);
        sext_ln24_1_fu_512_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln24_1_reg_609),64));

        sext_ln24_2_fu_530_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln24_2_reg_627),64));

        sext_ln24_3_fu_335_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln24_fu_329_p2),64));

        sext_ln24_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln_fu_271_p4),64));

        sext_ln32_1_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_1_fu_411_p4),64));

        sext_ln32_2_fu_466_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_2_fu_456_p4),64));

        sext_ln32_3_fu_491_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln32_3_fu_481_p4),64));

        sext_ln32_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(trunc_ln1_fu_386_p4),64));

    shl_ln1_fu_369_p3 <= (n_fu_128 & ap_const_lv2_0);
    shl_ln24_1_fu_317_p3 <= (n_fu_128 & ap_const_lv5_0);
    shl_ln_fu_305_p3 <= (n_fu_128 & ap_const_lv9_0);
    sub_ln24_fu_329_p2 <= std_logic_vector(unsigned(zext_ln24_fu_313_p1) - unsigned(zext_ln24_1_fu_325_p1));
    trunc_ln1_fu_386_p4 <= add_ln32_fu_381_p2(63 downto 2);
    trunc_ln32_1_fu_411_p4 <= add_ln32_1_fu_406_p2(63 downto 2);
    trunc_ln32_2_fu_456_p4 <= add_ln32_2_fu_451_p2(63 downto 2);
    trunc_ln32_3_fu_481_p4 <= add_ln32_3_fu_476_p2(63 downto 2);
    trunc_ln_fu_271_p4 <= input_r_r(63 downto 2);
    zext_ln24_1_fu_325_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln24_1_fu_317_p3),14));
    zext_ln24_2_fu_360_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln24_1_fu_354_p2),64));
    zext_ln24_fu_313_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln_fu_305_p3),14));
    zext_ln32_1_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln32_fu_441_p2),64));
    zext_ln32_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(shl_ln1_fu_369_p3),64));
end behav;
