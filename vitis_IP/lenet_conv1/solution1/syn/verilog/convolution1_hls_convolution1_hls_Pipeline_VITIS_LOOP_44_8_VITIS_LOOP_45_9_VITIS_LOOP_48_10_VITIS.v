// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_44_8_VITIS_LOOP_45_9_VITIS_LOOP_48_10_VITIS (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RFIFONUM,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        sext_ln44_1,
        add_ln51_2,
        local_weights_address0,
        local_weights_ce0,
        local_weights_q0,
        local_input_address0,
        local_input_ce0,
        local_input_q0,
        local_bias_load_1,
        grp_fu_594_p_din0,
        grp_fu_594_p_din1,
        grp_fu_594_p_opcode,
        grp_fu_594_p_dout0,
        grp_fu_594_p_ce,
        grp_fu_598_p_din0,
        grp_fu_598_p_din1,
        grp_fu_598_p_dout0,
        grp_fu_598_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [63:0] m_axi_OUTPUT_r_AWADDR;
output  [0:0] m_axi_OUTPUT_r_AWID;
output  [31:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [0:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [31:0] m_axi_OUTPUT_r_WDATA;
output  [3:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [0:0] m_axi_OUTPUT_r_WID;
output  [0:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [63:0] m_axi_OUTPUT_r_ARADDR;
output  [0:0] m_axi_OUTPUT_r_ARID;
output  [31:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [0:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [31:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [0:0] m_axi_OUTPUT_r_RID;
input  [8:0] m_axi_OUTPUT_r_RFIFONUM;
input  [0:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [0:0] m_axi_OUTPUT_r_BID;
input  [0:0] m_axi_OUTPUT_r_BUSER;
input  [61:0] sext_ln44_1;
input  [5:0] add_ln51_2;
output  [7:0] local_weights_address0;
output   local_weights_ce0;
input  [31:0] local_weights_q0;
output  [9:0] local_input_address0;
output   local_input_ce0;
input  [31:0] local_input_q0;
input  [31:0] local_bias_load_1;
output  [31:0] grp_fu_594_p_din0;
output  [31:0] grp_fu_594_p_din1;
output  [1:0] grp_fu_594_p_opcode;
input  [31:0] grp_fu_594_p_dout0;
output   grp_fu_594_p_ce;
output  [31:0] grp_fu_598_p_din0;
output  [31:0] grp_fu_598_p_din1;
input  [31:0] grp_fu_598_p_dout0;
output   grp_fu_598_p_ce;

reg ap_idle;
reg m_axi_OUTPUT_r_WVALID;
reg local_weights_ce0;
reg local_input_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] icmp_ln49_2_reg_675;
reg   [0:0] icmp_ln49_2_reg_675_pp0_iter4_reg;
reg   [0:0] icmp_ln48_2_reg_679;
reg   [0:0] icmp_ln48_2_reg_679_pp0_iter4_reg;
reg    ap_predicate_op128_write_state15;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln44_reg_656;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    OUTPUT_r_blk_n_W;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln44_fu_241_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] or_ln45_fu_323_p2;
reg   [0:0] or_ln45_reg_660;
reg   [0:0] or_ln45_reg_660_pp0_iter1_reg;
wire   [0:0] icmp_ln49_2_fu_484_p2;
reg   [0:0] icmp_ln49_2_reg_675_pp0_iter1_reg;
reg   [0:0] icmp_ln49_2_reg_675_pp0_iter2_reg;
reg   [0:0] icmp_ln49_2_reg_675_pp0_iter3_reg;
wire   [0:0] icmp_ln48_2_fu_490_p2;
reg   [0:0] icmp_ln48_2_reg_679_pp0_iter1_reg;
reg   [0:0] icmp_ln48_2_reg_679_pp0_iter2_reg;
reg   [0:0] icmp_ln48_2_reg_679_pp0_iter3_reg;
reg   [31:0] local_input_load_reg_683;
reg    ap_block_pp0_stage2_11001;
reg   [31:0] local_weights_load_reg_688;
reg   [31:0] mul_1_reg_693;
wire   [31:0] select_ln45_fu_562_p3;
reg   [31:0] sum_2_reg_703;
wire   [31:0] bitcast_ln55_fu_575_p1;
reg   [31:0] bitcast_ln55_reg_708;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln51_7_fu_450_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln51_3_fu_473_p1;
wire    ap_block_pp0_stage2_01001;
reg   [31:0] sum_fu_96;
reg   [31:0] ap_sig_allocacmp_sum_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [2:0] kw_fu_100;
wire   [2:0] add_ln49_fu_478_p2;
reg   [2:0] kh_fu_104;
wire   [2:0] select_ln48_1_fu_395_p3;
reg   [5:0] indvar_flatten69_fu_108;
wire   [5:0] select_ln48_fu_502_p3;
reg   [4:0] w_fu_112;
wire   [4:0] select_ln45_4_fu_361_p3;
reg   [9:0] indvar_flatten83_fu_116;
wire   [9:0] select_ln45_5_fu_516_p3;
reg   [4:0] h_fu_120;
wire   [4:0] select_ln44_2_fu_309_p3;
reg   [14:0] indvar_flatten105_fu_124;
wire   [14:0] add_ln44_fu_247_p2;
reg   [31:0] grp_fu_180_p0;
reg   [31:0] grp_fu_180_p1;
wire   [0:0] icmp_ln45_fu_271_p2;
wire   [0:0] icmp_ln48_fu_297_p2;
wire   [0:0] xor_ln44_fu_285_p2;
wire   [4:0] add_ln44_1_fu_265_p2;
wire   [4:0] select_ln44_fu_277_p3;
wire   [0:0] and_ln44_fu_303_p2;
wire   [0:0] xor_ln45_fu_337_p2;
wire   [0:0] icmp_ln49_fu_291_p2;
wire   [0:0] and_ln44_2_fu_349_p2;
wire   [0:0] or_ln45_2_fu_343_p2;
wire   [4:0] add_ln45_1_fu_317_p2;
wire   [2:0] select_ln45_3_fu_329_p3;
wire   [0:0] and_ln45_fu_355_p2;
wire   [0:0] or_ln46_1_fu_375_p2;
wire   [0:0] or_ln46_fu_381_p2;
wire   [2:0] add_ln48_1_fu_369_p2;
wire   [5:0] zext_ln51_fu_403_p1;
wire   [5:0] add_ln51_fu_407_p2;
wire   [7:0] tmp_fu_416_p3;
wire   [7:0] zext_ln51_5_fu_412_p1;
wire   [4:0] zext_ln48_fu_430_p1;
wire   [2:0] select_ln46_fu_387_p3;
wire   [7:0] add_ln51_4_fu_424_p2;
wire   [7:0] zext_ln51_6_fu_440_p1;
wire   [7:0] add_ln51_5_fu_444_p2;
wire   [4:0] zext_ln49_fu_455_p1;
wire   [4:0] empty_fu_434_p2;
wire   [4:0] add_ln51_1_fu_459_p2;
wire   [9:0] tmp_9_fu_465_p3;
wire   [5:0] add_ln48_fu_496_p2;
wire   [9:0] add_ln45_fu_510_p2;
reg    grp_fu_180_ce;
reg    grp_fu_184_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 sum_fu_96 = 32'd0;
#0 kw_fu_100 = 3'd0;
#0 kh_fu_104 = 3'd0;
#0 indvar_flatten69_fu_108 = 6'd0;
#0 w_fu_112 = 5'd0;
#0 indvar_flatten83_fu_116 = 10'd0;
#0 h_fu_120 = 5'd0;
#0 indvar_flatten105_fu_124 = 15'd0;
#0 ap_done_reg = 1'b0;
end

convolution1_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fu_120 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        h_fu_120 <= select_ln44_2_fu_309_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten105_fu_124 <= 15'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten105_fu_124 <= add_ln44_fu_247_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten69_fu_108 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten69_fu_108 <= select_ln48_fu_502_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten83_fu_116 <= 10'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten83_fu_116 <= select_ln45_5_fu_516_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kh_fu_104 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        kh_fu_104 <= select_ln48_1_fu_395_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kw_fu_100 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        kw_fu_100 <= add_ln49_fu_478_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            sum_fu_96 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            sum_fu_96 <= grp_fu_594_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_fu_112 <= 5'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (icmp_ln44_fu_241_p2 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_fu_112 <= select_ln45_4_fu_361_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        local_input_load_reg_683 <= local_input_q0;
        local_weights_load_reg_688 <= local_weights_q0;
        mul_1_reg_693 <= grp_fu_598_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bitcast_ln55_reg_708 <= bitcast_ln55_fu_575_p1;
        icmp_ln44_reg_656 <= icmp_ln44_fu_241_p2;
        icmp_ln48_2_reg_679 <= icmp_ln48_2_fu_490_p2;
        icmp_ln48_2_reg_679_pp0_iter1_reg <= icmp_ln48_2_reg_679;
        icmp_ln48_2_reg_679_pp0_iter2_reg <= icmp_ln48_2_reg_679_pp0_iter1_reg;
        icmp_ln48_2_reg_679_pp0_iter3_reg <= icmp_ln48_2_reg_679_pp0_iter2_reg;
        icmp_ln48_2_reg_679_pp0_iter4_reg <= icmp_ln48_2_reg_679_pp0_iter3_reg;
        icmp_ln49_2_reg_675 <= icmp_ln49_2_fu_484_p2;
        icmp_ln49_2_reg_675_pp0_iter1_reg <= icmp_ln49_2_reg_675;
        icmp_ln49_2_reg_675_pp0_iter2_reg <= icmp_ln49_2_reg_675_pp0_iter1_reg;
        icmp_ln49_2_reg_675_pp0_iter3_reg <= icmp_ln49_2_reg_675_pp0_iter2_reg;
        icmp_ln49_2_reg_675_pp0_iter4_reg <= icmp_ln49_2_reg_675_pp0_iter3_reg;
        or_ln45_reg_660 <= or_ln45_fu_323_p2;
        or_ln45_reg_660_pp0_iter1_reg <= or_ln45_reg_660;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_2_reg_703 <= grp_fu_594_p_dout0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_predicate_op128_write_state15 == 1'b1))) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln44_reg_656 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sum_load = grp_fu_594_p_dout0;
    end else begin
        ap_sig_allocacmp_sum_load = sum_fu_96;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_180_ce = 1'b1;
    end else begin
        grp_fu_180_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_180_p0 = sum_2_reg_703;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_180_p0 = select_ln45_fu_562_p3;
    end else begin
        grp_fu_180_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_180_p1 = local_bias_load_1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_180_p1 = mul_1_reg_693;
    end else begin
        grp_fu_180_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_184_ce = 1'b1;
    end else begin
        grp_fu_184_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_ce0 = 1'b1;
    end else begin
        local_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_weights_ce0 = 1'b1;
    end else begin
        local_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op128_write_state15 == 1'b1))) begin
        m_axi_OUTPUT_r_WVALID = 1'b1;
    end else begin
        m_axi_OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln44_1_fu_265_p2 = (h_fu_120 + 5'd1);

assign add_ln44_fu_247_p2 = (indvar_flatten105_fu_124 + 15'd1);

assign add_ln45_1_fu_317_p2 = (select_ln44_fu_277_p3 + 5'd1);

assign add_ln45_fu_510_p2 = (indvar_flatten83_fu_116 + 10'd1);

assign add_ln48_1_fu_369_p2 = (select_ln45_3_fu_329_p3 + 3'd1);

assign add_ln48_fu_496_p2 = (indvar_flatten69_fu_108 + 6'd1);

assign add_ln49_fu_478_p2 = (select_ln46_fu_387_p3 + 3'd1);

assign add_ln51_1_fu_459_p2 = (zext_ln49_fu_455_p1 + select_ln45_4_fu_361_p3);

assign add_ln51_4_fu_424_p2 = (tmp_fu_416_p3 + zext_ln51_5_fu_412_p1);

assign add_ln51_5_fu_444_p2 = (add_ln51_4_fu_424_p2 + zext_ln51_6_fu_440_p1);

assign add_ln51_fu_407_p2 = (add_ln51_2 + zext_ln51_fu_403_p1);

assign and_ln44_2_fu_349_p2 = (xor_ln44_fu_285_p2 & icmp_ln49_fu_291_p2);

assign and_ln44_fu_303_p2 = (xor_ln44_fu_285_p2 & icmp_ln48_fu_297_p2);

assign and_ln45_fu_355_p2 = (or_ln45_2_fu_343_p2 & and_ln44_2_fu_349_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_state15_io = ((m_axi_OUTPUT_r_WREADY == 1'b0) & (ap_predicate_op128_write_state15 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

always @ (*) begin
    ap_predicate_op128_write_state15 = ((icmp_ln49_2_reg_675_pp0_iter4_reg == 1'd1) & (icmp_ln48_2_reg_679_pp0_iter4_reg == 1'd1));
end

assign bitcast_ln55_fu_575_p1 = grp_fu_594_p_dout0;

assign empty_fu_434_p2 = (zext_ln48_fu_430_p1 + select_ln44_2_fu_309_p3);

assign grp_fu_594_p_ce = grp_fu_180_ce;

assign grp_fu_594_p_din0 = grp_fu_180_p0;

assign grp_fu_594_p_din1 = grp_fu_180_p1;

assign grp_fu_594_p_opcode = 2'd0;

assign grp_fu_598_p_ce = grp_fu_184_ce;

assign grp_fu_598_p_din0 = local_input_load_reg_683;

assign grp_fu_598_p_din1 = local_weights_load_reg_688;

assign icmp_ln44_fu_241_p2 = ((indvar_flatten105_fu_124 == 15'd19600) ? 1'b1 : 1'b0);

assign icmp_ln45_fu_271_p2 = ((indvar_flatten83_fu_116 == 10'd700) ? 1'b1 : 1'b0);

assign icmp_ln48_2_fu_490_p2 = ((select_ln48_1_fu_395_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln48_fu_297_p2 = ((indvar_flatten69_fu_108 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln49_2_fu_484_p2 = ((add_ln49_fu_478_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln49_fu_291_p2 = ((kw_fu_100 == 3'd5) ? 1'b1 : 1'b0);

assign local_input_address0 = zext_ln51_3_fu_473_p1;

assign local_weights_address0 = zext_ln51_7_fu_450_p1;

assign m_axi_OUTPUT_r_ARADDR = 64'd0;

assign m_axi_OUTPUT_r_ARBURST = 2'd0;

assign m_axi_OUTPUT_r_ARCACHE = 4'd0;

assign m_axi_OUTPUT_r_ARID = 1'd0;

assign m_axi_OUTPUT_r_ARLEN = 32'd0;

assign m_axi_OUTPUT_r_ARLOCK = 2'd0;

assign m_axi_OUTPUT_r_ARPROT = 3'd0;

assign m_axi_OUTPUT_r_ARQOS = 4'd0;

assign m_axi_OUTPUT_r_ARREGION = 4'd0;

assign m_axi_OUTPUT_r_ARSIZE = 3'd0;

assign m_axi_OUTPUT_r_ARUSER = 1'd0;

assign m_axi_OUTPUT_r_ARVALID = 1'b0;

assign m_axi_OUTPUT_r_AWADDR = 64'd0;

assign m_axi_OUTPUT_r_AWBURST = 2'd0;

assign m_axi_OUTPUT_r_AWCACHE = 4'd0;

assign m_axi_OUTPUT_r_AWID = 1'd0;

assign m_axi_OUTPUT_r_AWLEN = 32'd0;

assign m_axi_OUTPUT_r_AWLOCK = 2'd0;

assign m_axi_OUTPUT_r_AWPROT = 3'd0;

assign m_axi_OUTPUT_r_AWQOS = 4'd0;

assign m_axi_OUTPUT_r_AWREGION = 4'd0;

assign m_axi_OUTPUT_r_AWSIZE = 3'd0;

assign m_axi_OUTPUT_r_AWUSER = 1'd0;

assign m_axi_OUTPUT_r_AWVALID = 1'b0;

assign m_axi_OUTPUT_r_BREADY = 1'b0;

assign m_axi_OUTPUT_r_RREADY = 1'b0;

assign m_axi_OUTPUT_r_WDATA = bitcast_ln55_reg_708;

assign m_axi_OUTPUT_r_WID = 1'd0;

assign m_axi_OUTPUT_r_WLAST = 1'b0;

assign m_axi_OUTPUT_r_WSTRB = 4'd15;

assign m_axi_OUTPUT_r_WUSER = 1'd0;

assign or_ln45_2_fu_343_p2 = (xor_ln45_fu_337_p2 | icmp_ln45_fu_271_p2);

assign or_ln45_fu_323_p2 = (icmp_ln45_fu_271_p2 | and_ln44_fu_303_p2);

assign or_ln46_1_fu_375_p2 = (and_ln45_fu_355_p2 | and_ln44_fu_303_p2);

assign or_ln46_fu_381_p2 = (or_ln46_1_fu_375_p2 | icmp_ln45_fu_271_p2);

assign select_ln44_2_fu_309_p3 = ((icmp_ln45_fu_271_p2[0:0] == 1'b1) ? add_ln44_1_fu_265_p2 : h_fu_120);

assign select_ln44_fu_277_p3 = ((icmp_ln45_fu_271_p2[0:0] == 1'b1) ? 5'd0 : w_fu_112);

assign select_ln45_3_fu_329_p3 = ((or_ln45_fu_323_p2[0:0] == 1'b1) ? 3'd0 : kh_fu_104);

assign select_ln45_4_fu_361_p3 = ((and_ln44_fu_303_p2[0:0] == 1'b1) ? add_ln45_1_fu_317_p2 : select_ln44_fu_277_p3);

assign select_ln45_5_fu_516_p3 = ((icmp_ln45_fu_271_p2[0:0] == 1'b1) ? 10'd1 : add_ln45_fu_510_p2);

assign select_ln45_fu_562_p3 = ((or_ln45_reg_660_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_sum_load);

assign select_ln46_fu_387_p3 = ((or_ln46_fu_381_p2[0:0] == 1'b1) ? 3'd0 : kw_fu_100);

assign select_ln48_1_fu_395_p3 = ((and_ln45_fu_355_p2[0:0] == 1'b1) ? add_ln48_1_fu_369_p2 : select_ln45_3_fu_329_p3);

assign select_ln48_fu_502_p3 = ((or_ln45_fu_323_p2[0:0] == 1'b1) ? 6'd1 : add_ln48_fu_496_p2);

assign tmp_9_fu_465_p3 = {{empty_fu_434_p2}, {add_ln51_1_fu_459_p2}};

assign tmp_fu_416_p3 = {{add_ln51_fu_407_p2}, {2'd0}};

assign xor_ln44_fu_285_p2 = (icmp_ln45_fu_271_p2 ^ 1'd1);

assign xor_ln45_fu_337_p2 = (icmp_ln48_fu_297_p2 ^ 1'd1);

assign zext_ln48_fu_430_p1 = select_ln48_1_fu_395_p3;

assign zext_ln49_fu_455_p1 = select_ln46_fu_387_p3;

assign zext_ln51_3_fu_473_p1 = tmp_9_fu_465_p3;

assign zext_ln51_5_fu_412_p1 = add_ln51_fu_407_p2;

assign zext_ln51_6_fu_440_p1 = select_ln46_fu_387_p3;

assign zext_ln51_7_fu_450_p1 = add_ln51_5_fu_444_p2;

assign zext_ln51_fu_403_p1 = select_ln48_1_fu_395_p3;

endmodule //convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_44_8_VITIS_LOOP_45_9_VITIS_LOOP_48_10_VITIS
