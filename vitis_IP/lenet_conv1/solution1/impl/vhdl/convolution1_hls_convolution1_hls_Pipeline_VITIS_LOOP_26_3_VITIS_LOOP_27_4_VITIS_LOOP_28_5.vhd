-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_26_3_VITIS_LOOP_27_4_VITIS_LOOP_28_5 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_WEIGHTS_AWVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_AWREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_WEIGHTS_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_WVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_WREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_WLAST : OUT STD_LOGIC;
    m_axi_WEIGHTS_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_ARVALID : OUT STD_LOGIC;
    m_axi_WEIGHTS_ARREADY : IN STD_LOGIC;
    m_axi_WEIGHTS_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_WEIGHTS_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_WEIGHTS_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_WEIGHTS_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_RVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_RREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_WEIGHTS_RLAST : IN STD_LOGIC;
    m_axi_WEIGHTS_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_WEIGHTS_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_BVALID : IN STD_LOGIC;
    m_axi_WEIGHTS_BREADY : OUT STD_LOGIC;
    m_axi_WEIGHTS_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_WEIGHTS_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_WEIGHTS_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln26 : IN STD_LOGIC_VECTOR (61 downto 0);
    local_weights_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_weights_ce0 : OUT STD_LOGIC;
    local_weights_we0 : OUT STD_LOGIC;
    local_weights_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_26_3_VITIS_LOOP_27_4_VITIS_LOOP_28_5 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln26_fu_146_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal WEIGHTS_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal WEIGHTS_addr_read_reg_408 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln30_5_fu_315_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal kw_fu_70 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln28_fu_324_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal kh_fu_74 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln27_1_fu_247_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten6_fu_78 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln27_2_fu_336_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal co_fu_82 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln26_1_fu_219_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten19_fu_86 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal add_ln26_1_fu_152_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_sig_allocacmp_indvar_flatten19_load : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln27_fu_187_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln28_fu_207_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln26_fu_201_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln26_fu_181_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln26_fu_193_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln26_fu_213_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln27_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln27_fu_227_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_259_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln30_1_fu_267_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_fu_255_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_fu_271_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln30_2_fu_277_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln30_1_fu_281_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_291_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_3_fu_287_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln27_fu_239_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln30_2_fu_299_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln30_4_fu_305_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln30_3_fu_309_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln27_1_fu_330_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component convolution1_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component convolution1_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    co_fu_82_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    co_fu_82 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    co_fu_82 <= select_ln26_1_fu_219_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten19_fu_86_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((icmp_ln26_fu_146_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then 
                    indvar_flatten19_fu_86 <= add_ln26_1_fu_152_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten19_fu_86 <= ap_const_lv8_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten6_fu_78_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    indvar_flatten6_fu_78 <= ap_const_lv6_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    indvar_flatten6_fu_78 <= select_ln27_2_fu_336_p3;
                end if;
            end if; 
        end if;
    end process;

    kh_fu_74_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    kh_fu_74 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    kh_fu_74 <= select_ln27_1_fu_247_p3;
                end if;
            end if; 
        end if;
    end process;

    kw_fu_70_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
                    kw_fu_70 <= ap_const_lv3_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    kw_fu_70 <= add_ln28_fu_324_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                WEIGHTS_addr_read_reg_408 <= m_axi_WEIGHTS_RDATA;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    WEIGHTS_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_WEIGHTS_RVALID, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            WEIGHTS_blk_n_R <= m_axi_WEIGHTS_RVALID;
        else 
            WEIGHTS_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln26_1_fu_152_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten19_load) + unsigned(ap_const_lv8_1));
    add_ln26_fu_181_p2 <= std_logic_vector(unsigned(co_fu_82) + unsigned(ap_const_lv3_1));
    add_ln27_1_fu_330_p2 <= std_logic_vector(unsigned(indvar_flatten6_fu_78) + unsigned(ap_const_lv6_1));
    add_ln27_fu_227_p2 <= std_logic_vector(unsigned(select_ln26_fu_193_p3) + unsigned(ap_const_lv3_1));
    add_ln28_fu_324_p2 <= std_logic_vector(unsigned(select_ln27_fu_239_p3) + unsigned(ap_const_lv3_1));
    add_ln30_1_fu_281_p2 <= std_logic_vector(unsigned(add_ln30_fu_271_p2) + unsigned(zext_ln30_2_fu_277_p1));
    add_ln30_2_fu_299_p2 <= std_logic_vector(unsigned(tmp_fu_291_p3) + unsigned(zext_ln30_3_fu_287_p1));
    add_ln30_3_fu_309_p2 <= std_logic_vector(unsigned(add_ln30_2_fu_299_p2) + unsigned(zext_ln30_4_fu_305_p1));
    add_ln30_fu_271_p2 <= std_logic_vector(unsigned(zext_ln30_1_fu_267_p1) + unsigned(zext_ln30_fu_255_p1));
    and_ln26_fu_213_p2 <= (xor_ln26_fu_201_p2 and icmp_ln28_fu_207_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_WEIGHTS_RVALID)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (m_axi_WEIGHTS_RVALID = ap_const_logic_0);
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln26_fu_146_p2)
    begin
        if (((icmp_ln26_fu_146_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten19_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten19_fu_86)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_indvar_flatten19_load <= ap_const_lv8_0;
        else 
            ap_sig_allocacmp_indvar_flatten19_load <= indvar_flatten19_fu_86;
        end if; 
    end process;

    icmp_ln26_fu_146_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten19_load = ap_const_lv8_96) else "0";
    icmp_ln27_fu_187_p2 <= "1" when (indvar_flatten6_fu_78 = ap_const_lv6_19) else "0";
    icmp_ln28_fu_207_p2 <= "1" when (kw_fu_70 = ap_const_lv3_5) else "0";
    local_weights_address0 <= zext_ln30_5_fu_315_p1(8 - 1 downto 0);

    local_weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_weights_ce0 <= ap_const_logic_1;
        else 
            local_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_d0 <= WEIGHTS_addr_read_reg_408;

    local_weights_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_weights_we0 <= ap_const_logic_1;
        else 
            local_weights_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHTS_ARADDR <= ap_const_lv64_0;
    m_axi_WEIGHTS_ARBURST <= ap_const_lv2_0;
    m_axi_WEIGHTS_ARCACHE <= ap_const_lv4_0;
    m_axi_WEIGHTS_ARID <= ap_const_lv1_0;
    m_axi_WEIGHTS_ARLEN <= ap_const_lv32_0;
    m_axi_WEIGHTS_ARLOCK <= ap_const_lv2_0;
    m_axi_WEIGHTS_ARPROT <= ap_const_lv3_0;
    m_axi_WEIGHTS_ARQOS <= ap_const_lv4_0;
    m_axi_WEIGHTS_ARREGION <= ap_const_lv4_0;
    m_axi_WEIGHTS_ARSIZE <= ap_const_lv3_0;
    m_axi_WEIGHTS_ARUSER <= ap_const_lv1_0;
    m_axi_WEIGHTS_ARVALID <= ap_const_logic_0;
    m_axi_WEIGHTS_AWADDR <= ap_const_lv64_0;
    m_axi_WEIGHTS_AWBURST <= ap_const_lv2_0;
    m_axi_WEIGHTS_AWCACHE <= ap_const_lv4_0;
    m_axi_WEIGHTS_AWID <= ap_const_lv1_0;
    m_axi_WEIGHTS_AWLEN <= ap_const_lv32_0;
    m_axi_WEIGHTS_AWLOCK <= ap_const_lv2_0;
    m_axi_WEIGHTS_AWPROT <= ap_const_lv3_0;
    m_axi_WEIGHTS_AWQOS <= ap_const_lv4_0;
    m_axi_WEIGHTS_AWREGION <= ap_const_lv4_0;
    m_axi_WEIGHTS_AWSIZE <= ap_const_lv3_0;
    m_axi_WEIGHTS_AWUSER <= ap_const_lv1_0;
    m_axi_WEIGHTS_AWVALID <= ap_const_logic_0;
    m_axi_WEIGHTS_BREADY <= ap_const_logic_0;

    m_axi_WEIGHTS_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_WEIGHTS_RREADY <= ap_const_logic_1;
        else 
            m_axi_WEIGHTS_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_WEIGHTS_WDATA <= ap_const_lv32_0;
    m_axi_WEIGHTS_WID <= ap_const_lv1_0;
    m_axi_WEIGHTS_WLAST <= ap_const_logic_0;
    m_axi_WEIGHTS_WSTRB <= ap_const_lv4_0;
    m_axi_WEIGHTS_WUSER <= ap_const_lv1_0;
    m_axi_WEIGHTS_WVALID <= ap_const_logic_0;
    or_ln27_fu_233_p2 <= (icmp_ln27_fu_187_p2 or and_ln26_fu_213_p2);
    select_ln26_1_fu_219_p3 <= 
        add_ln26_fu_181_p2 when (icmp_ln27_fu_187_p2(0) = '1') else 
        co_fu_82;
    select_ln26_fu_193_p3 <= 
        ap_const_lv3_0 when (icmp_ln27_fu_187_p2(0) = '1') else 
        kh_fu_74;
    select_ln27_1_fu_247_p3 <= 
        add_ln27_fu_227_p2 when (and_ln26_fu_213_p2(0) = '1') else 
        select_ln26_fu_193_p3;
    select_ln27_2_fu_336_p3 <= 
        ap_const_lv6_1 when (icmp_ln27_fu_187_p2(0) = '1') else 
        add_ln27_1_fu_330_p2;
    select_ln27_fu_239_p3 <= 
        ap_const_lv3_0 when (or_ln27_fu_233_p2(0) = '1') else 
        kw_fu_70;
    tmp_2_fu_259_p3 <= (select_ln26_1_fu_219_p3 & ap_const_lv2_0);
    tmp_fu_291_p3 <= (add_ln30_1_fu_281_p2 & ap_const_lv2_0);
    xor_ln26_fu_201_p2 <= (icmp_ln27_fu_187_p2 xor ap_const_lv1_1);
    zext_ln30_1_fu_267_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_2_fu_259_p3),6));
    zext_ln30_2_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_1_fu_247_p3),6));
    zext_ln30_3_fu_287_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_1_fu_281_p2),8));
    zext_ln30_4_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln27_fu_239_p3),8));
    zext_ln30_5_fu_315_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln30_3_fu_309_p2),64));
    zext_ln30_fu_255_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln26_1_fu_219_p3),6));
end behav;
