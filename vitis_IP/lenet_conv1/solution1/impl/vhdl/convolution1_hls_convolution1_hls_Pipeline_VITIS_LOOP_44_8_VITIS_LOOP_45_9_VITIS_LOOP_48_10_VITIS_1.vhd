-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_44_8_VITIS_LOOP_45_9_VITIS_LOOP_48_10_VITIS_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln44 : IN STD_LOGIC_VECTOR (61 downto 0);
    or_ln51 : IN STD_LOGIC_VECTOR (4 downto 0);
    local_weights_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_weights_ce0 : OUT STD_LOGIC;
    local_weights_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    local_input_ce0 : OUT STD_LOGIC;
    local_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_bias_load : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_594_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_594_p_ce : OUT STD_LOGIC;
    grp_fu_598_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_598_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_598_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_598_p_ce : OUT STD_LOGIC );
end;


architecture behav of convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_44_8_VITIS_LOOP_45_9_VITIS_LOOP_48_10_VITIS_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv15_0 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    constant ap_const_lv15_4C90 : STD_LOGIC_VECTOR (14 downto 0) := "100110010010000";
    constant ap_const_lv15_1 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000001";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv10_2BC : STD_LOGIC_VECTOR (9 downto 0) := "1010111100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal icmp_ln49_1_reg_679 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_679_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_reg_683 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_reg_683_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op129_write_state15 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln44_reg_660 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal or_ln51_cast_fu_192_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal or_ln51_cast_reg_655 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln44_fu_245_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln45_fu_327_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_664 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_reg_664_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_fu_488_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_679_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_679_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_1_reg_679_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_fu_494_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_reg_683_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_reg_683_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_1_reg_683_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal local_input_load_reg_687 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal local_weights_load_reg_692 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_reg_697 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln45_1_fu_566_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_reg_707 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln55_fu_579_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln55_reg_712 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln51_4_fu_454_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln51_2_fu_477_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal sum_1_fu_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_sum_1_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal kw_fu_100 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln49_fu_482_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kh_fu_104 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln48_fu_399_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten26_fu_108 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln48_1_fu_506_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal w_fu_112 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln45_2_fu_365_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten40_fu_116 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    signal select_ln45_3_fu_520_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal h_fu_120 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    signal select_ln44_1_fu_313_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal indvar_flatten62_fu_124 : STD_LOGIC_VECTOR (14 downto 0) := "000000000000000";
    signal add_ln44_1_fu_251_p2 : STD_LOGIC_VECTOR (14 downto 0);
    signal grp_fu_180_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_180_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln45_fu_275_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln48_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln44_fu_289_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln44_fu_269_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln44_fu_281_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal and_ln44_1_fu_307_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln45_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln49_fu_295_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln44_fu_353_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln45_1_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln45_fu_321_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln45_fu_333_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln45_fu_359_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln46_1_fu_385_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln48_fu_373_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal zext_ln51_fu_407_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln51_1_fu_411_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_fu_420_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_1_fu_416_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln48_fu_434_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal select_ln46_fu_391_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln51_2_fu_428_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_3_fu_444_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln51_3_fu_448_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln49_fu_459_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal empty_fu_438_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln51_fu_463_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_7_fu_469_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln48_1_fu_500_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln45_1_fu_514_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal grp_fu_180_ce : STD_LOGIC;
    signal grp_fu_184_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component convolution1_hls_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_hls_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution1_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component convolution1_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    h_fu_120_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_fu_120 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                h_fu_120 <= select_ln44_1_fu_313_p3;
            end if; 
        end if;
    end process;

    indvar_flatten26_fu_108_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten26_fu_108 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten26_fu_108 <= select_ln48_1_fu_506_p3;
            end if; 
        end if;
    end process;

    indvar_flatten40_fu_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten40_fu_116 <= ap_const_lv10_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten40_fu_116 <= select_ln45_3_fu_520_p3;
            end if; 
        end if;
    end process;

    indvar_flatten62_fu_124_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten62_fu_124 <= ap_const_lv15_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten62_fu_124 <= add_ln44_1_fu_251_p2;
            end if; 
        end if;
    end process;

    kh_fu_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kh_fu_104 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                kh_fu_104 <= select_ln48_fu_399_p3;
            end if; 
        end if;
    end process;

    kw_fu_100_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kw_fu_100 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                kw_fu_100 <= add_ln49_fu_482_p2;
            end if; 
        end if;
    end process;

    sum_1_fu_96_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    sum_1_fu_96 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    sum_1_fu_96 <= grp_fu_594_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    w_fu_112_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_fu_112 <= ap_const_lv5_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (icmp_ln44_fu_245_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_fu_112 <= select_ln45_2_fu_365_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                local_input_load_reg_687 <= local_input_q0;
                local_weights_load_reg_692 <= local_weights_q0;
                mul_reg_697 <= grp_fu_598_p_dout0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                bitcast_ln55_reg_712 <= bitcast_ln55_fu_579_p1;
                icmp_ln44_reg_660 <= icmp_ln44_fu_245_p2;
                icmp_ln48_1_reg_683 <= icmp_ln48_1_fu_494_p2;
                icmp_ln48_1_reg_683_pp0_iter1_reg <= icmp_ln48_1_reg_683;
                icmp_ln48_1_reg_683_pp0_iter2_reg <= icmp_ln48_1_reg_683_pp0_iter1_reg;
                icmp_ln48_1_reg_683_pp0_iter3_reg <= icmp_ln48_1_reg_683_pp0_iter2_reg;
                icmp_ln48_1_reg_683_pp0_iter4_reg <= icmp_ln48_1_reg_683_pp0_iter3_reg;
                icmp_ln49_1_reg_679 <= icmp_ln49_1_fu_488_p2;
                icmp_ln49_1_reg_679_pp0_iter1_reg <= icmp_ln49_1_reg_679;
                icmp_ln49_1_reg_679_pp0_iter2_reg <= icmp_ln49_1_reg_679_pp0_iter1_reg;
                icmp_ln49_1_reg_679_pp0_iter3_reg <= icmp_ln49_1_reg_679_pp0_iter2_reg;
                icmp_ln49_1_reg_679_pp0_iter4_reg <= icmp_ln49_1_reg_679_pp0_iter3_reg;
                or_ln45_reg_664 <= or_ln45_fu_327_p2;
                or_ln45_reg_664_pp0_iter1_reg <= or_ln45_reg_664;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                    or_ln51_cast_reg_655(4 downto 0) <= or_ln51_cast_fu_192_p1(4 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_reg_707 <= grp_fu_594_p_dout0;
            end if;
        end if;
    end process;
    or_ln51_cast_reg_655(5) <= '0';

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    OUTPUT_r_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, m_axi_OUTPUT_r_WREADY, ap_predicate_op129_write_state15, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_predicate_op129_write_state15 = ap_const_boolean_1))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln44_1_fu_251_p2 <= std_logic_vector(unsigned(indvar_flatten62_fu_124) + unsigned(ap_const_lv15_1));
    add_ln44_fu_269_p2 <= std_logic_vector(unsigned(h_fu_120) + unsigned(ap_const_lv5_1));
    add_ln45_1_fu_514_p2 <= std_logic_vector(unsigned(indvar_flatten40_fu_116) + unsigned(ap_const_lv10_1));
    add_ln45_fu_321_p2 <= std_logic_vector(unsigned(select_ln44_fu_281_p3) + unsigned(ap_const_lv5_1));
    add_ln48_1_fu_500_p2 <= std_logic_vector(unsigned(indvar_flatten26_fu_108) + unsigned(ap_const_lv6_1));
    add_ln48_fu_373_p2 <= std_logic_vector(unsigned(select_ln45_fu_333_p3) + unsigned(ap_const_lv3_1));
    add_ln49_fu_482_p2 <= std_logic_vector(unsigned(select_ln46_fu_391_p3) + unsigned(ap_const_lv3_1));
    add_ln51_1_fu_411_p2 <= std_logic_vector(unsigned(or_ln51_cast_reg_655) + unsigned(zext_ln51_fu_407_p1));
    add_ln51_2_fu_428_p2 <= std_logic_vector(unsigned(tmp_fu_420_p3) + unsigned(zext_ln51_1_fu_416_p1));
    add_ln51_3_fu_448_p2 <= std_logic_vector(unsigned(add_ln51_2_fu_428_p2) + unsigned(zext_ln51_3_fu_444_p1));
    add_ln51_fu_463_p2 <= std_logic_vector(unsigned(zext_ln49_fu_459_p1) + unsigned(select_ln45_2_fu_365_p3));
    and_ln44_1_fu_307_p2 <= (xor_ln44_fu_289_p2 and icmp_ln48_fu_301_p2);
    and_ln44_fu_353_p2 <= (xor_ln44_fu_289_p2 and icmp_ln49_fu_295_p2);
    and_ln45_fu_359_p2 <= (or_ln45_1_fu_347_p2 and and_ln44_fu_353_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state15_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state15_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io));
    end process;


    ap_block_state15_io_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_predicate_op129_write_state15)
    begin
                ap_block_state15_io <= ((m_axi_OUTPUT_r_WREADY = ap_const_logic_0) and (ap_predicate_op129_write_state15 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln44_reg_660)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln44_reg_660 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op129_write_state15_assign_proc : process(icmp_ln49_1_reg_679_pp0_iter4_reg, icmp_ln48_1_reg_683_pp0_iter4_reg)
    begin
                ap_predicate_op129_write_state15 <= ((icmp_ln49_1_reg_679_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln48_1_reg_683_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_sum_1_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, sum_1_fu_96, ap_block_pp0_stage0, grp_fu_594_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sum_1_load <= grp_fu_594_p_dout0;
        else 
            ap_sig_allocacmp_sum_1_load <= sum_1_fu_96;
        end if; 
    end process;

    bitcast_ln55_fu_579_p1 <= grp_fu_594_p_dout0;
    empty_fu_438_p2 <= std_logic_vector(unsigned(zext_ln48_fu_434_p1) + unsigned(select_ln44_1_fu_313_p3));

    grp_fu_180_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_180_ce <= ap_const_logic_1;
        else 
            grp_fu_180_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_180_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, select_ln45_1_fu_566_p3, sum_reg_707, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_180_p0 <= sum_reg_707;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_180_p0 <= select_ln45_1_fu_566_p3;
        else 
            grp_fu_180_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_180_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, local_bias_load, ap_CS_fsm_pp0_stage1, mul_reg_697, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_180_p1 <= local_bias_load;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_180_p1 <= mul_reg_697;
        else 
            grp_fu_180_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_184_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_184_ce <= ap_const_logic_1;
        else 
            grp_fu_184_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_594_p_ce <= grp_fu_180_ce;
    grp_fu_594_p_din0 <= grp_fu_180_p0;
    grp_fu_594_p_din1 <= grp_fu_180_p1;
    grp_fu_594_p_opcode <= ap_const_lv2_0;
    grp_fu_598_p_ce <= grp_fu_184_ce;
    grp_fu_598_p_din0 <= local_input_load_reg_687;
    grp_fu_598_p_din1 <= local_weights_load_reg_692;
    icmp_ln44_fu_245_p2 <= "1" when (indvar_flatten62_fu_124 = ap_const_lv15_4C90) else "0";
    icmp_ln45_fu_275_p2 <= "1" when (indvar_flatten40_fu_116 = ap_const_lv10_2BC) else "0";
    icmp_ln48_1_fu_494_p2 <= "1" when (select_ln48_fu_399_p3 = ap_const_lv3_4) else "0";
    icmp_ln48_fu_301_p2 <= "1" when (indvar_flatten26_fu_108 = ap_const_lv6_19) else "0";
    icmp_ln49_1_fu_488_p2 <= "1" when (add_ln49_fu_482_p2 = ap_const_lv3_5) else "0";
    icmp_ln49_fu_295_p2 <= "1" when (kw_fu_100 = ap_const_lv3_5) else "0";
    local_input_address0 <= zext_ln51_2_fu_477_p1(10 - 1 downto 0);

    local_input_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_ce0 <= ap_const_logic_1;
        else 
            local_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_address0 <= zext_ln51_4_fu_454_p1(8 - 1 downto 0);

    local_weights_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_weights_ce0 <= ap_const_logic_1;
        else 
            local_weights_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_OUTPUT_r_ARADDR <= ap_const_lv64_0;
    m_axi_OUTPUT_r_ARBURST <= ap_const_lv2_0;
    m_axi_OUTPUT_r_ARCACHE <= ap_const_lv4_0;
    m_axi_OUTPUT_r_ARID <= ap_const_lv1_0;
    m_axi_OUTPUT_r_ARLEN <= ap_const_lv32_0;
    m_axi_OUTPUT_r_ARLOCK <= ap_const_lv2_0;
    m_axi_OUTPUT_r_ARPROT <= ap_const_lv3_0;
    m_axi_OUTPUT_r_ARQOS <= ap_const_lv4_0;
    m_axi_OUTPUT_r_ARREGION <= ap_const_lv4_0;
    m_axi_OUTPUT_r_ARSIZE <= ap_const_lv3_0;
    m_axi_OUTPUT_r_ARUSER <= ap_const_lv1_0;
    m_axi_OUTPUT_r_ARVALID <= ap_const_logic_0;
    m_axi_OUTPUT_r_AWADDR <= ap_const_lv64_0;
    m_axi_OUTPUT_r_AWBURST <= ap_const_lv2_0;
    m_axi_OUTPUT_r_AWCACHE <= ap_const_lv4_0;
    m_axi_OUTPUT_r_AWID <= ap_const_lv1_0;
    m_axi_OUTPUT_r_AWLEN <= ap_const_lv32_0;
    m_axi_OUTPUT_r_AWLOCK <= ap_const_lv2_0;
    m_axi_OUTPUT_r_AWPROT <= ap_const_lv3_0;
    m_axi_OUTPUT_r_AWQOS <= ap_const_lv4_0;
    m_axi_OUTPUT_r_AWREGION <= ap_const_lv4_0;
    m_axi_OUTPUT_r_AWSIZE <= ap_const_lv3_0;
    m_axi_OUTPUT_r_AWUSER <= ap_const_lv1_0;
    m_axi_OUTPUT_r_AWVALID <= ap_const_logic_0;
    m_axi_OUTPUT_r_BREADY <= ap_const_logic_0;
    m_axi_OUTPUT_r_RREADY <= ap_const_logic_0;
    m_axi_OUTPUT_r_WDATA <= bitcast_ln55_reg_712;
    m_axi_OUTPUT_r_WID <= ap_const_lv1_0;
    m_axi_OUTPUT_r_WLAST <= ap_const_logic_0;
    m_axi_OUTPUT_r_WSTRB <= ap_const_lv4_F;
    m_axi_OUTPUT_r_WUSER <= ap_const_lv1_0;

    m_axi_OUTPUT_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_predicate_op129_write_state15, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op129_write_state15 = ap_const_boolean_1))) then 
            m_axi_OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln45_1_fu_347_p2 <= (xor_ln45_fu_341_p2 or icmp_ln45_fu_275_p2);
    or_ln45_fu_327_p2 <= (icmp_ln45_fu_275_p2 or and_ln44_1_fu_307_p2);
    or_ln46_1_fu_385_p2 <= (or_ln46_fu_379_p2 or icmp_ln45_fu_275_p2);
    or_ln46_fu_379_p2 <= (and_ln45_fu_359_p2 or and_ln44_1_fu_307_p2);
    or_ln51_cast_fu_192_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln51),6));
    select_ln44_1_fu_313_p3 <= 
        add_ln44_fu_269_p2 when (icmp_ln45_fu_275_p2(0) = '1') else 
        h_fu_120;
    select_ln44_fu_281_p3 <= 
        ap_const_lv5_0 when (icmp_ln45_fu_275_p2(0) = '1') else 
        w_fu_112;
    select_ln45_1_fu_566_p3 <= 
        ap_const_lv32_0 when (or_ln45_reg_664_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_sum_1_load;
    select_ln45_2_fu_365_p3 <= 
        add_ln45_fu_321_p2 when (and_ln44_1_fu_307_p2(0) = '1') else 
        select_ln44_fu_281_p3;
    select_ln45_3_fu_520_p3 <= 
        ap_const_lv10_1 when (icmp_ln45_fu_275_p2(0) = '1') else 
        add_ln45_1_fu_514_p2;
    select_ln45_fu_333_p3 <= 
        ap_const_lv3_0 when (or_ln45_fu_327_p2(0) = '1') else 
        kh_fu_104;
    select_ln46_fu_391_p3 <= 
        ap_const_lv3_0 when (or_ln46_1_fu_385_p2(0) = '1') else 
        kw_fu_100;
    select_ln48_1_fu_506_p3 <= 
        ap_const_lv6_1 when (or_ln45_fu_327_p2(0) = '1') else 
        add_ln48_1_fu_500_p2;
    select_ln48_fu_399_p3 <= 
        add_ln48_fu_373_p2 when (and_ln45_fu_359_p2(0) = '1') else 
        select_ln45_fu_333_p3;
    tmp_7_fu_469_p3 <= (empty_fu_438_p2 & add_ln51_fu_463_p2);
    tmp_fu_420_p3 <= (add_ln51_1_fu_411_p2 & ap_const_lv2_0);
    xor_ln44_fu_289_p2 <= (icmp_ln45_fu_275_p2 xor ap_const_lv1_1);
    xor_ln45_fu_341_p2 <= (icmp_ln48_fu_301_p2 xor ap_const_lv1_1);
    zext_ln48_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_399_p3),5));
    zext_ln49_fu_459_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_fu_391_p3),5));
    zext_ln51_1_fu_416_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_1_fu_411_p2),8));
    zext_ln51_2_fu_477_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_469_p3),64));
    zext_ln51_3_fu_444_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln46_fu_391_p3),8));
    zext_ln51_4_fu_454_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln51_3_fu_448_p2),64));
    zext_ln51_fu_407_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln48_fu_399_p3),6));
end behav;
