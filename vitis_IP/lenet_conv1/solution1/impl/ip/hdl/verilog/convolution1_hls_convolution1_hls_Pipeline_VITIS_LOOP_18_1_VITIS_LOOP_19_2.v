// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_18_1_VITIS_LOOP_19_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RFIFONUM,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        sext_ln18,
        local_input_address0,
        local_input_ce0,
        local_input_we0,
        local_input_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [63:0] m_axi_INPUT_r_AWADDR;
output  [0:0] m_axi_INPUT_r_AWID;
output  [31:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [0:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [31:0] m_axi_INPUT_r_WDATA;
output  [3:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [0:0] m_axi_INPUT_r_WID;
output  [0:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [63:0] m_axi_INPUT_r_ARADDR;
output  [0:0] m_axi_INPUT_r_ARID;
output  [31:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [0:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [31:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [0:0] m_axi_INPUT_r_RID;
input  [8:0] m_axi_INPUT_r_RFIFONUM;
input  [0:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [0:0] m_axi_INPUT_r_BID;
input  [0:0] m_axi_INPUT_r_BUSER;
input  [61:0] sext_ln18;
output  [9:0] local_input_address0;
output   local_input_ce0;
output   local_input_we0;
output  [31:0] local_input_d0;

reg ap_idle;
reg m_axi_INPUT_r_RREADY;
reg local_input_ce0;
reg local_input_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln18_fu_118_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    INPUT_r_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [31:0] INPUT_r_addr_read_reg_252;
wire   [63:0] zext_ln21_1_fu_197_p1;
reg   [5:0] j_fu_60;
wire   [5:0] add_ln19_fu_206_p2;
wire    ap_loop_init;
reg   [5:0] i_fu_64;
wire   [5:0] select_ln18_1_fu_167_p3;
reg   [10:0] indvar_flatten_fu_68;
wire   [10:0] add_ln18_1_fu_124_p2;
reg   [10:0] ap_sig_allocacmp_indvar_flatten_load;
wire   [0:0] icmp_ln19_fu_153_p2;
wire   [5:0] add_ln18_fu_147_p2;
wire   [4:0] trunc_ln21_fu_175_p1;
wire   [5:0] select_ln18_fu_159_p3;
wire   [9:0] tmp_1_fu_179_p3;
wire   [9:0] zext_ln21_fu_187_p1;
wire   [9:0] add_ln21_fu_191_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 j_fu_60 = 6'd0;
#0 i_fu_64 = 6'd0;
#0 indvar_flatten_fu_68 = 11'd0;
#0 ap_done_reg = 1'b0;
end

convolution1_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            i_fu_64 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            i_fu_64 <= select_ln18_1_fu_167_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln18_fu_118_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            indvar_flatten_fu_68 <= add_ln18_1_fu_124_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten_fu_68 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
            j_fu_60 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            j_fu_60 <= add_ln19_fu_206_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INPUT_r_addr_read_reg_252 <= m_axi_INPUT_r_RDATA;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln18_fu_118_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_indvar_flatten_load = 11'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten_load = indvar_flatten_fu_68;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_input_ce0 = 1'b1;
    end else begin
        local_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_input_we0 = 1'b1;
    end else begin
        local_input_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_INPUT_r_RREADY = 1'b1;
    end else begin
        m_axi_INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln18_1_fu_124_p2 = (ap_sig_allocacmp_indvar_flatten_load + 11'd1);

assign add_ln18_fu_147_p2 = (i_fu_64 + 6'd1);

assign add_ln19_fu_206_p2 = (select_ln18_fu_159_p3 + 6'd1);

assign add_ln21_fu_191_p2 = (tmp_1_fu_179_p3 + zext_ln21_fu_187_p1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_INPUT_r_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln18_fu_118_p2 = ((ap_sig_allocacmp_indvar_flatten_load == 11'd1024) ? 1'b1 : 1'b0);

assign icmp_ln19_fu_153_p2 = ((j_fu_60 == 6'd32) ? 1'b1 : 1'b0);

assign local_input_address0 = zext_ln21_1_fu_197_p1;

assign local_input_d0 = INPUT_r_addr_read_reg_252;

assign m_axi_INPUT_r_ARADDR = 64'd0;

assign m_axi_INPUT_r_ARBURST = 2'd0;

assign m_axi_INPUT_r_ARCACHE = 4'd0;

assign m_axi_INPUT_r_ARID = 1'd0;

assign m_axi_INPUT_r_ARLEN = 32'd0;

assign m_axi_INPUT_r_ARLOCK = 2'd0;

assign m_axi_INPUT_r_ARPROT = 3'd0;

assign m_axi_INPUT_r_ARQOS = 4'd0;

assign m_axi_INPUT_r_ARREGION = 4'd0;

assign m_axi_INPUT_r_ARSIZE = 3'd0;

assign m_axi_INPUT_r_ARUSER = 1'd0;

assign m_axi_INPUT_r_ARVALID = 1'b0;

assign m_axi_INPUT_r_AWADDR = 64'd0;

assign m_axi_INPUT_r_AWBURST = 2'd0;

assign m_axi_INPUT_r_AWCACHE = 4'd0;

assign m_axi_INPUT_r_AWID = 1'd0;

assign m_axi_INPUT_r_AWLEN = 32'd0;

assign m_axi_INPUT_r_AWLOCK = 2'd0;

assign m_axi_INPUT_r_AWPROT = 3'd0;

assign m_axi_INPUT_r_AWQOS = 4'd0;

assign m_axi_INPUT_r_AWREGION = 4'd0;

assign m_axi_INPUT_r_AWSIZE = 3'd0;

assign m_axi_INPUT_r_AWUSER = 1'd0;

assign m_axi_INPUT_r_AWVALID = 1'b0;

assign m_axi_INPUT_r_BREADY = 1'b0;

assign m_axi_INPUT_r_WDATA = 32'd0;

assign m_axi_INPUT_r_WID = 1'd0;

assign m_axi_INPUT_r_WLAST = 1'b0;

assign m_axi_INPUT_r_WSTRB = 4'd0;

assign m_axi_INPUT_r_WUSER = 1'd0;

assign m_axi_INPUT_r_WVALID = 1'b0;

assign select_ln18_1_fu_167_p3 = ((icmp_ln19_fu_153_p2[0:0] == 1'b1) ? add_ln18_fu_147_p2 : i_fu_64);

assign select_ln18_fu_159_p3 = ((icmp_ln19_fu_153_p2[0:0] == 1'b1) ? 6'd0 : j_fu_60);

assign tmp_1_fu_179_p3 = {{trunc_ln21_fu_175_p1}, {5'd0}};

assign trunc_ln21_fu_175_p1 = select_ln18_1_fu_167_p3[4:0];

assign zext_ln21_1_fu_197_p1 = add_ln21_fu_191_p2;

assign zext_ln21_fu_187_p1 = select_ln18_fu_159_p3;

endmodule //convolution1_hls_convolution1_hls_Pipeline_VITIS_LOOP_18_1_VITIS_LOOP_19_2
