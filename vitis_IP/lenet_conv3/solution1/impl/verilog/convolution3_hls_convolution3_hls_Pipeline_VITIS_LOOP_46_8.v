// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_46_8 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_BIAS_AWVALID,
        m_axi_BIAS_AWREADY,
        m_axi_BIAS_AWADDR,
        m_axi_BIAS_AWID,
        m_axi_BIAS_AWLEN,
        m_axi_BIAS_AWSIZE,
        m_axi_BIAS_AWBURST,
        m_axi_BIAS_AWLOCK,
        m_axi_BIAS_AWCACHE,
        m_axi_BIAS_AWPROT,
        m_axi_BIAS_AWQOS,
        m_axi_BIAS_AWREGION,
        m_axi_BIAS_AWUSER,
        m_axi_BIAS_WVALID,
        m_axi_BIAS_WREADY,
        m_axi_BIAS_WDATA,
        m_axi_BIAS_WSTRB,
        m_axi_BIAS_WLAST,
        m_axi_BIAS_WID,
        m_axi_BIAS_WUSER,
        m_axi_BIAS_ARVALID,
        m_axi_BIAS_ARREADY,
        m_axi_BIAS_ARADDR,
        m_axi_BIAS_ARID,
        m_axi_BIAS_ARLEN,
        m_axi_BIAS_ARSIZE,
        m_axi_BIAS_ARBURST,
        m_axi_BIAS_ARLOCK,
        m_axi_BIAS_ARCACHE,
        m_axi_BIAS_ARPROT,
        m_axi_BIAS_ARQOS,
        m_axi_BIAS_ARREGION,
        m_axi_BIAS_ARUSER,
        m_axi_BIAS_RVALID,
        m_axi_BIAS_RREADY,
        m_axi_BIAS_RDATA,
        m_axi_BIAS_RLAST,
        m_axi_BIAS_RID,
        m_axi_BIAS_RFIFONUM,
        m_axi_BIAS_RUSER,
        m_axi_BIAS_RRESP,
        m_axi_BIAS_BVALID,
        m_axi_BIAS_BREADY,
        m_axi_BIAS_BRESP,
        m_axi_BIAS_BID,
        m_axi_BIAS_BUSER,
        sext_ln46,
        local_bias_address0,
        local_bias_ce0,
        local_bias_we0,
        local_bias_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_BIAS_AWVALID;
input   m_axi_BIAS_AWREADY;
output  [63:0] m_axi_BIAS_AWADDR;
output  [0:0] m_axi_BIAS_AWID;
output  [31:0] m_axi_BIAS_AWLEN;
output  [2:0] m_axi_BIAS_AWSIZE;
output  [1:0] m_axi_BIAS_AWBURST;
output  [1:0] m_axi_BIAS_AWLOCK;
output  [3:0] m_axi_BIAS_AWCACHE;
output  [2:0] m_axi_BIAS_AWPROT;
output  [3:0] m_axi_BIAS_AWQOS;
output  [3:0] m_axi_BIAS_AWREGION;
output  [0:0] m_axi_BIAS_AWUSER;
output   m_axi_BIAS_WVALID;
input   m_axi_BIAS_WREADY;
output  [31:0] m_axi_BIAS_WDATA;
output  [3:0] m_axi_BIAS_WSTRB;
output   m_axi_BIAS_WLAST;
output  [0:0] m_axi_BIAS_WID;
output  [0:0] m_axi_BIAS_WUSER;
output   m_axi_BIAS_ARVALID;
input   m_axi_BIAS_ARREADY;
output  [63:0] m_axi_BIAS_ARADDR;
output  [0:0] m_axi_BIAS_ARID;
output  [31:0] m_axi_BIAS_ARLEN;
output  [2:0] m_axi_BIAS_ARSIZE;
output  [1:0] m_axi_BIAS_ARBURST;
output  [1:0] m_axi_BIAS_ARLOCK;
output  [3:0] m_axi_BIAS_ARCACHE;
output  [2:0] m_axi_BIAS_ARPROT;
output  [3:0] m_axi_BIAS_ARQOS;
output  [3:0] m_axi_BIAS_ARREGION;
output  [0:0] m_axi_BIAS_ARUSER;
input   m_axi_BIAS_RVALID;
output   m_axi_BIAS_RREADY;
input  [31:0] m_axi_BIAS_RDATA;
input   m_axi_BIAS_RLAST;
input  [0:0] m_axi_BIAS_RID;
input  [8:0] m_axi_BIAS_RFIFONUM;
input  [0:0] m_axi_BIAS_RUSER;
input  [1:0] m_axi_BIAS_RRESP;
input   m_axi_BIAS_BVALID;
output   m_axi_BIAS_BREADY;
input  [1:0] m_axi_BIAS_BRESP;
input  [0:0] m_axi_BIAS_BID;
input  [0:0] m_axi_BIAS_BUSER;
input  [61:0] sext_ln46;
output  [3:0] local_bias_address0;
output   local_bias_ce0;
output   local_bias_we0;
output  [31:0] local_bias_d0;

reg ap_idle;
reg m_axi_BIAS_RREADY;
reg local_bias_ce0;
reg local_bias_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln46_fu_88_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    BIAS_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
reg   [4:0] co_1_reg_131;
reg   [4:0] co_1_reg_131_pp0_iter1_reg;
reg   [31:0] BIAS_addr_read_reg_140;
wire   [63:0] zext_ln46_fu_111_p1;
reg   [4:0] co_fu_48;
wire   [4:0] add_ln46_fu_94_p2;
wire    ap_loop_init;
reg   [4:0] ap_sig_allocacmp_co_1;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 co_fu_48 = 5'd0;
#0 ap_done_reg = 1'b0;
end

convolution3_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((icmp_ln46_fu_88_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
            co_fu_48 <= add_ln46_fu_94_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            co_fu_48 <= 5'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BIAS_addr_read_reg_140 <= m_axi_BIAS_RDATA;
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        co_1_reg_131 <= ap_sig_allocacmp_co_1;
        co_1_reg_131_pp0_iter1_reg <= co_1_reg_131;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        BIAS_blk_n_R = m_axi_BIAS_RVALID;
    end else begin
        BIAS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln46_fu_88_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_start_int == 1'b0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_co_1 = 5'd0;
    end else begin
        ap_sig_allocacmp_co_1 = co_fu_48;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_bias_ce0 = 1'b1;
    end else begin
        local_bias_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_bias_we0 = 1'b1;
    end else begin
        local_bias_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_BIAS_RREADY = 1'b1;
    end else begin
        m_axi_BIAS_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln46_fu_94_p2 = (ap_sig_allocacmp_co_1 + 5'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (m_axi_BIAS_RVALID == 1'b0);
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign icmp_ln46_fu_88_p2 = ((ap_sig_allocacmp_co_1 == 5'd16) ? 1'b1 : 1'b0);

assign local_bias_address0 = zext_ln46_fu_111_p1;

assign local_bias_d0 = BIAS_addr_read_reg_140;

assign m_axi_BIAS_ARADDR = 64'd0;

assign m_axi_BIAS_ARBURST = 2'd0;

assign m_axi_BIAS_ARCACHE = 4'd0;

assign m_axi_BIAS_ARID = 1'd0;

assign m_axi_BIAS_ARLEN = 32'd0;

assign m_axi_BIAS_ARLOCK = 2'd0;

assign m_axi_BIAS_ARPROT = 3'd0;

assign m_axi_BIAS_ARQOS = 4'd0;

assign m_axi_BIAS_ARREGION = 4'd0;

assign m_axi_BIAS_ARSIZE = 3'd0;

assign m_axi_BIAS_ARUSER = 1'd0;

assign m_axi_BIAS_ARVALID = 1'b0;

assign m_axi_BIAS_AWADDR = 64'd0;

assign m_axi_BIAS_AWBURST = 2'd0;

assign m_axi_BIAS_AWCACHE = 4'd0;

assign m_axi_BIAS_AWID = 1'd0;

assign m_axi_BIAS_AWLEN = 32'd0;

assign m_axi_BIAS_AWLOCK = 2'd0;

assign m_axi_BIAS_AWPROT = 3'd0;

assign m_axi_BIAS_AWQOS = 4'd0;

assign m_axi_BIAS_AWREGION = 4'd0;

assign m_axi_BIAS_AWSIZE = 3'd0;

assign m_axi_BIAS_AWUSER = 1'd0;

assign m_axi_BIAS_AWVALID = 1'b0;

assign m_axi_BIAS_BREADY = 1'b0;

assign m_axi_BIAS_WDATA = 32'd0;

assign m_axi_BIAS_WID = 1'd0;

assign m_axi_BIAS_WLAST = 1'b0;

assign m_axi_BIAS_WSTRB = 4'd0;

assign m_axi_BIAS_WUSER = 1'd0;

assign m_axi_BIAS_WVALID = 1'b0;

assign zext_ln46_fu_111_p1 = co_1_reg_131_pp0_iter1_reg;

endmodule //convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_46_8
