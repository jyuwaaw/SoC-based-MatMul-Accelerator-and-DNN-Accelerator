// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_54_10_VITIS_LOOP_55_11_VITIS_LOOP_57_12_VIT_2 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_OUTPUT_r_AWVALID,
        m_axi_OUTPUT_r_AWREADY,
        m_axi_OUTPUT_r_AWADDR,
        m_axi_OUTPUT_r_AWID,
        m_axi_OUTPUT_r_AWLEN,
        m_axi_OUTPUT_r_AWSIZE,
        m_axi_OUTPUT_r_AWBURST,
        m_axi_OUTPUT_r_AWLOCK,
        m_axi_OUTPUT_r_AWCACHE,
        m_axi_OUTPUT_r_AWPROT,
        m_axi_OUTPUT_r_AWQOS,
        m_axi_OUTPUT_r_AWREGION,
        m_axi_OUTPUT_r_AWUSER,
        m_axi_OUTPUT_r_WVALID,
        m_axi_OUTPUT_r_WREADY,
        m_axi_OUTPUT_r_WDATA,
        m_axi_OUTPUT_r_WSTRB,
        m_axi_OUTPUT_r_WLAST,
        m_axi_OUTPUT_r_WID,
        m_axi_OUTPUT_r_WUSER,
        m_axi_OUTPUT_r_ARVALID,
        m_axi_OUTPUT_r_ARREADY,
        m_axi_OUTPUT_r_ARADDR,
        m_axi_OUTPUT_r_ARID,
        m_axi_OUTPUT_r_ARLEN,
        m_axi_OUTPUT_r_ARSIZE,
        m_axi_OUTPUT_r_ARBURST,
        m_axi_OUTPUT_r_ARLOCK,
        m_axi_OUTPUT_r_ARCACHE,
        m_axi_OUTPUT_r_ARPROT,
        m_axi_OUTPUT_r_ARQOS,
        m_axi_OUTPUT_r_ARREGION,
        m_axi_OUTPUT_r_ARUSER,
        m_axi_OUTPUT_r_RVALID,
        m_axi_OUTPUT_r_RREADY,
        m_axi_OUTPUT_r_RDATA,
        m_axi_OUTPUT_r_RLAST,
        m_axi_OUTPUT_r_RID,
        m_axi_OUTPUT_r_RFIFONUM,
        m_axi_OUTPUT_r_RUSER,
        m_axi_OUTPUT_r_RRESP,
        m_axi_OUTPUT_r_BVALID,
        m_axi_OUTPUT_r_BREADY,
        m_axi_OUTPUT_r_BRESP,
        m_axi_OUTPUT_r_BID,
        m_axi_OUTPUT_r_BUSER,
        sext_ln54_1,
        local_weights_1_address0,
        local_weights_1_ce0,
        local_weights_1_q0,
        local_weights_5_address0,
        local_weights_5_ce0,
        local_weights_5_q0,
        local_weights_9_address0,
        local_weights_9_ce0,
        local_weights_9_q0,
        local_weights_13_address0,
        local_weights_13_ce0,
        local_weights_13_q0,
        local_input_address0,
        local_input_ce0,
        local_input_q0,
        local_input_1_address0,
        local_input_1_ce0,
        local_input_1_q0,
        local_input_2_address0,
        local_input_2_ce0,
        local_input_2_q0,
        local_input_3_address0,
        local_input_3_ce0,
        local_input_3_q0,
        local_input_4_address0,
        local_input_4_ce0,
        local_input_4_q0,
        local_input_5_address0,
        local_input_5_ce0,
        local_input_5_q0,
        empty,
        local_bias_load_1,
        grp_fu_878_p_din0,
        grp_fu_878_p_din1,
        grp_fu_878_p_opcode,
        grp_fu_878_p_dout0,
        grp_fu_878_p_ce,
        grp_fu_882_p_din0,
        grp_fu_882_p_din1,
        grp_fu_882_p_dout0,
        grp_fu_882_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_OUTPUT_r_AWVALID;
input   m_axi_OUTPUT_r_AWREADY;
output  [63:0] m_axi_OUTPUT_r_AWADDR;
output  [0:0] m_axi_OUTPUT_r_AWID;
output  [31:0] m_axi_OUTPUT_r_AWLEN;
output  [2:0] m_axi_OUTPUT_r_AWSIZE;
output  [1:0] m_axi_OUTPUT_r_AWBURST;
output  [1:0] m_axi_OUTPUT_r_AWLOCK;
output  [3:0] m_axi_OUTPUT_r_AWCACHE;
output  [2:0] m_axi_OUTPUT_r_AWPROT;
output  [3:0] m_axi_OUTPUT_r_AWQOS;
output  [3:0] m_axi_OUTPUT_r_AWREGION;
output  [0:0] m_axi_OUTPUT_r_AWUSER;
output   m_axi_OUTPUT_r_WVALID;
input   m_axi_OUTPUT_r_WREADY;
output  [31:0] m_axi_OUTPUT_r_WDATA;
output  [3:0] m_axi_OUTPUT_r_WSTRB;
output   m_axi_OUTPUT_r_WLAST;
output  [0:0] m_axi_OUTPUT_r_WID;
output  [0:0] m_axi_OUTPUT_r_WUSER;
output   m_axi_OUTPUT_r_ARVALID;
input   m_axi_OUTPUT_r_ARREADY;
output  [63:0] m_axi_OUTPUT_r_ARADDR;
output  [0:0] m_axi_OUTPUT_r_ARID;
output  [31:0] m_axi_OUTPUT_r_ARLEN;
output  [2:0] m_axi_OUTPUT_r_ARSIZE;
output  [1:0] m_axi_OUTPUT_r_ARBURST;
output  [1:0] m_axi_OUTPUT_r_ARLOCK;
output  [3:0] m_axi_OUTPUT_r_ARCACHE;
output  [2:0] m_axi_OUTPUT_r_ARPROT;
output  [3:0] m_axi_OUTPUT_r_ARQOS;
output  [3:0] m_axi_OUTPUT_r_ARREGION;
output  [0:0] m_axi_OUTPUT_r_ARUSER;
input   m_axi_OUTPUT_r_RVALID;
output   m_axi_OUTPUT_r_RREADY;
input  [31:0] m_axi_OUTPUT_r_RDATA;
input   m_axi_OUTPUT_r_RLAST;
input  [0:0] m_axi_OUTPUT_r_RID;
input  [8:0] m_axi_OUTPUT_r_RFIFONUM;
input  [0:0] m_axi_OUTPUT_r_RUSER;
input  [1:0] m_axi_OUTPUT_r_RRESP;
input   m_axi_OUTPUT_r_BVALID;
output   m_axi_OUTPUT_r_BREADY;
input  [1:0] m_axi_OUTPUT_r_BRESP;
input  [0:0] m_axi_OUTPUT_r_BID;
input  [0:0] m_axi_OUTPUT_r_BUSER;
input  [61:0] sext_ln54_1;
output  [7:0] local_weights_1_address0;
output   local_weights_1_ce0;
input  [31:0] local_weights_1_q0;
output  [7:0] local_weights_5_address0;
output   local_weights_5_ce0;
input  [31:0] local_weights_5_q0;
output  [7:0] local_weights_9_address0;
output   local_weights_9_ce0;
input  [31:0] local_weights_9_q0;
output  [7:0] local_weights_13_address0;
output   local_weights_13_ce0;
input  [31:0] local_weights_13_q0;
output  [7:0] local_input_address0;
output   local_input_ce0;
input  [31:0] local_input_q0;
output  [7:0] local_input_1_address0;
output   local_input_1_ce0;
input  [31:0] local_input_1_q0;
output  [7:0] local_input_2_address0;
output   local_input_2_ce0;
input  [31:0] local_input_2_q0;
output  [7:0] local_input_3_address0;
output   local_input_3_ce0;
input  [31:0] local_input_3_q0;
output  [7:0] local_input_4_address0;
output   local_input_4_ce0;
input  [31:0] local_input_4_q0;
output  [7:0] local_input_5_address0;
output   local_input_5_ce0;
input  [31:0] local_input_5_q0;
input  [3:0] empty;
input  [31:0] local_bias_load_1;
output  [31:0] grp_fu_878_p_din0;
output  [31:0] grp_fu_878_p_din1;
output  [1:0] grp_fu_878_p_opcode;
input  [31:0] grp_fu_878_p_dout0;
output   grp_fu_878_p_ce;
output  [31:0] grp_fu_882_p_din0;
output  [31:0] grp_fu_882_p_din1;
input  [31:0] grp_fu_882_p_dout0;
output   grp_fu_882_p_ce;

reg ap_idle;
reg m_axi_OUTPUT_r_WVALID;
reg local_weights_1_ce0;
reg local_weights_5_ce0;
reg local_weights_9_ce0;
reg local_weights_13_ce0;
reg local_input_ce0;
reg local_input_1_ce0;
reg local_input_2_ce0;
reg local_input_3_ce0;
reg local_input_4_ce0;
reg local_input_5_ce0;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
reg   [0:0] icmp_ln59_2_reg_1113;
reg   [0:0] icmp_ln59_2_reg_1113_pp0_iter4_reg;
reg   [0:0] icmp_ln58_2_reg_1117;
reg   [0:0] icmp_ln58_2_reg_1117_pp0_iter4_reg;
reg   [0:0] icmp_ln57_2_reg_1121;
reg   [0:0] icmp_ln57_2_reg_1121_pp0_iter4_reg;
reg    ap_predicate_op186_write_state15;
reg    ap_block_state15_io;
reg    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln54_reg_1049;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    OUTPUT_r_blk_n_W;
wire    ap_block_pp0_stage2;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln54_fu_410_p2;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1_11001;
wire   [0:0] or_ln55_fu_507_p2;
reg   [0:0] or_ln55_reg_1053;
reg   [0:0] or_ln55_reg_1053_pp0_iter1_reg;
wire   [2:0] select_ln57_1_fu_597_p3;
reg   [2:0] select_ln57_1_reg_1058;
wire   [0:0] icmp_ln59_2_fu_779_p2;
reg   [0:0] icmp_ln59_2_reg_1113_pp0_iter1_reg;
reg   [0:0] icmp_ln59_2_reg_1113_pp0_iter2_reg;
reg   [0:0] icmp_ln59_2_reg_1113_pp0_iter3_reg;
wire   [0:0] icmp_ln58_2_fu_785_p2;
reg   [0:0] icmp_ln58_2_reg_1117_pp0_iter1_reg;
reg   [0:0] icmp_ln58_2_reg_1117_pp0_iter2_reg;
reg   [0:0] icmp_ln58_2_reg_1117_pp0_iter3_reg;
wire   [0:0] icmp_ln57_2_fu_791_p2;
reg   [0:0] icmp_ln57_2_reg_1121_pp0_iter1_reg;
reg   [0:0] icmp_ln57_2_reg_1121_pp0_iter2_reg;
reg   [0:0] icmp_ln57_2_reg_1121_pp0_iter3_reg;
wire   [31:0] tmp_2_fu_884_p15;
reg   [31:0] tmp_2_reg_1125;
reg    ap_block_pp0_stage2_11001;
wire   [31:0] tmp_3_fu_915_p11;
reg   [31:0] tmp_3_reg_1130;
reg   [31:0] mul_1_reg_1135;
wire   [31:0] select_ln55_4_fu_941_p3;
reg   [31:0] sum_2_reg_1145;
wire   [31:0] bitcast_ln65_fu_954_p1;
reg   [31:0] bitcast_ln65_reg_1150;
reg    ap_enable_reg_pp0_iter0_reg;
wire   [63:0] zext_ln61_14_fu_735_p1;
wire    ap_block_pp0_stage1;
wire   [63:0] zext_ln61_16_fu_763_p1;
wire    ap_block_pp0_stage2_01001;
reg   [31:0] sum_fu_140;
reg   [31:0] ap_sig_allocacmp_sum_load;
wire    ap_block_pp0_stage0;
wire    ap_loop_init;
reg   [2:0] kw_fu_144;
wire   [2:0] add_ln59_fu_773_p2;
reg   [2:0] kh_fu_148;
wire   [2:0] select_ln58_1_fu_631_p3;
reg   [5:0] indvar_flatten138_fu_152;
wire   [5:0] select_ln58_fu_803_p3;
reg   [2:0] ci_fu_156;
reg   [7:0] indvar_flatten153_fu_160;
wire   [7:0] select_ln57_fu_817_p3;
reg   [3:0] w_fu_164;
wire   [3:0] select_ln55_5_fu_551_p3;
reg   [11:0] indvar_flatten177_fu_168;
wire   [11:0] select_ln55_6_fu_831_p3;
reg   [3:0] h_fu_172;
wire   [3:0] select_ln54_2_fu_493_p3;
reg   [13:0] indvar_flatten209_fu_176;
wire   [13:0] add_ln54_fu_416_p2;
reg   [31:0] grp_fu_336_p0;
reg   [31:0] grp_fu_336_p1;
wire   [0:0] icmp_ln55_fu_443_p2;
wire   [0:0] icmp_ln59_fu_463_p2;
wire   [0:0] xor_ln54_fu_457_p2;
wire   [0:0] icmp_ln57_fu_481_p2;
wire   [3:0] add_ln54_1_fu_437_p2;
wire   [3:0] select_ln54_fu_449_p3;
wire   [0:0] and_ln54_3_fu_487_p2;
wire   [0:0] xor_ln55_fu_521_p2;
wire   [0:0] and_ln54_fu_469_p2;
wire   [0:0] or_ln55_2_fu_527_p2;
wire   [0:0] icmp_ln58_fu_475_p2;
wire   [0:0] and_ln54_4_fu_539_p2;
wire   [3:0] add_ln55_1_fu_501_p2;
wire   [2:0] select_ln55_fu_513_p3;
wire   [0:0] and_ln55_2_fu_545_p2;
wire   [0:0] or_ln56_2_fu_565_p2;
wire   [0:0] or_ln56_fu_571_p2;
wire   [0:0] and_ln55_fu_533_p2;
wire   [0:0] xor_ln56_fu_585_p2;
wire   [2:0] add_ln57_1_fu_559_p2;
wire   [2:0] select_ln56_fu_577_p3;
wire   [0:0] or_ln56_3_fu_611_p2;
wire   [0:0] and_ln56_fu_591_p2;
wire   [0:0] or_ln56_4_fu_617_p2;
wire   [2:0] add_ln58_1_fu_605_p2;
wire   [4:0] tmp_s_fu_643_p3;
wire   [5:0] zext_ln61_9_fu_651_p1;
wire   [5:0] zext_ln61_fu_639_p1;
wire   [5:0] add_ln61_fu_655_p2;
wire   [5:0] zext_ln61_10_fu_661_p1;
wire   [5:0] add_ln61_6_fu_665_p2;
wire   [7:0] tmp_4_fu_675_p3;
wire   [7:0] zext_ln61_11_fu_671_p1;
wire   [3:0] zext_ln58_fu_689_p1;
wire   [3:0] empty_24_fu_693_p2;
wire   [4:0] tmp_7_fu_707_p3;
wire   [7:0] tmp_6_fu_699_p3;
wire   [7:0] zext_ln61_12_fu_715_p1;
wire   [2:0] select_ln56_2_fu_623_p3;
wire   [7:0] add_ln61_7_fu_683_p2;
wire   [7:0] zext_ln61_13_fu_725_p1;
wire   [7:0] add_ln61_8_fu_729_p2;
wire   [3:0] zext_ln59_fu_743_p1;
wire   [3:0] add_ln61_1_fu_747_p2;
wire   [7:0] sub_ln61_fu_719_p2;
wire   [7:0] zext_ln61_15_fu_753_p1;
wire   [7:0] add_ln61_9_fu_757_p2;
wire   [5:0] add_ln58_fu_797_p2;
wire   [7:0] add_ln57_fu_811_p2;
wire   [11:0] add_ln55_fu_825_p2;
wire   [31:0] tmp_2_fu_884_p13;
wire   [31:0] tmp_3_fu_915_p9;
reg    grp_fu_336_ce;
reg    grp_fu_340_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg    ap_loop_exit_ready_pp0_iter2_reg;
reg    ap_loop_exit_ready_pp0_iter3_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to4;
wire    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage0_00001;
wire    ap_block_pp0_stage1_00001;
wire   [2:0] tmp_2_fu_884_p1;
wire   [2:0] tmp_2_fu_884_p3;
wire   [2:0] tmp_2_fu_884_p5;
wire   [2:0] tmp_2_fu_884_p7;
wire  signed [2:0] tmp_2_fu_884_p9;
wire  signed [2:0] tmp_2_fu_884_p11;
wire   [3:0] tmp_3_fu_915_p1;
wire   [3:0] tmp_3_fu_915_p3;
wire  signed [3:0] tmp_3_fu_915_p5;
wire  signed [3:0] tmp_3_fu_915_p7;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 sum_fu_140 = 32'd0;
#0 kw_fu_144 = 3'd0;
#0 kh_fu_148 = 3'd0;
#0 indvar_flatten138_fu_152 = 6'd0;
#0 ci_fu_156 = 3'd0;
#0 indvar_flatten153_fu_160 = 8'd0;
#0 w_fu_164 = 4'd0;
#0 indvar_flatten177_fu_168 = 12'd0;
#0 h_fu_172 = 4'd0;
#0 indvar_flatten209_fu_176 = 14'd0;
#0 ap_done_reg = 1'b0;
end

convolution3_hls_sparsemux_13_3_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 3'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 3'h1 ),
    .din1_WIDTH( 32 ),
    .CASE2( 3'h2 ),
    .din2_WIDTH( 32 ),
    .CASE3( 3'h3 ),
    .din3_WIDTH( 32 ),
    .CASE4( 3'h4 ),
    .din4_WIDTH( 32 ),
    .CASE5( 3'h5 ),
    .din5_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 3 ),
    .dout_WIDTH( 32 ))
sparsemux_13_3_32_1_1_U52(
    .din0(local_input_q0),
    .din1(local_input_1_q0),
    .din2(local_input_2_q0),
    .din3(local_input_3_q0),
    .din4(local_input_4_q0),
    .din5(local_input_5_q0),
    .def(tmp_2_fu_884_p13),
    .sel(select_ln57_1_reg_1058),
    .dout(tmp_2_fu_884_p15)
);

convolution3_hls_sparsemux_9_4_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .CASE0( 4'h0 ),
    .din0_WIDTH( 32 ),
    .CASE1( 4'h4 ),
    .din1_WIDTH( 32 ),
    .CASE2( 4'h8 ),
    .din2_WIDTH( 32 ),
    .CASE3( 4'hC ),
    .din3_WIDTH( 32 ),
    .def_WIDTH( 32 ),
    .sel_WIDTH( 4 ),
    .dout_WIDTH( 32 ))
sparsemux_9_4_32_1_1_U53(
    .din0(local_weights_1_q0),
    .din1(local_weights_5_q0),
    .din2(local_weights_9_q0),
    .din3(local_weights_13_q0),
    .def(tmp_3_fu_915_p9),
    .sel(empty),
    .dout(tmp_3_fu_915_p11)
);

convolution3_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        ci_fu_156 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        ci_fu_156 <= select_ln57_1_fu_597_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        h_fu_172 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        h_fu_172 <= select_ln54_2_fu_493_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten138_fu_152 <= 6'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten138_fu_152 <= select_ln58_fu_803_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten153_fu_160 <= 8'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten153_fu_160 <= select_ln57_fu_817_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten177_fu_168 <= 12'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten177_fu_168 <= select_ln55_6_fu_831_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        indvar_flatten209_fu_176 <= 14'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        indvar_flatten209_fu_176 <= add_ln54_fu_416_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kh_fu_148 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        kh_fu_148 <= select_ln58_1_fu_631_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        kw_fu_144 <= 3'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        kw_fu_144 <= add_ln59_fu_773_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        if ((ap_loop_init == 1'b1)) begin
            sum_fu_140 <= 32'd0;
        end else if ((ap_enable_reg_pp0_iter3 == 1'b1)) begin
            sum_fu_140 <= grp_fu_878_p_dout0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        w_fu_164 <= 4'd0;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln54_fu_410_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        w_fu_164 <= select_ln55_5_fu_551_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
        ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
        mul_1_reg_1135 <= grp_fu_882_p_dout0;
        tmp_2_reg_1125 <= tmp_2_fu_884_p15;
        tmp_3_reg_1130 <= tmp_3_fu_915_p11;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        bitcast_ln65_reg_1150 <= bitcast_ln65_fu_954_p1;
        icmp_ln54_reg_1049 <= icmp_ln54_fu_410_p2;
        icmp_ln57_2_reg_1121 <= icmp_ln57_2_fu_791_p2;
        icmp_ln57_2_reg_1121_pp0_iter1_reg <= icmp_ln57_2_reg_1121;
        icmp_ln57_2_reg_1121_pp0_iter2_reg <= icmp_ln57_2_reg_1121_pp0_iter1_reg;
        icmp_ln57_2_reg_1121_pp0_iter3_reg <= icmp_ln57_2_reg_1121_pp0_iter2_reg;
        icmp_ln57_2_reg_1121_pp0_iter4_reg <= icmp_ln57_2_reg_1121_pp0_iter3_reg;
        icmp_ln58_2_reg_1117 <= icmp_ln58_2_fu_785_p2;
        icmp_ln58_2_reg_1117_pp0_iter1_reg <= icmp_ln58_2_reg_1117;
        icmp_ln58_2_reg_1117_pp0_iter2_reg <= icmp_ln58_2_reg_1117_pp0_iter1_reg;
        icmp_ln58_2_reg_1117_pp0_iter3_reg <= icmp_ln58_2_reg_1117_pp0_iter2_reg;
        icmp_ln58_2_reg_1117_pp0_iter4_reg <= icmp_ln58_2_reg_1117_pp0_iter3_reg;
        icmp_ln59_2_reg_1113 <= icmp_ln59_2_fu_779_p2;
        icmp_ln59_2_reg_1113_pp0_iter1_reg <= icmp_ln59_2_reg_1113;
        icmp_ln59_2_reg_1113_pp0_iter2_reg <= icmp_ln59_2_reg_1113_pp0_iter1_reg;
        icmp_ln59_2_reg_1113_pp0_iter3_reg <= icmp_ln59_2_reg_1113_pp0_iter2_reg;
        icmp_ln59_2_reg_1113_pp0_iter4_reg <= icmp_ln59_2_reg_1113_pp0_iter3_reg;
        or_ln55_reg_1053 <= or_ln55_fu_507_p2;
        or_ln55_reg_1053_pp0_iter1_reg <= or_ln55_reg_1053;
        select_ln57_1_reg_1058 <= select_ln57_1_fu_597_p3;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001))) begin
        sum_2_reg_1145 <= grp_fu_878_p_dout0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2) & (ap_predicate_op186_write_state15 == 1'b1))) begin
        OUTPUT_r_blk_n_W = m_axi_OUTPUT_r_WREADY;
    end else begin
        OUTPUT_r_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln54_reg_1049 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_loop_exit_ready_pp0_iter3_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to4 = 1'b1;
    end else begin
        ap_idle_pp0_1to4 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_subdone))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        ap_sig_allocacmp_sum_load = grp_fu_878_p_dout0;
    end else begin
        ap_sig_allocacmp_sum_load = sum_fu_140;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_336_ce = 1'b1;
    end else begin
        grp_fu_336_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_336_p0 = sum_2_reg_1145;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_336_p0 = select_ln55_4_fu_941_p3;
    end else begin
        grp_fu_336_p0 = 'bx;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1))) begin
        grp_fu_336_p1 = local_bias_load_1;
    end else if (((ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        grp_fu_336_p1 = mul_1_reg_1135;
    end else begin
        grp_fu_336_p1 = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001)) | ((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0_11001)))) begin
        grp_fu_340_ce = 1'b1;
    end else begin
        grp_fu_340_ce = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_1_ce0 = 1'b1;
    end else begin
        local_input_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_2_ce0 = 1'b1;
    end else begin
        local_input_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_3_ce0 = 1'b1;
    end else begin
        local_input_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_4_ce0 = 1'b1;
    end else begin
        local_input_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_5_ce0 = 1'b1;
    end else begin
        local_input_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_input_ce0 = 1'b1;
    end else begin
        local_input_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_weights_13_ce0 = 1'b1;
    end else begin
        local_weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_weights_1_ce0 = 1'b1;
    end else begin
        local_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_weights_5_ce0 = 1'b1;
    end else begin
        local_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1) & (1'b0 == ap_block_pp0_stage1_11001))) begin
        local_weights_9_ce0 = 1'b1;
    end else begin
        local_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2) & (1'b0 == ap_block_pp0_stage2_11001) & (ap_predicate_op186_write_state15 == 1'b1))) begin
        m_axi_OUTPUT_r_WVALID = 1'b1;
    end else begin
        m_axi_OUTPUT_r_WVALID = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to4 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln54_1_fu_437_p2 = (h_fu_172 + 4'd1);

assign add_ln54_fu_416_p2 = (indvar_flatten209_fu_176 + 14'd1);

assign add_ln55_1_fu_501_p2 = (select_ln54_fu_449_p3 + 4'd1);

assign add_ln55_fu_825_p2 = (indvar_flatten177_fu_168 + 12'd1);

assign add_ln57_1_fu_559_p2 = (select_ln55_fu_513_p3 + 3'd1);

assign add_ln57_fu_811_p2 = (indvar_flatten153_fu_160 + 8'd1);

assign add_ln58_1_fu_605_p2 = (select_ln56_fu_577_p3 + 3'd1);

assign add_ln58_fu_797_p2 = (indvar_flatten138_fu_152 + 6'd1);

assign add_ln59_fu_773_p2 = (select_ln56_2_fu_623_p3 + 3'd1);

assign add_ln61_1_fu_747_p2 = (zext_ln59_fu_743_p1 + select_ln55_5_fu_551_p3);

assign add_ln61_6_fu_665_p2 = (add_ln61_fu_655_p2 + zext_ln61_10_fu_661_p1);

assign add_ln61_7_fu_683_p2 = (tmp_4_fu_675_p3 + zext_ln61_11_fu_671_p1);

assign add_ln61_8_fu_729_p2 = (add_ln61_7_fu_683_p2 + zext_ln61_13_fu_725_p1);

assign add_ln61_9_fu_757_p2 = (sub_ln61_fu_719_p2 + zext_ln61_15_fu_753_p1);

assign add_ln61_fu_655_p2 = (zext_ln61_9_fu_651_p1 + zext_ln61_fu_639_p1);

assign and_ln54_3_fu_487_p2 = (xor_ln54_fu_457_p2 & icmp_ln57_fu_481_p2);

assign and_ln54_4_fu_539_p2 = (xor_ln54_fu_457_p2 & icmp_ln58_fu_475_p2);

assign and_ln54_fu_469_p2 = (xor_ln54_fu_457_p2 & icmp_ln59_fu_463_p2);

assign and_ln55_2_fu_545_p2 = (or_ln55_2_fu_527_p2 & and_ln54_4_fu_539_p2);

assign and_ln55_fu_533_p2 = (or_ln55_2_fu_527_p2 & and_ln54_fu_469_p2);

assign and_ln56_fu_591_p2 = (xor_ln56_fu_585_p2 & and_ln55_fu_533_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage2_11001 = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_pp0_stage2_subdone = ((ap_enable_reg_pp0_iter4 == 1'b1) & (1'b1 == ap_block_state15_io));
end

always @ (*) begin
    ap_block_state15_io = ((m_axi_OUTPUT_r_WREADY == 1'b0) & (ap_predicate_op186_write_state15 == 1'b1));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

always @ (*) begin
    ap_predicate_op186_write_state15 = ((icmp_ln59_2_reg_1113_pp0_iter4_reg == 1'd1) & (icmp_ln57_2_reg_1121_pp0_iter4_reg == 1'd1) & (icmp_ln58_2_reg_1117_pp0_iter4_reg == 1'd1));
end

assign bitcast_ln65_fu_954_p1 = grp_fu_878_p_dout0;

assign empty_24_fu_693_p2 = (zext_ln58_fu_689_p1 + select_ln54_2_fu_493_p3);

assign grp_fu_878_p_ce = grp_fu_336_ce;

assign grp_fu_878_p_din0 = grp_fu_336_p0;

assign grp_fu_878_p_din1 = grp_fu_336_p1;

assign grp_fu_878_p_opcode = 2'd0;

assign grp_fu_882_p_ce = grp_fu_340_ce;

assign grp_fu_882_p_din0 = tmp_2_reg_1125;

assign grp_fu_882_p_din1 = tmp_3_reg_1130;

assign icmp_ln54_fu_410_p2 = ((indvar_flatten209_fu_176 == 14'd15000) ? 1'b1 : 1'b0);

assign icmp_ln55_fu_443_p2 = ((indvar_flatten177_fu_168 == 12'd1500) ? 1'b1 : 1'b0);

assign icmp_ln57_2_fu_791_p2 = ((select_ln57_1_fu_597_p3 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln57_fu_481_p2 = ((indvar_flatten153_fu_160 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln58_2_fu_785_p2 = ((select_ln58_1_fu_631_p3 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_475_p2 = ((indvar_flatten138_fu_152 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln59_2_fu_779_p2 = ((add_ln59_fu_773_p2 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln59_fu_463_p2 = ((kw_fu_144 == 3'd5) ? 1'b1 : 1'b0);

assign local_input_1_address0 = zext_ln61_16_fu_763_p1;

assign local_input_2_address0 = zext_ln61_16_fu_763_p1;

assign local_input_3_address0 = zext_ln61_16_fu_763_p1;

assign local_input_4_address0 = zext_ln61_16_fu_763_p1;

assign local_input_5_address0 = zext_ln61_16_fu_763_p1;

assign local_input_address0 = zext_ln61_16_fu_763_p1;

assign local_weights_13_address0 = zext_ln61_14_fu_735_p1;

assign local_weights_1_address0 = zext_ln61_14_fu_735_p1;

assign local_weights_5_address0 = zext_ln61_14_fu_735_p1;

assign local_weights_9_address0 = zext_ln61_14_fu_735_p1;

assign m_axi_OUTPUT_r_ARADDR = 64'd0;

assign m_axi_OUTPUT_r_ARBURST = 2'd0;

assign m_axi_OUTPUT_r_ARCACHE = 4'd0;

assign m_axi_OUTPUT_r_ARID = 1'd0;

assign m_axi_OUTPUT_r_ARLEN = 32'd0;

assign m_axi_OUTPUT_r_ARLOCK = 2'd0;

assign m_axi_OUTPUT_r_ARPROT = 3'd0;

assign m_axi_OUTPUT_r_ARQOS = 4'd0;

assign m_axi_OUTPUT_r_ARREGION = 4'd0;

assign m_axi_OUTPUT_r_ARSIZE = 3'd0;

assign m_axi_OUTPUT_r_ARUSER = 1'd0;

assign m_axi_OUTPUT_r_ARVALID = 1'b0;

assign m_axi_OUTPUT_r_AWADDR = 64'd0;

assign m_axi_OUTPUT_r_AWBURST = 2'd0;

assign m_axi_OUTPUT_r_AWCACHE = 4'd0;

assign m_axi_OUTPUT_r_AWID = 1'd0;

assign m_axi_OUTPUT_r_AWLEN = 32'd0;

assign m_axi_OUTPUT_r_AWLOCK = 2'd0;

assign m_axi_OUTPUT_r_AWPROT = 3'd0;

assign m_axi_OUTPUT_r_AWQOS = 4'd0;

assign m_axi_OUTPUT_r_AWREGION = 4'd0;

assign m_axi_OUTPUT_r_AWSIZE = 3'd0;

assign m_axi_OUTPUT_r_AWUSER = 1'd0;

assign m_axi_OUTPUT_r_AWVALID = 1'b0;

assign m_axi_OUTPUT_r_BREADY = 1'b0;

assign m_axi_OUTPUT_r_RREADY = 1'b0;

assign m_axi_OUTPUT_r_WDATA = bitcast_ln65_reg_1150;

assign m_axi_OUTPUT_r_WID = 1'd0;

assign m_axi_OUTPUT_r_WLAST = 1'b0;

assign m_axi_OUTPUT_r_WSTRB = 4'd15;

assign m_axi_OUTPUT_r_WUSER = 1'd0;

assign or_ln55_2_fu_527_p2 = (xor_ln55_fu_521_p2 | icmp_ln55_fu_443_p2);

assign or_ln55_fu_507_p2 = (icmp_ln55_fu_443_p2 | and_ln54_3_fu_487_p2);

assign or_ln56_2_fu_565_p2 = (and_ln55_2_fu_545_p2 | and_ln54_3_fu_487_p2);

assign or_ln56_3_fu_611_p2 = (or_ln55_fu_507_p2 | and_ln55_2_fu_545_p2);

assign or_ln56_4_fu_617_p2 = (or_ln56_3_fu_611_p2 | and_ln56_fu_591_p2);

assign or_ln56_fu_571_p2 = (or_ln56_2_fu_565_p2 | icmp_ln55_fu_443_p2);

assign select_ln54_2_fu_493_p3 = ((icmp_ln55_fu_443_p2[0:0] == 1'b1) ? add_ln54_1_fu_437_p2 : h_fu_172);

assign select_ln54_fu_449_p3 = ((icmp_ln55_fu_443_p2[0:0] == 1'b1) ? 4'd0 : w_fu_164);

assign select_ln55_4_fu_941_p3 = ((or_ln55_reg_1053_pp0_iter1_reg[0:0] == 1'b1) ? 32'd0 : ap_sig_allocacmp_sum_load);

assign select_ln55_5_fu_551_p3 = ((and_ln54_3_fu_487_p2[0:0] == 1'b1) ? add_ln55_1_fu_501_p2 : select_ln54_fu_449_p3);

assign select_ln55_6_fu_831_p3 = ((icmp_ln55_fu_443_p2[0:0] == 1'b1) ? 12'd1 : add_ln55_fu_825_p2);

assign select_ln55_fu_513_p3 = ((or_ln55_fu_507_p2[0:0] == 1'b1) ? 3'd0 : ci_fu_156);

assign select_ln56_2_fu_623_p3 = ((or_ln56_4_fu_617_p2[0:0] == 1'b1) ? 3'd0 : kw_fu_144);

assign select_ln56_fu_577_p3 = ((or_ln56_fu_571_p2[0:0] == 1'b1) ? 3'd0 : kh_fu_148);

assign select_ln57_1_fu_597_p3 = ((and_ln55_2_fu_545_p2[0:0] == 1'b1) ? add_ln57_1_fu_559_p2 : select_ln55_fu_513_p3);

assign select_ln57_fu_817_p3 = ((or_ln55_fu_507_p2[0:0] == 1'b1) ? 8'd1 : add_ln57_fu_811_p2);

assign select_ln58_1_fu_631_p3 = ((and_ln56_fu_591_p2[0:0] == 1'b1) ? add_ln58_1_fu_605_p2 : select_ln56_fu_577_p3);

assign select_ln58_fu_803_p3 = ((or_ln56_fu_571_p2[0:0] == 1'b1) ? 6'd1 : add_ln58_fu_797_p2);

assign sub_ln61_fu_719_p2 = (tmp_6_fu_699_p3 - zext_ln61_12_fu_715_p1);

assign tmp_2_fu_884_p13 = 'bx;

assign tmp_3_fu_915_p9 = 'bx;

assign tmp_4_fu_675_p3 = {{add_ln61_6_fu_665_p2}, {2'd0}};

assign tmp_6_fu_699_p3 = {{empty_24_fu_693_p2}, {4'd0}};

assign tmp_7_fu_707_p3 = {{empty_24_fu_693_p2}, {1'd0}};

assign tmp_s_fu_643_p3 = {{select_ln57_1_fu_597_p3}, {2'd0}};

assign xor_ln54_fu_457_p2 = (icmp_ln55_fu_443_p2 ^ 1'd1);

assign xor_ln55_fu_521_p2 = (icmp_ln57_fu_481_p2 ^ 1'd1);

assign xor_ln56_fu_585_p2 = (1'd1 ^ and_ln55_2_fu_545_p2);

assign zext_ln58_fu_689_p1 = select_ln58_1_fu_631_p3;

assign zext_ln59_fu_743_p1 = select_ln56_2_fu_623_p3;

assign zext_ln61_10_fu_661_p1 = select_ln58_1_fu_631_p3;

assign zext_ln61_11_fu_671_p1 = add_ln61_6_fu_665_p2;

assign zext_ln61_12_fu_715_p1 = tmp_7_fu_707_p3;

assign zext_ln61_13_fu_725_p1 = select_ln56_2_fu_623_p3;

assign zext_ln61_14_fu_735_p1 = add_ln61_8_fu_729_p2;

assign zext_ln61_15_fu_753_p1 = add_ln61_1_fu_747_p2;

assign zext_ln61_16_fu_763_p1 = add_ln61_9_fu_757_p2;

assign zext_ln61_9_fu_651_p1 = tmp_s_fu_643_p3;

assign zext_ln61_fu_639_p1 = select_ln57_1_fu_597_p3;

endmodule //convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_54_10_VITIS_LOOP_55_11_VITIS_LOOP_57_12_VIT_2
