// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_34_4_VITIS_LOOP_35_5_VITIS_LOOP_36_6_VITIS_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_WEIGHTS_AWVALID,
        m_axi_WEIGHTS_AWREADY,
        m_axi_WEIGHTS_AWADDR,
        m_axi_WEIGHTS_AWID,
        m_axi_WEIGHTS_AWLEN,
        m_axi_WEIGHTS_AWSIZE,
        m_axi_WEIGHTS_AWBURST,
        m_axi_WEIGHTS_AWLOCK,
        m_axi_WEIGHTS_AWCACHE,
        m_axi_WEIGHTS_AWPROT,
        m_axi_WEIGHTS_AWQOS,
        m_axi_WEIGHTS_AWREGION,
        m_axi_WEIGHTS_AWUSER,
        m_axi_WEIGHTS_WVALID,
        m_axi_WEIGHTS_WREADY,
        m_axi_WEIGHTS_WDATA,
        m_axi_WEIGHTS_WSTRB,
        m_axi_WEIGHTS_WLAST,
        m_axi_WEIGHTS_WID,
        m_axi_WEIGHTS_WUSER,
        m_axi_WEIGHTS_ARVALID,
        m_axi_WEIGHTS_ARREADY,
        m_axi_WEIGHTS_ARADDR,
        m_axi_WEIGHTS_ARID,
        m_axi_WEIGHTS_ARLEN,
        m_axi_WEIGHTS_ARSIZE,
        m_axi_WEIGHTS_ARBURST,
        m_axi_WEIGHTS_ARLOCK,
        m_axi_WEIGHTS_ARCACHE,
        m_axi_WEIGHTS_ARPROT,
        m_axi_WEIGHTS_ARQOS,
        m_axi_WEIGHTS_ARREGION,
        m_axi_WEIGHTS_ARUSER,
        m_axi_WEIGHTS_RVALID,
        m_axi_WEIGHTS_RREADY,
        m_axi_WEIGHTS_RDATA,
        m_axi_WEIGHTS_RLAST,
        m_axi_WEIGHTS_RID,
        m_axi_WEIGHTS_RFIFONUM,
        m_axi_WEIGHTS_RUSER,
        m_axi_WEIGHTS_RRESP,
        m_axi_WEIGHTS_BVALID,
        m_axi_WEIGHTS_BREADY,
        m_axi_WEIGHTS_BRESP,
        m_axi_WEIGHTS_BID,
        m_axi_WEIGHTS_BUSER,
        sext_ln34,
        local_weights_address0,
        local_weights_ce0,
        local_weights_we0,
        local_weights_d0,
        local_weights_1_address0,
        local_weights_1_ce0,
        local_weights_1_we0,
        local_weights_1_d0,
        local_weights_2_address0,
        local_weights_2_ce0,
        local_weights_2_we0,
        local_weights_2_d0,
        local_weights_3_address0,
        local_weights_3_ce0,
        local_weights_3_we0,
        local_weights_3_d0,
        local_weights_4_address0,
        local_weights_4_ce0,
        local_weights_4_we0,
        local_weights_4_d0,
        local_weights_5_address0,
        local_weights_5_ce0,
        local_weights_5_we0,
        local_weights_5_d0,
        local_weights_6_address0,
        local_weights_6_ce0,
        local_weights_6_we0,
        local_weights_6_d0,
        local_weights_7_address0,
        local_weights_7_ce0,
        local_weights_7_we0,
        local_weights_7_d0,
        local_weights_8_address0,
        local_weights_8_ce0,
        local_weights_8_we0,
        local_weights_8_d0,
        local_weights_9_address0,
        local_weights_9_ce0,
        local_weights_9_we0,
        local_weights_9_d0,
        local_weights_10_address0,
        local_weights_10_ce0,
        local_weights_10_we0,
        local_weights_10_d0,
        local_weights_11_address0,
        local_weights_11_ce0,
        local_weights_11_we0,
        local_weights_11_d0,
        local_weights_12_address0,
        local_weights_12_ce0,
        local_weights_12_we0,
        local_weights_12_d0,
        local_weights_13_address0,
        local_weights_13_ce0,
        local_weights_13_we0,
        local_weights_13_d0,
        local_weights_14_address0,
        local_weights_14_ce0,
        local_weights_14_we0,
        local_weights_14_d0,
        local_weights_15_address0,
        local_weights_15_ce0,
        local_weights_15_we0,
        local_weights_15_d0
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_WEIGHTS_AWVALID;
input   m_axi_WEIGHTS_AWREADY;
output  [63:0] m_axi_WEIGHTS_AWADDR;
output  [0:0] m_axi_WEIGHTS_AWID;
output  [31:0] m_axi_WEIGHTS_AWLEN;
output  [2:0] m_axi_WEIGHTS_AWSIZE;
output  [1:0] m_axi_WEIGHTS_AWBURST;
output  [1:0] m_axi_WEIGHTS_AWLOCK;
output  [3:0] m_axi_WEIGHTS_AWCACHE;
output  [2:0] m_axi_WEIGHTS_AWPROT;
output  [3:0] m_axi_WEIGHTS_AWQOS;
output  [3:0] m_axi_WEIGHTS_AWREGION;
output  [0:0] m_axi_WEIGHTS_AWUSER;
output   m_axi_WEIGHTS_WVALID;
input   m_axi_WEIGHTS_WREADY;
output  [31:0] m_axi_WEIGHTS_WDATA;
output  [3:0] m_axi_WEIGHTS_WSTRB;
output   m_axi_WEIGHTS_WLAST;
output  [0:0] m_axi_WEIGHTS_WID;
output  [0:0] m_axi_WEIGHTS_WUSER;
output   m_axi_WEIGHTS_ARVALID;
input   m_axi_WEIGHTS_ARREADY;
output  [63:0] m_axi_WEIGHTS_ARADDR;
output  [0:0] m_axi_WEIGHTS_ARID;
output  [31:0] m_axi_WEIGHTS_ARLEN;
output  [2:0] m_axi_WEIGHTS_ARSIZE;
output  [1:0] m_axi_WEIGHTS_ARBURST;
output  [1:0] m_axi_WEIGHTS_ARLOCK;
output  [3:0] m_axi_WEIGHTS_ARCACHE;
output  [2:0] m_axi_WEIGHTS_ARPROT;
output  [3:0] m_axi_WEIGHTS_ARQOS;
output  [3:0] m_axi_WEIGHTS_ARREGION;
output  [0:0] m_axi_WEIGHTS_ARUSER;
input   m_axi_WEIGHTS_RVALID;
output   m_axi_WEIGHTS_RREADY;
input  [31:0] m_axi_WEIGHTS_RDATA;
input   m_axi_WEIGHTS_RLAST;
input  [0:0] m_axi_WEIGHTS_RID;
input  [8:0] m_axi_WEIGHTS_RFIFONUM;
input  [0:0] m_axi_WEIGHTS_RUSER;
input  [1:0] m_axi_WEIGHTS_RRESP;
input   m_axi_WEIGHTS_BVALID;
output   m_axi_WEIGHTS_BREADY;
input  [1:0] m_axi_WEIGHTS_BRESP;
input  [0:0] m_axi_WEIGHTS_BID;
input  [0:0] m_axi_WEIGHTS_BUSER;
input  [61:0] sext_ln34;
output  [7:0] local_weights_address0;
output   local_weights_ce0;
output   local_weights_we0;
output  [31:0] local_weights_d0;
output  [7:0] local_weights_1_address0;
output   local_weights_1_ce0;
output   local_weights_1_we0;
output  [31:0] local_weights_1_d0;
output  [7:0] local_weights_2_address0;
output   local_weights_2_ce0;
output   local_weights_2_we0;
output  [31:0] local_weights_2_d0;
output  [7:0] local_weights_3_address0;
output   local_weights_3_ce0;
output   local_weights_3_we0;
output  [31:0] local_weights_3_d0;
output  [7:0] local_weights_4_address0;
output   local_weights_4_ce0;
output   local_weights_4_we0;
output  [31:0] local_weights_4_d0;
output  [7:0] local_weights_5_address0;
output   local_weights_5_ce0;
output   local_weights_5_we0;
output  [31:0] local_weights_5_d0;
output  [7:0] local_weights_6_address0;
output   local_weights_6_ce0;
output   local_weights_6_we0;
output  [31:0] local_weights_6_d0;
output  [7:0] local_weights_7_address0;
output   local_weights_7_ce0;
output   local_weights_7_we0;
output  [31:0] local_weights_7_d0;
output  [7:0] local_weights_8_address0;
output   local_weights_8_ce0;
output   local_weights_8_we0;
output  [31:0] local_weights_8_d0;
output  [7:0] local_weights_9_address0;
output   local_weights_9_ce0;
output   local_weights_9_we0;
output  [31:0] local_weights_9_d0;
output  [7:0] local_weights_10_address0;
output   local_weights_10_ce0;
output   local_weights_10_we0;
output  [31:0] local_weights_10_d0;
output  [7:0] local_weights_11_address0;
output   local_weights_11_ce0;
output   local_weights_11_we0;
output  [31:0] local_weights_11_d0;
output  [7:0] local_weights_12_address0;
output   local_weights_12_ce0;
output   local_weights_12_we0;
output  [31:0] local_weights_12_d0;
output  [7:0] local_weights_13_address0;
output   local_weights_13_ce0;
output   local_weights_13_we0;
output  [31:0] local_weights_13_d0;
output  [7:0] local_weights_14_address0;
output   local_weights_14_ce0;
output   local_weights_14_we0;
output  [31:0] local_weights_14_d0;
output  [7:0] local_weights_15_address0;
output   local_weights_15_ce0;
output   local_weights_15_we0;
output  [31:0] local_weights_15_d0;

reg ap_idle;
reg m_axi_WEIGHTS_RREADY;
reg local_weights_ce0;
reg local_weights_we0;
reg local_weights_1_ce0;
reg local_weights_1_we0;
reg local_weights_2_ce0;
reg local_weights_2_we0;
reg local_weights_3_ce0;
reg local_weights_3_we0;
reg local_weights_4_ce0;
reg local_weights_4_we0;
reg local_weights_5_ce0;
reg local_weights_5_we0;
reg local_weights_6_ce0;
reg local_weights_6_we0;
reg local_weights_7_ce0;
reg local_weights_7_we0;
reg local_weights_8_ce0;
reg local_weights_8_we0;
reg local_weights_9_ce0;
reg local_weights_9_we0;
reg local_weights_10_ce0;
reg local_weights_10_we0;
reg local_weights_11_ce0;
reg local_weights_11_we0;
reg local_weights_12_ce0;
reg local_weights_12_we0;
reg local_weights_13_ce0;
reg local_weights_13_we0;
reg local_weights_14_ce0;
reg local_weights_14_we0;
reg local_weights_15_ce0;
reg local_weights_15_we0;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
reg   [0:0] icmp_ln34_reg_813;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln34_fu_429_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    WEIGHTS_blk_n_R;
wire    ap_block_pp0_stage0;
reg    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln35_fu_464_p2;
reg   [0:0] icmp_ln35_reg_817;
wire   [3:0] trunc_ln34_fu_478_p1;
reg   [3:0] trunc_ln34_reg_826;
wire   [31:0] bitcast_ln39_fu_482_p1;
reg   [31:0] bitcast_ln39_reg_830;
reg    ap_condition_exit_pp0_iter1_stage0;
wire   [63:0] zext_ln39_5_fu_695_p1;
reg   [2:0] kw_fu_140;
wire   [2:0] add_ln37_fu_718_p2;
wire    ap_loop_init;
reg   [2:0] kh_fu_144;
wire   [2:0] select_ln36_1_fu_627_p3;
reg   [5:0] indvar_flatten18_fu_148;
wire   [5:0] select_ln36_2_fu_730_p3;
reg   [2:0] ci_fu_152;
wire   [2:0] select_ln35_1_fu_594_p3;
reg   [7:0] indvar_flatten31_fu_156;
wire   [7:0] select_ln35_2_fu_492_p3;
reg   [4:0] co_fu_160;
wire   [4:0] select_ln34_1_fu_470_p3;
reg   [11:0] indvar_flatten53_fu_164;
wire   [11:0] add_ln34_1_fu_435_p2;
reg   [11:0] ap_sig_allocacmp_indvar_flatten53_load;
wire   [4:0] add_ln34_fu_458_p2;
wire   [7:0] add_ln35_1_fu_486_p2;
wire   [0:0] icmp_ln36_fu_540_p2;
wire   [0:0] xor_ln34_fu_529_p2;
wire   [2:0] select_ln34_fu_522_p3;
wire   [0:0] and_ln34_1_fu_546_p2;
wire   [0:0] or_ln35_fu_558_p2;
wire   [0:0] xor_ln35_fu_571_p2;
wire   [0:0] or_ln35_1_fu_577_p2;
wire   [0:0] and_ln34_fu_582_p2;
wire   [0:0] icmp_ln37_fu_534_p2;
wire   [2:0] add_ln35_fu_552_p2;
wire   [2:0] select_ln35_fu_563_p3;
wire   [0:0] and_ln35_fu_588_p2;
wire   [0:0] or_ln36_fu_608_p2;
wire   [0:0] or_ln36_1_fu_614_p2;
wire   [2:0] add_ln36_fu_602_p2;
wire   [4:0] tmp_10_fu_639_p3;
wire   [5:0] zext_ln39_1_fu_647_p1;
wire   [5:0] zext_ln39_fu_635_p1;
wire   [5:0] add_ln39_fu_651_p2;
wire   [5:0] zext_ln39_2_fu_657_p1;
wire   [5:0] add_ln39_1_fu_661_p2;
wire   [7:0] tmp_fu_671_p3;
wire   [7:0] zext_ln39_3_fu_667_p1;
wire   [2:0] select_ln36_fu_619_p3;
wire   [7:0] add_ln39_2_fu_679_p2;
wire   [7:0] zext_ln39_4_fu_685_p1;
wire   [7:0] add_ln39_3_fu_689_p2;
wire   [5:0] add_ln36_1_fu_724_p2;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 kw_fu_140 = 3'd0;
#0 kh_fu_144 = 3'd0;
#0 indvar_flatten18_fu_148 = 6'd0;
#0 ci_fu_152 = 3'd0;
#0 indvar_flatten31_fu_156 = 8'd0;
#0 co_fu_160 = 5'd0;
#0 indvar_flatten53_fu_164 = 12'd0;
#0 ap_done_reg = 1'b0;
end

convolution3_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter1_stage0)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ci_fu_152 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            ci_fu_152 <= select_ln35_1_fu_594_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            co_fu_160 <= 5'd0;
        end else if (((icmp_ln34_reg_813 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            co_fu_160 <= select_ln34_1_fu_470_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            indvar_flatten18_fu_148 <= 6'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            indvar_flatten18_fu_148 <= select_ln36_2_fu_730_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if ((ap_loop_init == 1'b1)) begin
            indvar_flatten31_fu_156 <= 8'd0;
        end else if (((icmp_ln34_reg_813 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1))) begin
            indvar_flatten31_fu_156 <= select_ln35_2_fu_492_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln34_fu_429_p2 == 1'd0))) begin
            indvar_flatten53_fu_164 <= add_ln34_1_fu_435_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten53_fu_164 <= 12'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kh_fu_144 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            kh_fu_144 <= select_ln36_1_fu_627_p3;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        if (((ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            kw_fu_140 <= 3'd0;
        end else if ((ap_enable_reg_pp0_iter2 == 1'b1)) begin
            kw_fu_140 <= add_ln37_fu_718_p2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        bitcast_ln39_reg_830 <= bitcast_ln39_fu_482_p1;
        icmp_ln34_reg_813 <= icmp_ln34_fu_429_p2;
        icmp_ln35_reg_817 <= icmp_ln35_fu_464_p2;
        trunc_ln34_reg_826 <= trunc_ln34_fu_478_p1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (icmp_ln34_reg_813 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        WEIGHTS_blk_n_R = m_axi_WEIGHTS_RVALID;
    end else begin
        WEIGHTS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (icmp_ln34_fu_429_p2 == 1'd1))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (icmp_ln34_reg_813 == 1'd1) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter1_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten53_load = 12'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten53_load = indvar_flatten53_fu_164;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_10_ce0 = 1'b1;
    end else begin
        local_weights_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd10))) begin
        local_weights_10_we0 = 1'b1;
    end else begin
        local_weights_10_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_11_ce0 = 1'b1;
    end else begin
        local_weights_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd11))) begin
        local_weights_11_we0 = 1'b1;
    end else begin
        local_weights_11_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_12_ce0 = 1'b1;
    end else begin
        local_weights_12_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd12))) begin
        local_weights_12_we0 = 1'b1;
    end else begin
        local_weights_12_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_13_ce0 = 1'b1;
    end else begin
        local_weights_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd13))) begin
        local_weights_13_we0 = 1'b1;
    end else begin
        local_weights_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_14_ce0 = 1'b1;
    end else begin
        local_weights_14_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd14))) begin
        local_weights_14_we0 = 1'b1;
    end else begin
        local_weights_14_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_15_ce0 = 1'b1;
    end else begin
        local_weights_15_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd15))) begin
        local_weights_15_we0 = 1'b1;
    end else begin
        local_weights_15_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_1_ce0 = 1'b1;
    end else begin
        local_weights_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd1))) begin
        local_weights_1_we0 = 1'b1;
    end else begin
        local_weights_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_2_ce0 = 1'b1;
    end else begin
        local_weights_2_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd2))) begin
        local_weights_2_we0 = 1'b1;
    end else begin
        local_weights_2_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_3_ce0 = 1'b1;
    end else begin
        local_weights_3_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd3))) begin
        local_weights_3_we0 = 1'b1;
    end else begin
        local_weights_3_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_4_ce0 = 1'b1;
    end else begin
        local_weights_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd4))) begin
        local_weights_4_we0 = 1'b1;
    end else begin
        local_weights_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_5_ce0 = 1'b1;
    end else begin
        local_weights_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd5))) begin
        local_weights_5_we0 = 1'b1;
    end else begin
        local_weights_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_6_ce0 = 1'b1;
    end else begin
        local_weights_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd6))) begin
        local_weights_6_we0 = 1'b1;
    end else begin
        local_weights_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_7_ce0 = 1'b1;
    end else begin
        local_weights_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd7))) begin
        local_weights_7_we0 = 1'b1;
    end else begin
        local_weights_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_8_ce0 = 1'b1;
    end else begin
        local_weights_8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd8))) begin
        local_weights_8_we0 = 1'b1;
    end else begin
        local_weights_8_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_9_ce0 = 1'b1;
    end else begin
        local_weights_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd9))) begin
        local_weights_9_we0 = 1'b1;
    end else begin
        local_weights_9_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        local_weights_ce0 = 1'b1;
    end else begin
        local_weights_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (trunc_ln34_reg_826 == 4'd0))) begin
        local_weights_we0 = 1'b1;
    end else begin
        local_weights_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (icmp_ln34_reg_813 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        m_axi_WEIGHTS_RREADY = 1'b1;
    end else begin
        m_axi_WEIGHTS_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln34_1_fu_435_p2 = (ap_sig_allocacmp_indvar_flatten53_load + 12'd1);

assign add_ln34_fu_458_p2 = (co_fu_160 + 5'd1);

assign add_ln35_1_fu_486_p2 = (indvar_flatten31_fu_156 + 8'd1);

assign add_ln35_fu_552_p2 = (select_ln34_fu_522_p3 + 3'd1);

assign add_ln36_1_fu_724_p2 = (indvar_flatten18_fu_148 + 6'd1);

assign add_ln36_fu_602_p2 = (select_ln35_fu_563_p3 + 3'd1);

assign add_ln37_fu_718_p2 = (select_ln36_fu_619_p3 + 3'd1);

assign add_ln39_1_fu_661_p2 = (add_ln39_fu_651_p2 + zext_ln39_2_fu_657_p1);

assign add_ln39_2_fu_679_p2 = (tmp_fu_671_p3 + zext_ln39_3_fu_667_p1);

assign add_ln39_3_fu_689_p2 = (add_ln39_2_fu_679_p2 + zext_ln39_4_fu_685_p1);

assign add_ln39_fu_651_p2 = (zext_ln39_1_fu_647_p1 + zext_ln39_fu_635_p1);

assign and_ln34_1_fu_546_p2 = (xor_ln34_fu_529_p2 & icmp_ln36_fu_540_p2);

assign and_ln34_fu_582_p2 = (xor_ln34_fu_529_p2 & or_ln35_1_fu_577_p2);

assign and_ln35_fu_588_p2 = (icmp_ln37_fu_534_p2 & and_ln34_fu_582_p2);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage0_iter1));
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = ((icmp_ln34_reg_813 == 1'd0) & (m_axi_WEIGHTS_RVALID == 1'b0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign bitcast_ln39_fu_482_p1 = m_axi_WEIGHTS_RDATA;

assign icmp_ln34_fu_429_p2 = ((ap_sig_allocacmp_indvar_flatten53_load == 12'd2400) ? 1'b1 : 1'b0);

assign icmp_ln35_fu_464_p2 = ((indvar_flatten31_fu_156 == 8'd150) ? 1'b1 : 1'b0);

assign icmp_ln36_fu_540_p2 = ((indvar_flatten18_fu_148 == 6'd25) ? 1'b1 : 1'b0);

assign icmp_ln37_fu_534_p2 = ((kw_fu_140 == 3'd5) ? 1'b1 : 1'b0);

assign local_weights_10_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_10_d0 = bitcast_ln39_reg_830;

assign local_weights_11_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_11_d0 = bitcast_ln39_reg_830;

assign local_weights_12_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_12_d0 = bitcast_ln39_reg_830;

assign local_weights_13_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_13_d0 = bitcast_ln39_reg_830;

assign local_weights_14_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_14_d0 = bitcast_ln39_reg_830;

assign local_weights_15_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_15_d0 = bitcast_ln39_reg_830;

assign local_weights_1_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_1_d0 = bitcast_ln39_reg_830;

assign local_weights_2_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_2_d0 = bitcast_ln39_reg_830;

assign local_weights_3_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_3_d0 = bitcast_ln39_reg_830;

assign local_weights_4_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_4_d0 = bitcast_ln39_reg_830;

assign local_weights_5_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_5_d0 = bitcast_ln39_reg_830;

assign local_weights_6_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_6_d0 = bitcast_ln39_reg_830;

assign local_weights_7_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_7_d0 = bitcast_ln39_reg_830;

assign local_weights_8_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_8_d0 = bitcast_ln39_reg_830;

assign local_weights_9_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_9_d0 = bitcast_ln39_reg_830;

assign local_weights_address0 = zext_ln39_5_fu_695_p1;

assign local_weights_d0 = bitcast_ln39_reg_830;

assign m_axi_WEIGHTS_ARADDR = 64'd0;

assign m_axi_WEIGHTS_ARBURST = 2'd0;

assign m_axi_WEIGHTS_ARCACHE = 4'd0;

assign m_axi_WEIGHTS_ARID = 1'd0;

assign m_axi_WEIGHTS_ARLEN = 32'd0;

assign m_axi_WEIGHTS_ARLOCK = 2'd0;

assign m_axi_WEIGHTS_ARPROT = 3'd0;

assign m_axi_WEIGHTS_ARQOS = 4'd0;

assign m_axi_WEIGHTS_ARREGION = 4'd0;

assign m_axi_WEIGHTS_ARSIZE = 3'd0;

assign m_axi_WEIGHTS_ARUSER = 1'd0;

assign m_axi_WEIGHTS_ARVALID = 1'b0;

assign m_axi_WEIGHTS_AWADDR = 64'd0;

assign m_axi_WEIGHTS_AWBURST = 2'd0;

assign m_axi_WEIGHTS_AWCACHE = 4'd0;

assign m_axi_WEIGHTS_AWID = 1'd0;

assign m_axi_WEIGHTS_AWLEN = 32'd0;

assign m_axi_WEIGHTS_AWLOCK = 2'd0;

assign m_axi_WEIGHTS_AWPROT = 3'd0;

assign m_axi_WEIGHTS_AWQOS = 4'd0;

assign m_axi_WEIGHTS_AWREGION = 4'd0;

assign m_axi_WEIGHTS_AWSIZE = 3'd0;

assign m_axi_WEIGHTS_AWUSER = 1'd0;

assign m_axi_WEIGHTS_AWVALID = 1'b0;

assign m_axi_WEIGHTS_BREADY = 1'b0;

assign m_axi_WEIGHTS_WDATA = 32'd0;

assign m_axi_WEIGHTS_WID = 1'd0;

assign m_axi_WEIGHTS_WLAST = 1'b0;

assign m_axi_WEIGHTS_WSTRB = 4'd0;

assign m_axi_WEIGHTS_WUSER = 1'd0;

assign m_axi_WEIGHTS_WVALID = 1'b0;

assign or_ln35_1_fu_577_p2 = (xor_ln35_fu_571_p2 | icmp_ln35_reg_817);

assign or_ln35_fu_558_p2 = (icmp_ln35_reg_817 | and_ln34_1_fu_546_p2);

assign or_ln36_1_fu_614_p2 = (or_ln36_fu_608_p2 | icmp_ln35_reg_817);

assign or_ln36_fu_608_p2 = (and_ln35_fu_588_p2 | and_ln34_1_fu_546_p2);

assign select_ln34_1_fu_470_p3 = ((icmp_ln35_fu_464_p2[0:0] == 1'b1) ? add_ln34_fu_458_p2 : co_fu_160);

assign select_ln34_fu_522_p3 = ((icmp_ln35_reg_817[0:0] == 1'b1) ? 3'd0 : ci_fu_152);

assign select_ln35_1_fu_594_p3 = ((and_ln34_1_fu_546_p2[0:0] == 1'b1) ? add_ln35_fu_552_p2 : select_ln34_fu_522_p3);

assign select_ln35_2_fu_492_p3 = ((icmp_ln35_fu_464_p2[0:0] == 1'b1) ? 8'd1 : add_ln35_1_fu_486_p2);

assign select_ln35_fu_563_p3 = ((or_ln35_fu_558_p2[0:0] == 1'b1) ? 3'd0 : kh_fu_144);

assign select_ln36_1_fu_627_p3 = ((and_ln35_fu_588_p2[0:0] == 1'b1) ? add_ln36_fu_602_p2 : select_ln35_fu_563_p3);

assign select_ln36_2_fu_730_p3 = ((or_ln35_fu_558_p2[0:0] == 1'b1) ? 6'd1 : add_ln36_1_fu_724_p2);

assign select_ln36_fu_619_p3 = ((or_ln36_1_fu_614_p2[0:0] == 1'b1) ? 3'd0 : kw_fu_140);

assign tmp_10_fu_639_p3 = {{select_ln35_1_fu_594_p3}, {2'd0}};

assign tmp_fu_671_p3 = {{add_ln39_1_fu_661_p2}, {2'd0}};

assign trunc_ln34_fu_478_p1 = select_ln34_1_fu_470_p3[3:0];

assign xor_ln34_fu_529_p2 = (icmp_ln35_reg_817 ^ 1'd1);

assign xor_ln35_fu_571_p2 = (icmp_ln36_fu_540_p2 ^ 1'd1);

assign zext_ln39_1_fu_647_p1 = tmp_10_fu_639_p3;

assign zext_ln39_2_fu_657_p1 = select_ln36_1_fu_627_p3;

assign zext_ln39_3_fu_667_p1 = add_ln39_1_fu_661_p2;

assign zext_ln39_4_fu_685_p1 = select_ln36_fu_619_p3;

assign zext_ln39_5_fu_695_p1 = add_ln39_3_fu_689_p2;

assign zext_ln39_fu_635_p1 = select_ln35_1_fu_594_p3;

endmodule //convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_34_4_VITIS_LOOP_35_5_VITIS_LOOP_36_6_VITIS_s
