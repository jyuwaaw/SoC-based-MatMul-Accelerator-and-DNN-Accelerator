-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_24_1_VITIS_LOOP_25_2_VITIS_LOOP_26_3 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_INPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_INPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_INPUT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_INPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_WREADY : IN STD_LOGIC;
    m_axi_INPUT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_INPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_INPUT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_INPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_INPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_INPUT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_INPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_INPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_INPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_RVALID : IN STD_LOGIC;
    m_axi_INPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_INPUT_r_RLAST : IN STD_LOGIC;
    m_axi_INPUT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_INPUT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BVALID : IN STD_LOGIC;
    m_axi_INPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_INPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_INPUT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_INPUT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln24 : IN STD_LOGIC_VECTOR (61 downto 0);
    local_input_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_ce0 : OUT STD_LOGIC;
    local_input_we0 : OUT STD_LOGIC;
    local_input_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_1_ce0 : OUT STD_LOGIC;
    local_input_1_we0 : OUT STD_LOGIC;
    local_input_1_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_input_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_2_ce0 : OUT STD_LOGIC;
    local_input_2_we0 : OUT STD_LOGIC;
    local_input_2_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_input_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_3_ce0 : OUT STD_LOGIC;
    local_input_3_we0 : OUT STD_LOGIC;
    local_input_3_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_input_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_4_ce0 : OUT STD_LOGIC;
    local_input_4_we0 : OUT STD_LOGIC;
    local_input_4_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    local_input_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_5_ce0 : OUT STD_LOGIC;
    local_input_5_we0 : OUT STD_LOGIC;
    local_input_5_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_24_1_VITIS_LOOP_25_2_VITIS_LOOP_26_3 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv11_498 : STD_LOGIC_VECTOR (10 downto 0) := "10010011000";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv8_C4 : STD_LOGIC_VECTOR (7 downto 0) := "11000100";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv4_E : STD_LOGIC_VECTOR (3 downto 0) := "1110";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal icmp_ln24_reg_472 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln24_fu_231_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal INPUT_r_blk_n_R : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln25_fu_266_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln25_reg_476 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_1_fu_272_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln24_1_reg_483 : STD_LOGIC_VECTOR (2 downto 0);
    signal INPUT_r_addr_read_reg_487 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_condition_exit_pp0_iter1_stage0 : STD_LOGIC;
    signal zext_ln28_2_fu_397_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal w_fu_90 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal add_ln26_fu_416_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal h_fu_94 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln25_1_fu_353_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten_fu_98 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln25_2_fu_286_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal c_fu_102 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten11_fu_106 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    signal add_ln24_1_fu_237_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_sig_allocacmp_indvar_flatten11_load : STD_LOGIC_VECTOR (10 downto 0);
    signal bitcast_ln28_fu_407_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal add_ln24_fu_260_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln25_1_fu_280_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln26_fu_322_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln24_fu_317_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln24_fu_310_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln24_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln25_fu_340_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln25_fu_334_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_9_fu_369_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_8_fu_361_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_fu_377_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln25_fu_345_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln28_fu_381_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln28_1_fu_387_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln28_fu_391_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_ce_reg : STD_LOGIC;

    component convolution3_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_sequential_init_U : component convolution3_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter1_stage0)) then 
                    ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    c_fu_102_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    c_fu_102 <= ap_const_lv3_0;
                elsif (((icmp_ln24_reg_472 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    c_fu_102 <= select_ln24_1_fu_272_p3;
                end if;
            end if; 
        end if;
    end process;

    h_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    h_fu_94 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    h_fu_94 <= select_ln25_1_fu_353_p3;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten11_fu_106_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln24_fu_231_p2 = ap_const_lv1_0))) then 
                    indvar_flatten11_fu_106 <= add_ln24_1_fu_237_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten11_fu_106 <= ap_const_lv11_0;
                end if;
            end if; 
        end if;
    end process;

    indvar_flatten_fu_98_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    indvar_flatten_fu_98 <= ap_const_lv8_0;
                elsif (((icmp_ln24_reg_472 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then 
                    indvar_flatten_fu_98 <= select_ln25_2_fu_286_p3;
                end if;
            end if; 
        end if;
    end process;

    w_fu_90_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    w_fu_90 <= ap_const_lv4_0;
                elsif ((ap_enable_reg_pp0_iter2 = ap_const_logic_1)) then 
                    w_fu_90 <= add_ln26_fu_416_p2;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                INPUT_r_addr_read_reg_487 <= m_axi_INPUT_r_RDATA;
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                icmp_ln24_reg_472 <= icmp_ln24_fu_231_p2;
                icmp_ln25_reg_476 <= icmp_ln25_fu_266_p2;
                select_ln24_1_reg_483 <= select_ln24_1_fu_272_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;

    INPUT_r_blk_n_R_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, m_axi_INPUT_r_RVALID, icmp_ln24_reg_472, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (icmp_ln24_reg_472 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            INPUT_r_blk_n_R <= m_axi_INPUT_r_RVALID;
        else 
            INPUT_r_blk_n_R <= ap_const_logic_1;
        end if; 
    end process;

    add_ln24_1_fu_237_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_indvar_flatten11_load) + unsigned(ap_const_lv11_1));
    add_ln24_fu_260_p2 <= std_logic_vector(unsigned(c_fu_102) + unsigned(ap_const_lv3_1));
    add_ln25_1_fu_280_p2 <= std_logic_vector(unsigned(indvar_flatten_fu_98) + unsigned(ap_const_lv8_1));
    add_ln25_fu_334_p2 <= std_logic_vector(unsigned(select_ln24_fu_310_p3) + unsigned(ap_const_lv4_1));
    add_ln26_fu_416_p2 <= std_logic_vector(unsigned(select_ln25_fu_345_p3) + unsigned(ap_const_lv4_1));
    add_ln28_fu_391_p2 <= std_logic_vector(unsigned(sub_ln28_fu_381_p2) + unsigned(zext_ln28_1_fu_387_p1));
    and_ln24_fu_328_p2 <= (xor_ln24_fu_317_p2 and icmp_ln26_fu_322_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_block_state2_pp0_stage0_iter1)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state2_pp0_stage0_iter1));
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(m_axi_INPUT_r_RVALID, icmp_ln24_reg_472)
    begin
                ap_block_state2_pp0_stage0_iter1 <= ((icmp_ln24_reg_472 = ap_const_lv1_0) and (m_axi_INPUT_r_RVALID = ap_const_logic_0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, icmp_ln24_fu_231_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (icmp_ln24_fu_231_p2 = ap_const_lv1_1))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_exit_pp0_iter1_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_472, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (icmp_ln24_reg_472 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter1_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_indvar_flatten11_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, ap_loop_init, indvar_flatten11_fu_106)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_sig_allocacmp_indvar_flatten11_load <= ap_const_lv11_0;
        else 
            ap_sig_allocacmp_indvar_flatten11_load <= indvar_flatten11_fu_106;
        end if; 
    end process;

    bitcast_ln28_fu_407_p1 <= INPUT_r_addr_read_reg_487;
    icmp_ln24_fu_231_p2 <= "1" when (ap_sig_allocacmp_indvar_flatten11_load = ap_const_lv11_498) else "0";
    icmp_ln25_fu_266_p2 <= "1" when (indvar_flatten_fu_98 = ap_const_lv8_C4) else "0";
    icmp_ln26_fu_322_p2 <= "1" when (w_fu_90 = ap_const_lv4_E) else "0";
    local_input_1_address0 <= zext_ln28_2_fu_397_p1(8 - 1 downto 0);

    local_input_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_1_ce0 <= ap_const_logic_1;
        else 
            local_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_1_d0 <= bitcast_ln28_fu_407_p1;

    local_input_1_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln24_1_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln24_1_reg_483 = ap_const_lv3_1))) then 
            local_input_1_we0 <= ap_const_logic_1;
        else 
            local_input_1_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_2_address0 <= zext_ln28_2_fu_397_p1(8 - 1 downto 0);

    local_input_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_2_ce0 <= ap_const_logic_1;
        else 
            local_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_2_d0 <= bitcast_ln28_fu_407_p1;

    local_input_2_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln24_1_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln24_1_reg_483 = ap_const_lv3_2))) then 
            local_input_2_we0 <= ap_const_logic_1;
        else 
            local_input_2_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_3_address0 <= zext_ln28_2_fu_397_p1(8 - 1 downto 0);

    local_input_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_3_ce0 <= ap_const_logic_1;
        else 
            local_input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_3_d0 <= bitcast_ln28_fu_407_p1;

    local_input_3_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln24_1_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln24_1_reg_483 = ap_const_lv3_3))) then 
            local_input_3_we0 <= ap_const_logic_1;
        else 
            local_input_3_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_4_address0 <= zext_ln28_2_fu_397_p1(8 - 1 downto 0);

    local_input_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_4_ce0 <= ap_const_logic_1;
        else 
            local_input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_4_d0 <= bitcast_ln28_fu_407_p1;

    local_input_4_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln24_1_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln24_1_reg_483 = ap_const_lv3_4))) then 
            local_input_4_we0 <= ap_const_logic_1;
        else 
            local_input_4_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_5_address0 <= zext_ln28_2_fu_397_p1(8 - 1 downto 0);

    local_input_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_5_ce0 <= ap_const_logic_1;
        else 
            local_input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_5_d0 <= bitcast_ln28_fu_407_p1;

    local_input_5_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln24_1_reg_483)
    begin
        if ((not((select_ln24_1_reg_483 = ap_const_lv3_0)) and not((select_ln24_1_reg_483 = ap_const_lv3_1)) and not((select_ln24_1_reg_483 = ap_const_lv3_2)) and not((select_ln24_1_reg_483 = ap_const_lv3_3)) and not((select_ln24_1_reg_483 = ap_const_lv3_4)) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_5_we0 <= ap_const_logic_1;
        else 
            local_input_5_we0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_address0 <= zext_ln28_2_fu_397_p1(8 - 1 downto 0);

    local_input_ce0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            local_input_ce0 <= ap_const_logic_1;
        else 
            local_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_d0 <= bitcast_ln28_fu_407_p1;

    local_input_we0_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001, select_ln24_1_reg_483)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (select_ln24_1_reg_483 = ap_const_lv3_0))) then 
            local_input_we0 <= ap_const_logic_1;
        else 
            local_input_we0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_INPUT_r_ARADDR <= ap_const_lv64_0;
    m_axi_INPUT_r_ARBURST <= ap_const_lv2_0;
    m_axi_INPUT_r_ARCACHE <= ap_const_lv4_0;
    m_axi_INPUT_r_ARID <= ap_const_lv1_0;
    m_axi_INPUT_r_ARLEN <= ap_const_lv32_0;
    m_axi_INPUT_r_ARLOCK <= ap_const_lv2_0;
    m_axi_INPUT_r_ARPROT <= ap_const_lv3_0;
    m_axi_INPUT_r_ARQOS <= ap_const_lv4_0;
    m_axi_INPUT_r_ARREGION <= ap_const_lv4_0;
    m_axi_INPUT_r_ARSIZE <= ap_const_lv3_0;
    m_axi_INPUT_r_ARUSER <= ap_const_lv1_0;
    m_axi_INPUT_r_ARVALID <= ap_const_logic_0;
    m_axi_INPUT_r_AWADDR <= ap_const_lv64_0;
    m_axi_INPUT_r_AWBURST <= ap_const_lv2_0;
    m_axi_INPUT_r_AWCACHE <= ap_const_lv4_0;
    m_axi_INPUT_r_AWID <= ap_const_lv1_0;
    m_axi_INPUT_r_AWLEN <= ap_const_lv32_0;
    m_axi_INPUT_r_AWLOCK <= ap_const_lv2_0;
    m_axi_INPUT_r_AWPROT <= ap_const_lv3_0;
    m_axi_INPUT_r_AWQOS <= ap_const_lv4_0;
    m_axi_INPUT_r_AWREGION <= ap_const_lv4_0;
    m_axi_INPUT_r_AWSIZE <= ap_const_lv3_0;
    m_axi_INPUT_r_AWUSER <= ap_const_lv1_0;
    m_axi_INPUT_r_AWVALID <= ap_const_logic_0;
    m_axi_INPUT_r_BREADY <= ap_const_logic_0;

    m_axi_INPUT_r_RREADY_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, icmp_ln24_reg_472, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (icmp_ln24_reg_472 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            m_axi_INPUT_r_RREADY <= ap_const_logic_1;
        else 
            m_axi_INPUT_r_RREADY <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_INPUT_r_WDATA <= ap_const_lv32_0;
    m_axi_INPUT_r_WID <= ap_const_lv1_0;
    m_axi_INPUT_r_WLAST <= ap_const_logic_0;
    m_axi_INPUT_r_WSTRB <= ap_const_lv4_0;
    m_axi_INPUT_r_WUSER <= ap_const_lv1_0;
    m_axi_INPUT_r_WVALID <= ap_const_logic_0;
    or_ln25_fu_340_p2 <= (icmp_ln25_reg_476 or and_ln24_fu_328_p2);
    select_ln24_1_fu_272_p3 <= 
        add_ln24_fu_260_p2 when (icmp_ln25_fu_266_p2(0) = '1') else 
        c_fu_102;
    select_ln24_fu_310_p3 <= 
        ap_const_lv4_0 when (icmp_ln25_reg_476(0) = '1') else 
        h_fu_94;
    select_ln25_1_fu_353_p3 <= 
        add_ln25_fu_334_p2 when (and_ln24_fu_328_p2(0) = '1') else 
        select_ln24_fu_310_p3;
    select_ln25_2_fu_286_p3 <= 
        ap_const_lv8_1 when (icmp_ln25_fu_266_p2(0) = '1') else 
        add_ln25_1_fu_280_p2;
    select_ln25_fu_345_p3 <= 
        ap_const_lv4_0 when (or_ln25_fu_340_p2(0) = '1') else 
        w_fu_90;
    sub_ln28_fu_381_p2 <= std_logic_vector(unsigned(tmp_8_fu_361_p3) - unsigned(zext_ln28_fu_377_p1));
    tmp_8_fu_361_p3 <= (select_ln25_1_fu_353_p3 & ap_const_lv4_0);
    tmp_9_fu_369_p3 <= (select_ln25_1_fu_353_p3 & ap_const_lv1_0);
    xor_ln24_fu_317_p2 <= (icmp_ln25_reg_476 xor ap_const_lv1_1);
    zext_ln28_1_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln25_fu_345_p3),8));
    zext_ln28_2_fu_397_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln28_fu_391_p2),64));
    zext_ln28_fu_377_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_9_fu_369_p3),8));
end behav;
