-- ==============================================================
-- Generated by Vitis HLS v2023.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
-- ==============================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_54_10_VITIS_LOOP_55_11_VITIS_LOOP_57_12_VIT_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_AWREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_AWADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_OUTPUT_r_AWID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_AWLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_AWSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_AWCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_AWQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_AWUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_WVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_WDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_WSTRB : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_WLAST : OUT STD_LOGIC;
    m_axi_OUTPUT_r_WID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_WUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_ARVALID : OUT STD_LOGIC;
    m_axi_OUTPUT_r_ARREADY : IN STD_LOGIC;
    m_axi_OUTPUT_r_ARADDR : OUT STD_LOGIC_VECTOR (63 downto 0);
    m_axi_OUTPUT_r_ARID : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_ARLEN : OUT STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_ARSIZE : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARBURST : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARLOCK : OUT STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_ARCACHE : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARPROT : OUT STD_LOGIC_VECTOR (2 downto 0);
    m_axi_OUTPUT_r_ARQOS : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARREGION : OUT STD_LOGIC_VECTOR (3 downto 0);
    m_axi_OUTPUT_r_ARUSER : OUT STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_RVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_RREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_RDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    m_axi_OUTPUT_r_RLAST : IN STD_LOGIC;
    m_axi_OUTPUT_r_RID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_RFIFONUM : IN STD_LOGIC_VECTOR (8 downto 0);
    m_axi_OUTPUT_r_RUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_RRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BVALID : IN STD_LOGIC;
    m_axi_OUTPUT_r_BREADY : OUT STD_LOGIC;
    m_axi_OUTPUT_r_BRESP : IN STD_LOGIC_VECTOR (1 downto 0);
    m_axi_OUTPUT_r_BID : IN STD_LOGIC_VECTOR (0 downto 0);
    m_axi_OUTPUT_r_BUSER : IN STD_LOGIC_VECTOR (0 downto 0);
    sext_ln54_1 : IN STD_LOGIC_VECTOR (61 downto 0);
    local_weights_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_weights_1_ce0 : OUT STD_LOGIC;
    local_weights_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_weights_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_weights_5_ce0 : OUT STD_LOGIC;
    local_weights_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_weights_9_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_weights_9_ce0 : OUT STD_LOGIC;
    local_weights_9_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_weights_13_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_weights_13_ce0 : OUT STD_LOGIC;
    local_weights_13_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_ce0 : OUT STD_LOGIC;
    local_input_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_1_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_1_ce0 : OUT STD_LOGIC;
    local_input_1_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_2_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_2_ce0 : OUT STD_LOGIC;
    local_input_2_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_3_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_3_ce0 : OUT STD_LOGIC;
    local_input_3_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_4_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_4_ce0 : OUT STD_LOGIC;
    local_input_4_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    local_input_5_address0 : OUT STD_LOGIC_VECTOR (7 downto 0);
    local_input_5_ce0 : OUT STD_LOGIC;
    local_input_5_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    empty : IN STD_LOGIC_VECTOR (3 downto 0);
    local_bias_load_1 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_878_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_878_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_878_p_opcode : OUT STD_LOGIC_VECTOR (1 downto 0);
    grp_fu_878_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_878_p_ce : OUT STD_LOGIC;
    grp_fu_882_p_din0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_882_p_din1 : OUT STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_882_p_dout0 : IN STD_LOGIC_VECTOR (31 downto 0);
    grp_fu_882_p_ce : OUT STD_LOGIC );
end;


architecture behav of convolution3_hls_convolution3_hls_Pipeline_VITIS_LOOP_54_10_VITIS_LOOP_55_11_VITIS_LOOP_57_12_VIT_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage1 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_pp0_stage2 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv4_F : STD_LOGIC_VECTOR (3 downto 0) := "1111";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv14_0 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    constant ap_const_lv14_3A98 : STD_LOGIC_VECTOR (13 downto 0) := "11101010011000";
    constant ap_const_lv14_1 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000001";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv12_5DC : STD_LOGIC_VECTOR (11 downto 0) := "010111011100";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv6_19 : STD_LOGIC_VECTOR (5 downto 0) := "011001";
    constant ap_const_lv8_96 : STD_LOGIC_VECTOR (7 downto 0) := "10010110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv8_1 : STD_LOGIC_VECTOR (7 downto 0) := "00000001";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";

attribute shreg_extract : string;
    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_CS_fsm_pp0_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage2 : signal is "none";
    signal icmp_ln59_2_reg_1113 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_reg_1113_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_reg_1117 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_reg_1117_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_reg_1121 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_reg_1121_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_predicate_op186_write_state15 : BOOLEAN;
    signal ap_block_state15_io : BOOLEAN;
    signal ap_block_pp0_stage2_subdone : BOOLEAN;
    signal icmp_ln54_reg_1049 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage2 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal OUTPUT_r_blk_n_W : STD_LOGIC;
    signal ap_block_pp0_stage2 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal icmp_ln54_fu_410_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage1 : signal is "none";
    signal ap_block_pp0_stage1_11001 : BOOLEAN;
    signal or_ln55_fu_507_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1053 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_reg_1053_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal select_ln57_1_fu_597_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln57_1_reg_1058 : STD_LOGIC_VECTOR (2 downto 0);
    signal icmp_ln59_2_fu_779_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_reg_1113_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_reg_1113_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_2_reg_1113_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_fu_785_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_reg_1117_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_reg_1117_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_2_reg_1117_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_fu_791_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_reg_1121_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_reg_1121_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_2_reg_1121_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_2_fu_884_p15 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_2_reg_1125 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage2_11001 : BOOLEAN;
    signal tmp_3_fu_915_p11 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_reg_1130 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_1_reg_1135 : STD_LOGIC_VECTOR (31 downto 0);
    signal select_ln55_4_fu_941_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_2_reg_1145 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_fu_954_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal bitcast_ln65_reg_1150 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter0_reg : STD_LOGIC := '0';
    signal zext_ln61_14_fu_735_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage1 : BOOLEAN;
    signal zext_ln61_16_fu_763_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage2_01001 : BOOLEAN;
    signal sum_fu_140 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    signal ap_sig_allocacmp_sum_load : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_loop_init : STD_LOGIC;
    signal kw_fu_144 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal add_ln59_fu_773_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal kh_fu_148 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal select_ln58_1_fu_631_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal indvar_flatten138_fu_152 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    signal select_ln58_fu_803_p3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ci_fu_156 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    signal indvar_flatten153_fu_160 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    signal select_ln57_fu_817_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal w_fu_164 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln55_5_fu_551_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten177_fu_168 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    signal select_ln55_6_fu_831_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal h_fu_172 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    signal select_ln54_2_fu_493_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal indvar_flatten209_fu_176 : STD_LOGIC_VECTOR (13 downto 0) := "00000000000000";
    signal add_ln54_fu_416_p2 : STD_LOGIC_VECTOR (13 downto 0);
    signal grp_fu_336_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal icmp_ln55_fu_443_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln59_fu_463_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln54_fu_457_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln57_fu_481_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln54_1_fu_437_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln54_fu_449_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal and_ln54_3_fu_487_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln55_fu_521_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_fu_469_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln55_2_fu_527_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_ln58_fu_475_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln54_4_fu_539_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln55_1_fu_501_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal select_ln55_fu_513_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal and_ln55_2_fu_545_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_2_fu_565_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_fu_571_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln55_fu_533_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal xor_ln56_fu_585_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln57_1_fu_559_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal select_ln56_fu_577_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal or_ln56_3_fu_611_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal and_ln56_fu_591_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal or_ln56_4_fu_617_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln58_1_fu_605_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_s_fu_643_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln61_9_fu_651_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln61_fu_639_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_fu_655_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln61_10_fu_661_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln61_6_fu_665_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_4_fu_675_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_11_fu_671_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln58_fu_689_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal empty_24_fu_693_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_7_fu_707_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_699_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_12_fu_715_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal select_ln56_2_fu_623_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal add_ln61_7_fu_683_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_13_fu_725_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_8_fu_729_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln59_fu_743_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal add_ln61_1_fu_747_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal sub_ln61_fu_719_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln61_15_fu_753_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln61_9_fu_757_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln58_fu_797_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln57_fu_811_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln55_fu_825_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_2_fu_884_p13 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_3_fu_915_p9 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_336_ce : STD_LOGIC;
    signal grp_fu_340_ce : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter2_reg : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter3_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_idle_pp0_1to4 : STD_LOGIC;
    signal ap_block_pp0_stage1_subdone : BOOLEAN;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_block_pp0_stage1_00001 : BOOLEAN;
    signal tmp_2_fu_884_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_884_p3 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_884_p5 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_884_p7 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_884_p9 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_2_fu_884_p11 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_3_fu_915_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_915_p3 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_915_p5 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_3_fu_915_p7 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_ce_reg : STD_LOGIC;

    component convolution3_hls_fadd_32ns_32ns_32_4_full_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution3_hls_fmul_32ns_32ns_32_3_max_dsp_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution3_hls_sparsemux_13_3_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (2 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (2 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (2 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (2 downto 0);
        din3_WIDTH : INTEGER;
        CASE4 : STD_LOGIC_VECTOR (2 downto 0);
        din4_WIDTH : INTEGER;
        CASE5 : STD_LOGIC_VECTOR (2 downto 0);
        din5_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        din4 : IN STD_LOGIC_VECTOR (31 downto 0);
        din5 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (2 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution3_hls_sparsemux_9_4_32_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        CASE0 : STD_LOGIC_VECTOR (3 downto 0);
        din0_WIDTH : INTEGER;
        CASE1 : STD_LOGIC_VECTOR (3 downto 0);
        din1_WIDTH : INTEGER;
        CASE2 : STD_LOGIC_VECTOR (3 downto 0);
        din2_WIDTH : INTEGER;
        CASE3 : STD_LOGIC_VECTOR (3 downto 0);
        din3_WIDTH : INTEGER;
        def_WIDTH : INTEGER;
        sel_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        din2 : IN STD_LOGIC_VECTOR (31 downto 0);
        din3 : IN STD_LOGIC_VECTOR (31 downto 0);
        def : IN STD_LOGIC_VECTOR (31 downto 0);
        sel : IN STD_LOGIC_VECTOR (3 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component convolution3_hls_flow_control_loop_pipe_sequential_init IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC );
    end component;



begin
    sparsemux_13_3_32_1_1_U52 : component convolution3_hls_sparsemux_13_3_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "000",
        din0_WIDTH => 32,
        CASE1 => "001",
        din1_WIDTH => 32,
        CASE2 => "010",
        din2_WIDTH => 32,
        CASE3 => "011",
        din3_WIDTH => 32,
        CASE4 => "100",
        din4_WIDTH => 32,
        CASE5 => "101",
        din5_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 3,
        dout_WIDTH => 32)
    port map (
        din0 => local_input_q0,
        din1 => local_input_1_q0,
        din2 => local_input_2_q0,
        din3 => local_input_3_q0,
        din4 => local_input_4_q0,
        din5 => local_input_5_q0,
        def => tmp_2_fu_884_p13,
        sel => select_ln57_1_reg_1058,
        dout => tmp_2_fu_884_p15);

    sparsemux_9_4_32_1_1_U53 : component convolution3_hls_sparsemux_9_4_32_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        CASE0 => "0000",
        din0_WIDTH => 32,
        CASE1 => "0100",
        din1_WIDTH => 32,
        CASE2 => "1000",
        din2_WIDTH => 32,
        CASE3 => "1100",
        din3_WIDTH => 32,
        def_WIDTH => 32,
        sel_WIDTH => 4,
        dout_WIDTH => 32)
    port map (
        din0 => local_weights_1_q0,
        din1 => local_weights_5_q0,
        din2 => local_weights_9_q0,
        din3 => local_weights_13_q0,
        def => tmp_3_fu_915_p9,
        sel => empty,
        dout => tmp_3_fu_915_p11);

    flow_control_loop_pipe_sequential_init_U : component convolution3_hls_flow_control_loop_pipe_sequential_init
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => ap_start,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage2,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0_reg <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
                    ap_enable_reg_pp0_iter0_reg <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage2)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ci_fu_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                ci_fu_156 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                ci_fu_156 <= select_ln57_1_fu_597_p3;
            end if; 
        end if;
    end process;

    h_fu_172_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                h_fu_172 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                h_fu_172 <= select_ln54_2_fu_493_p3;
            end if; 
        end if;
    end process;

    indvar_flatten138_fu_152_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten138_fu_152 <= ap_const_lv6_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten138_fu_152 <= select_ln58_fu_803_p3;
            end if; 
        end if;
    end process;

    indvar_flatten153_fu_160_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten153_fu_160 <= ap_const_lv8_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten153_fu_160 <= select_ln57_fu_817_p3;
            end if; 
        end if;
    end process;

    indvar_flatten177_fu_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten177_fu_168 <= ap_const_lv12_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten177_fu_168 <= select_ln55_6_fu_831_p3;
            end if; 
        end if;
    end process;

    indvar_flatten209_fu_176_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                indvar_flatten209_fu_176 <= ap_const_lv14_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                indvar_flatten209_fu_176 <= add_ln54_fu_416_p2;
            end if; 
        end if;
    end process;

    kh_fu_148_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kh_fu_148 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                kh_fu_148 <= select_ln58_1_fu_631_p3;
            end if; 
        end if;
    end process;

    kw_fu_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                kw_fu_144 <= ap_const_lv3_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                kw_fu_144 <= add_ln59_fu_773_p2;
            end if; 
        end if;
    end process;

    sum_fu_140_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                if ((ap_loop_init = ap_const_logic_1)) then 
                    sum_fu_140 <= ap_const_lv32_0;
                elsif ((ap_enable_reg_pp0_iter3 = ap_const_logic_1)) then 
                    sum_fu_140 <= grp_fu_878_p_dout0;
                end if;
            end if; 
        end if;
    end process;

    w_fu_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_loop_init = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                w_fu_164 <= ap_const_lv4_0;
            elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (icmp_ln54_fu_410_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
                w_fu_164 <= select_ln55_5_fu_551_p3;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                ap_loop_exit_ready_pp0_iter2_reg <= ap_loop_exit_ready_pp0_iter1_reg;
                ap_loop_exit_ready_pp0_iter3_reg <= ap_loop_exit_ready_pp0_iter2_reg;
                mul_1_reg_1135 <= grp_fu_882_p_dout0;
                tmp_2_reg_1125 <= tmp_2_fu_884_p15;
                tmp_3_reg_1130 <= tmp_3_fu_915_p11;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then
                bitcast_ln65_reg_1150 <= bitcast_ln65_fu_954_p1;
                icmp_ln54_reg_1049 <= icmp_ln54_fu_410_p2;
                icmp_ln57_2_reg_1121 <= icmp_ln57_2_fu_791_p2;
                icmp_ln57_2_reg_1121_pp0_iter1_reg <= icmp_ln57_2_reg_1121;
                icmp_ln57_2_reg_1121_pp0_iter2_reg <= icmp_ln57_2_reg_1121_pp0_iter1_reg;
                icmp_ln57_2_reg_1121_pp0_iter3_reg <= icmp_ln57_2_reg_1121_pp0_iter2_reg;
                icmp_ln57_2_reg_1121_pp0_iter4_reg <= icmp_ln57_2_reg_1121_pp0_iter3_reg;
                icmp_ln58_2_reg_1117 <= icmp_ln58_2_fu_785_p2;
                icmp_ln58_2_reg_1117_pp0_iter1_reg <= icmp_ln58_2_reg_1117;
                icmp_ln58_2_reg_1117_pp0_iter2_reg <= icmp_ln58_2_reg_1117_pp0_iter1_reg;
                icmp_ln58_2_reg_1117_pp0_iter3_reg <= icmp_ln58_2_reg_1117_pp0_iter2_reg;
                icmp_ln58_2_reg_1117_pp0_iter4_reg <= icmp_ln58_2_reg_1117_pp0_iter3_reg;
                icmp_ln59_2_reg_1113 <= icmp_ln59_2_fu_779_p2;
                icmp_ln59_2_reg_1113_pp0_iter1_reg <= icmp_ln59_2_reg_1113;
                icmp_ln59_2_reg_1113_pp0_iter2_reg <= icmp_ln59_2_reg_1113_pp0_iter1_reg;
                icmp_ln59_2_reg_1113_pp0_iter3_reg <= icmp_ln59_2_reg_1113_pp0_iter2_reg;
                icmp_ln59_2_reg_1113_pp0_iter4_reg <= icmp_ln59_2_reg_1113_pp0_iter3_reg;
                or_ln55_reg_1053 <= or_ln55_fu_507_p2;
                or_ln55_reg_1053_pp0_iter1_reg <= or_ln55_reg_1053;
                select_ln57_1_reg_1058 <= select_ln57_1_fu_597_p3;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                sum_2_reg_1145 <= grp_fu_878_p_dout0;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm, ap_block_pp0_stage2_subdone, ap_block_pp0_stage0_subdone, ap_idle_pp0_1to4, ap_block_pp0_stage1_subdone, ap_start_int)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_start_int = ap_const_logic_0) and (ap_idle_pp0_1to4 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_pp0_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage1;
                end if;
            when ap_ST_fsm_pp0_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp0_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage2;
                end if;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;

    OUTPUT_r_blk_n_W_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, m_axi_OUTPUT_r_WREADY, ap_predicate_op186_write_state15, ap_block_pp0_stage2)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2) and (ap_predicate_op186_write_state15 = ap_const_boolean_1))) then 
            OUTPUT_r_blk_n_W <= m_axi_OUTPUT_r_WREADY;
        else 
            OUTPUT_r_blk_n_W <= ap_const_logic_1;
        end if; 
    end process;

    add_ln54_1_fu_437_p2 <= std_logic_vector(unsigned(h_fu_172) + unsigned(ap_const_lv4_1));
    add_ln54_fu_416_p2 <= std_logic_vector(unsigned(indvar_flatten209_fu_176) + unsigned(ap_const_lv14_1));
    add_ln55_1_fu_501_p2 <= std_logic_vector(unsigned(select_ln54_fu_449_p3) + unsigned(ap_const_lv4_1));
    add_ln55_fu_825_p2 <= std_logic_vector(unsigned(indvar_flatten177_fu_168) + unsigned(ap_const_lv12_1));
    add_ln57_1_fu_559_p2 <= std_logic_vector(unsigned(select_ln55_fu_513_p3) + unsigned(ap_const_lv3_1));
    add_ln57_fu_811_p2 <= std_logic_vector(unsigned(indvar_flatten153_fu_160) + unsigned(ap_const_lv8_1));
    add_ln58_1_fu_605_p2 <= std_logic_vector(unsigned(select_ln56_fu_577_p3) + unsigned(ap_const_lv3_1));
    add_ln58_fu_797_p2 <= std_logic_vector(unsigned(indvar_flatten138_fu_152) + unsigned(ap_const_lv6_1));
    add_ln59_fu_773_p2 <= std_logic_vector(unsigned(select_ln56_2_fu_623_p3) + unsigned(ap_const_lv3_1));
    add_ln61_1_fu_747_p2 <= std_logic_vector(unsigned(zext_ln59_fu_743_p1) + unsigned(select_ln55_5_fu_551_p3));
    add_ln61_6_fu_665_p2 <= std_logic_vector(unsigned(add_ln61_fu_655_p2) + unsigned(zext_ln61_10_fu_661_p1));
    add_ln61_7_fu_683_p2 <= std_logic_vector(unsigned(tmp_4_fu_675_p3) + unsigned(zext_ln61_11_fu_671_p1));
    add_ln61_8_fu_729_p2 <= std_logic_vector(unsigned(add_ln61_7_fu_683_p2) + unsigned(zext_ln61_13_fu_725_p1));
    add_ln61_9_fu_757_p2 <= std_logic_vector(unsigned(sub_ln61_fu_719_p2) + unsigned(zext_ln61_15_fu_753_p1));
    add_ln61_fu_655_p2 <= std_logic_vector(unsigned(zext_ln61_9_fu_651_p1) + unsigned(zext_ln61_fu_639_p1));
    and_ln54_3_fu_487_p2 <= (xor_ln54_fu_457_p2 and icmp_ln57_fu_481_p2);
    and_ln54_4_fu_539_p2 <= (xor_ln54_fu_457_p2 and icmp_ln58_fu_475_p2);
    and_ln54_fu_469_p2 <= (xor_ln54_fu_457_p2 and icmp_ln59_fu_463_p2);
    and_ln55_2_fu_545_p2 <= (or_ln55_2_fu_527_p2 and and_ln54_4_fu_539_p2);
    and_ln55_fu_533_p2 <= (or_ln55_2_fu_527_p2 and and_ln54_fu_469_p2);
    and_ln56_fu_591_p2 <= (xor_ln56_fu_585_p2 and and_ln55_fu_533_p2);
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
    ap_CS_fsm_pp0_stage1 <= ap_CS_fsm(1);
    ap_CS_fsm_pp0_stage2 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage2_01001 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage2_11001_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state15_io)
    begin
                ap_block_pp0_stage2_11001 <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io));
    end process;


    ap_block_pp0_stage2_subdone_assign_proc : process(ap_enable_reg_pp0_iter4, ap_block_state15_io)
    begin
                ap_block_pp0_stage2_subdone <= ((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_boolean_1 = ap_block_state15_io));
    end process;


    ap_block_state15_io_assign_proc : process(m_axi_OUTPUT_r_WREADY, ap_predicate_op186_write_state15)
    begin
                ap_block_state15_io <= ((m_axi_OUTPUT_r_WREADY = ap_const_logic_0) and (ap_predicate_op186_write_state15 = ap_const_boolean_1));
    end process;


    ap_condition_exit_pp0_iter0_stage2_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, icmp_ln54_reg_1049)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (icmp_ln54_reg_1049 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone, ap_done_reg, ap_loop_exit_ready_pp0_iter3_reg)
    begin
        if (((ap_loop_exit_ready_pp0_iter3_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_enable_reg_pp0_iter0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0_reg, ap_start_int)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) then 
            ap_enable_reg_pp0_iter0 <= ap_start_int;
        else 
            ap_enable_reg_pp0_iter0 <= ap_enable_reg_pp0_iter0_reg;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_1to4_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0_1to4 <= ap_const_logic_1;
        else 
            ap_idle_pp0_1to4 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage2;

    ap_predicate_op186_write_state15_assign_proc : process(icmp_ln59_2_reg_1113_pp0_iter4_reg, icmp_ln58_2_reg_1117_pp0_iter4_reg, icmp_ln57_2_reg_1121_pp0_iter4_reg)
    begin
                ap_predicate_op186_write_state15 <= ((icmp_ln59_2_reg_1113_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln57_2_reg_1121_pp0_iter4_reg = ap_const_lv1_1) and (icmp_ln58_2_reg_1117_pp0_iter4_reg = ap_const_lv1_1));
    end process;


    ap_ready_int_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage2_subdone)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_subdone))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_sum_load_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter3, sum_fu_140, ap_block_pp0_stage0, grp_fu_878_p_dout0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            ap_sig_allocacmp_sum_load <= grp_fu_878_p_dout0;
        else 
            ap_sig_allocacmp_sum_load <= sum_fu_140;
        end if; 
    end process;

    bitcast_ln65_fu_954_p1 <= grp_fu_878_p_dout0;
    empty_24_fu_693_p2 <= std_logic_vector(unsigned(zext_ln58_fu_689_p1) + unsigned(select_ln54_2_fu_493_p3));

    grp_fu_336_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_336_ce <= ap_const_logic_1;
        else 
            grp_fu_336_ce <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_336_p0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_CS_fsm_pp0_stage1, select_ln55_4_fu_941_p3, sum_2_reg_1145, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_336_p0 <= sum_2_reg_1145;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_336_p0 <= select_ln55_4_fu_941_p3;
        else 
            grp_fu_336_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_336_p1_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, local_bias_load_1, ap_CS_fsm_pp0_stage1, mul_1_reg_1135, ap_block_pp0_stage1, ap_block_pp0_stage0)
    begin
        if (((ap_enable_reg_pp0_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1))) then 
            grp_fu_336_p1 <= local_bias_load_1;
        elsif (((ap_enable_reg_pp0_iter2 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            grp_fu_336_p1 <= mul_1_reg_1135;
        else 
            grp_fu_336_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_340_ce_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp0_stage2, ap_block_pp0_stage0_11001, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001, ap_block_pp0_stage2_11001)
    begin
        if ((((ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001)) or ((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            grp_fu_340_ce <= ap_const_logic_1;
        else 
            grp_fu_340_ce <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_878_p_ce <= grp_fu_336_ce;
    grp_fu_878_p_din0 <= grp_fu_336_p0;
    grp_fu_878_p_din1 <= grp_fu_336_p1;
    grp_fu_878_p_opcode <= ap_const_lv2_0;
    grp_fu_882_p_ce <= grp_fu_340_ce;
    grp_fu_882_p_din0 <= tmp_2_reg_1125;
    grp_fu_882_p_din1 <= tmp_3_reg_1130;
    icmp_ln54_fu_410_p2 <= "1" when (indvar_flatten209_fu_176 = ap_const_lv14_3A98) else "0";
    icmp_ln55_fu_443_p2 <= "1" when (indvar_flatten177_fu_168 = ap_const_lv12_5DC) else "0";
    icmp_ln57_2_fu_791_p2 <= "1" when (select_ln57_1_fu_597_p3 = ap_const_lv3_5) else "0";
    icmp_ln57_fu_481_p2 <= "1" when (indvar_flatten153_fu_160 = ap_const_lv8_96) else "0";
    icmp_ln58_2_fu_785_p2 <= "1" when (select_ln58_1_fu_631_p3 = ap_const_lv3_4) else "0";
    icmp_ln58_fu_475_p2 <= "1" when (indvar_flatten138_fu_152 = ap_const_lv6_19) else "0";
    icmp_ln59_2_fu_779_p2 <= "1" when (add_ln59_fu_773_p2 = ap_const_lv3_5) else "0";
    icmp_ln59_fu_463_p2 <= "1" when (kw_fu_144 = ap_const_lv3_5) else "0";
    local_input_1_address0 <= zext_ln61_16_fu_763_p1(8 - 1 downto 0);

    local_input_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_1_ce0 <= ap_const_logic_1;
        else 
            local_input_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_2_address0 <= zext_ln61_16_fu_763_p1(8 - 1 downto 0);

    local_input_2_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_2_ce0 <= ap_const_logic_1;
        else 
            local_input_2_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_3_address0 <= zext_ln61_16_fu_763_p1(8 - 1 downto 0);

    local_input_3_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_3_ce0 <= ap_const_logic_1;
        else 
            local_input_3_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_4_address0 <= zext_ln61_16_fu_763_p1(8 - 1 downto 0);

    local_input_4_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_4_ce0 <= ap_const_logic_1;
        else 
            local_input_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_5_address0 <= zext_ln61_16_fu_763_p1(8 - 1 downto 0);

    local_input_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_5_ce0 <= ap_const_logic_1;
        else 
            local_input_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_input_address0 <= zext_ln61_16_fu_763_p1(8 - 1 downto 0);

    local_input_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_input_ce0 <= ap_const_logic_1;
        else 
            local_input_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_13_address0 <= zext_ln61_14_fu_735_p1(8 - 1 downto 0);

    local_weights_13_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_weights_13_ce0 <= ap_const_logic_1;
        else 
            local_weights_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_1_address0 <= zext_ln61_14_fu_735_p1(8 - 1 downto 0);

    local_weights_1_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_weights_1_ce0 <= ap_const_logic_1;
        else 
            local_weights_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_5_address0 <= zext_ln61_14_fu_735_p1(8 - 1 downto 0);

    local_weights_5_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_weights_5_ce0 <= ap_const_logic_1;
        else 
            local_weights_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    local_weights_9_address0 <= zext_ln61_14_fu_735_p1(8 - 1 downto 0);

    local_weights_9_ce0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_CS_fsm_pp0_stage1, ap_block_pp0_stage1_11001)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage1) and (ap_const_boolean_0 = ap_block_pp0_stage1_11001))) then 
            local_weights_9_ce0 <= ap_const_logic_1;
        else 
            local_weights_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    m_axi_OUTPUT_r_ARADDR <= ap_const_lv64_0;
    m_axi_OUTPUT_r_ARBURST <= ap_const_lv2_0;
    m_axi_OUTPUT_r_ARCACHE <= ap_const_lv4_0;
    m_axi_OUTPUT_r_ARID <= ap_const_lv1_0;
    m_axi_OUTPUT_r_ARLEN <= ap_const_lv32_0;
    m_axi_OUTPUT_r_ARLOCK <= ap_const_lv2_0;
    m_axi_OUTPUT_r_ARPROT <= ap_const_lv3_0;
    m_axi_OUTPUT_r_ARQOS <= ap_const_lv4_0;
    m_axi_OUTPUT_r_ARREGION <= ap_const_lv4_0;
    m_axi_OUTPUT_r_ARSIZE <= ap_const_lv3_0;
    m_axi_OUTPUT_r_ARUSER <= ap_const_lv1_0;
    m_axi_OUTPUT_r_ARVALID <= ap_const_logic_0;
    m_axi_OUTPUT_r_AWADDR <= ap_const_lv64_0;
    m_axi_OUTPUT_r_AWBURST <= ap_const_lv2_0;
    m_axi_OUTPUT_r_AWCACHE <= ap_const_lv4_0;
    m_axi_OUTPUT_r_AWID <= ap_const_lv1_0;
    m_axi_OUTPUT_r_AWLEN <= ap_const_lv32_0;
    m_axi_OUTPUT_r_AWLOCK <= ap_const_lv2_0;
    m_axi_OUTPUT_r_AWPROT <= ap_const_lv3_0;
    m_axi_OUTPUT_r_AWQOS <= ap_const_lv4_0;
    m_axi_OUTPUT_r_AWREGION <= ap_const_lv4_0;
    m_axi_OUTPUT_r_AWSIZE <= ap_const_lv3_0;
    m_axi_OUTPUT_r_AWUSER <= ap_const_lv1_0;
    m_axi_OUTPUT_r_AWVALID <= ap_const_logic_0;
    m_axi_OUTPUT_r_BREADY <= ap_const_logic_0;
    m_axi_OUTPUT_r_RREADY <= ap_const_logic_0;
    m_axi_OUTPUT_r_WDATA <= bitcast_ln65_reg_1150;
    m_axi_OUTPUT_r_WID <= ap_const_lv1_0;
    m_axi_OUTPUT_r_WLAST <= ap_const_logic_0;
    m_axi_OUTPUT_r_WSTRB <= ap_const_lv4_F;
    m_axi_OUTPUT_r_WUSER <= ap_const_lv1_0;

    m_axi_OUTPUT_r_WVALID_assign_proc : process(ap_enable_reg_pp0_iter4, ap_CS_fsm_pp0_stage2, ap_predicate_op186_write_state15, ap_block_pp0_stage2_11001)
    begin
        if (((ap_enable_reg_pp0_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage2) and (ap_const_boolean_0 = ap_block_pp0_stage2_11001) and (ap_predicate_op186_write_state15 = ap_const_boolean_1))) then 
            m_axi_OUTPUT_r_WVALID <= ap_const_logic_1;
        else 
            m_axi_OUTPUT_r_WVALID <= ap_const_logic_0;
        end if; 
    end process;

    or_ln55_2_fu_527_p2 <= (xor_ln55_fu_521_p2 or icmp_ln55_fu_443_p2);
    or_ln55_fu_507_p2 <= (icmp_ln55_fu_443_p2 or and_ln54_3_fu_487_p2);
    or_ln56_2_fu_565_p2 <= (and_ln55_2_fu_545_p2 or and_ln54_3_fu_487_p2);
    or_ln56_3_fu_611_p2 <= (or_ln55_fu_507_p2 or and_ln55_2_fu_545_p2);
    or_ln56_4_fu_617_p2 <= (or_ln56_3_fu_611_p2 or and_ln56_fu_591_p2);
    or_ln56_fu_571_p2 <= (or_ln56_2_fu_565_p2 or icmp_ln55_fu_443_p2);
    select_ln54_2_fu_493_p3 <= 
        add_ln54_1_fu_437_p2 when (icmp_ln55_fu_443_p2(0) = '1') else 
        h_fu_172;
    select_ln54_fu_449_p3 <= 
        ap_const_lv4_0 when (icmp_ln55_fu_443_p2(0) = '1') else 
        w_fu_164;
    select_ln55_4_fu_941_p3 <= 
        ap_const_lv32_0 when (or_ln55_reg_1053_pp0_iter1_reg(0) = '1') else 
        ap_sig_allocacmp_sum_load;
    select_ln55_5_fu_551_p3 <= 
        add_ln55_1_fu_501_p2 when (and_ln54_3_fu_487_p2(0) = '1') else 
        select_ln54_fu_449_p3;
    select_ln55_6_fu_831_p3 <= 
        ap_const_lv12_1 when (icmp_ln55_fu_443_p2(0) = '1') else 
        add_ln55_fu_825_p2;
    select_ln55_fu_513_p3 <= 
        ap_const_lv3_0 when (or_ln55_fu_507_p2(0) = '1') else 
        ci_fu_156;
    select_ln56_2_fu_623_p3 <= 
        ap_const_lv3_0 when (or_ln56_4_fu_617_p2(0) = '1') else 
        kw_fu_144;
    select_ln56_fu_577_p3 <= 
        ap_const_lv3_0 when (or_ln56_fu_571_p2(0) = '1') else 
        kh_fu_148;
    select_ln57_1_fu_597_p3 <= 
        add_ln57_1_fu_559_p2 when (and_ln55_2_fu_545_p2(0) = '1') else 
        select_ln55_fu_513_p3;
    select_ln57_fu_817_p3 <= 
        ap_const_lv8_1 when (or_ln55_fu_507_p2(0) = '1') else 
        add_ln57_fu_811_p2;
    select_ln58_1_fu_631_p3 <= 
        add_ln58_1_fu_605_p2 when (and_ln56_fu_591_p2(0) = '1') else 
        select_ln56_fu_577_p3;
    select_ln58_fu_803_p3 <= 
        ap_const_lv6_1 when (or_ln56_fu_571_p2(0) = '1') else 
        add_ln58_fu_797_p2;
    sub_ln61_fu_719_p2 <= std_logic_vector(unsigned(tmp_6_fu_699_p3) - unsigned(zext_ln61_12_fu_715_p1));
    tmp_2_fu_884_p13 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_3_fu_915_p9 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
    tmp_4_fu_675_p3 <= (add_ln61_6_fu_665_p2 & ap_const_lv2_0);
    tmp_6_fu_699_p3 <= (empty_24_fu_693_p2 & ap_const_lv4_0);
    tmp_7_fu_707_p3 <= (empty_24_fu_693_p2 & ap_const_lv1_0);
    tmp_s_fu_643_p3 <= (select_ln57_1_fu_597_p3 & ap_const_lv2_0);
    xor_ln54_fu_457_p2 <= (icmp_ln55_fu_443_p2 xor ap_const_lv1_1);
    xor_ln55_fu_521_p2 <= (icmp_ln57_fu_481_p2 xor ap_const_lv1_1);
    xor_ln56_fu_585_p2 <= (ap_const_lv1_1 xor and_ln55_2_fu_545_p2);
    zext_ln58_fu_689_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_1_fu_631_p3),4));
    zext_ln59_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_2_fu_623_p3),4));
    zext_ln61_10_fu_661_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln58_1_fu_631_p3),6));
    zext_ln61_11_fu_671_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_6_fu_665_p2),8));
    zext_ln61_12_fu_715_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_7_fu_707_p3),8));
    zext_ln61_13_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln56_2_fu_623_p3),8));
    zext_ln61_14_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_8_fu_729_p2),64));
    zext_ln61_15_fu_753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_1_fu_747_p2),8));
    zext_ln61_16_fu_763_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln61_9_fu_757_p2),64));
    zext_ln61_9_fu_651_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_fu_643_p3),6));
    zext_ln61_fu_639_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln57_1_fu_597_p3),6));
end behav;
