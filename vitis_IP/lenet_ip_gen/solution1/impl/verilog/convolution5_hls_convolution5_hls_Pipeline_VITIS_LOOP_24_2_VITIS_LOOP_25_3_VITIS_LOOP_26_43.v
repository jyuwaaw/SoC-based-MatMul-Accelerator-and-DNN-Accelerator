// ==============================================================
// Generated by Vitis HLS v2023.2
// Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// Copyright 2022-2023 Advanced Micro Devices, Inc. All Rights Reserved.
// ==============================================================

`timescale 1 ns / 1 ps 

module convolution5_hls_convolution5_hls_Pipeline_VITIS_LOOP_24_2_VITIS_LOOP_25_3_VITIS_LOOP_26_43 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        m_axi_WEIGHTS_AWVALID,
        m_axi_WEIGHTS_AWREADY,
        m_axi_WEIGHTS_AWADDR,
        m_axi_WEIGHTS_AWID,
        m_axi_WEIGHTS_AWLEN,
        m_axi_WEIGHTS_AWSIZE,
        m_axi_WEIGHTS_AWBURST,
        m_axi_WEIGHTS_AWLOCK,
        m_axi_WEIGHTS_AWCACHE,
        m_axi_WEIGHTS_AWPROT,
        m_axi_WEIGHTS_AWQOS,
        m_axi_WEIGHTS_AWREGION,
        m_axi_WEIGHTS_AWUSER,
        m_axi_WEIGHTS_WVALID,
        m_axi_WEIGHTS_WREADY,
        m_axi_WEIGHTS_WDATA,
        m_axi_WEIGHTS_WSTRB,
        m_axi_WEIGHTS_WLAST,
        m_axi_WEIGHTS_WID,
        m_axi_WEIGHTS_WUSER,
        m_axi_WEIGHTS_ARVALID,
        m_axi_WEIGHTS_ARREADY,
        m_axi_WEIGHTS_ARADDR,
        m_axi_WEIGHTS_ARID,
        m_axi_WEIGHTS_ARLEN,
        m_axi_WEIGHTS_ARSIZE,
        m_axi_WEIGHTS_ARBURST,
        m_axi_WEIGHTS_ARLOCK,
        m_axi_WEIGHTS_ARCACHE,
        m_axi_WEIGHTS_ARPROT,
        m_axi_WEIGHTS_ARQOS,
        m_axi_WEIGHTS_ARREGION,
        m_axi_WEIGHTS_ARUSER,
        m_axi_WEIGHTS_RVALID,
        m_axi_WEIGHTS_RREADY,
        m_axi_WEIGHTS_RDATA,
        m_axi_WEIGHTS_RLAST,
        m_axi_WEIGHTS_RID,
        m_axi_WEIGHTS_RFIFONUM,
        m_axi_WEIGHTS_RUSER,
        m_axi_WEIGHTS_RRESP,
        m_axi_WEIGHTS_BVALID,
        m_axi_WEIGHTS_BREADY,
        m_axi_WEIGHTS_BRESP,
        m_axi_WEIGHTS_BID,
        m_axi_WEIGHTS_BUSER,
        m_axi_INPUT_r_AWVALID,
        m_axi_INPUT_r_AWREADY,
        m_axi_INPUT_r_AWADDR,
        m_axi_INPUT_r_AWID,
        m_axi_INPUT_r_AWLEN,
        m_axi_INPUT_r_AWSIZE,
        m_axi_INPUT_r_AWBURST,
        m_axi_INPUT_r_AWLOCK,
        m_axi_INPUT_r_AWCACHE,
        m_axi_INPUT_r_AWPROT,
        m_axi_INPUT_r_AWQOS,
        m_axi_INPUT_r_AWREGION,
        m_axi_INPUT_r_AWUSER,
        m_axi_INPUT_r_WVALID,
        m_axi_INPUT_r_WREADY,
        m_axi_INPUT_r_WDATA,
        m_axi_INPUT_r_WSTRB,
        m_axi_INPUT_r_WLAST,
        m_axi_INPUT_r_WID,
        m_axi_INPUT_r_WUSER,
        m_axi_INPUT_r_ARVALID,
        m_axi_INPUT_r_ARREADY,
        m_axi_INPUT_r_ARADDR,
        m_axi_INPUT_r_ARID,
        m_axi_INPUT_r_ARLEN,
        m_axi_INPUT_r_ARSIZE,
        m_axi_INPUT_r_ARBURST,
        m_axi_INPUT_r_ARLOCK,
        m_axi_INPUT_r_ARCACHE,
        m_axi_INPUT_r_ARPROT,
        m_axi_INPUT_r_ARQOS,
        m_axi_INPUT_r_ARREGION,
        m_axi_INPUT_r_ARUSER,
        m_axi_INPUT_r_RVALID,
        m_axi_INPUT_r_RREADY,
        m_axi_INPUT_r_RDATA,
        m_axi_INPUT_r_RLAST,
        m_axi_INPUT_r_RID,
        m_axi_INPUT_r_RFIFONUM,
        m_axi_INPUT_r_RUSER,
        m_axi_INPUT_r_RRESP,
        m_axi_INPUT_r_BVALID,
        m_axi_INPUT_r_BREADY,
        m_axi_INPUT_r_BRESP,
        m_axi_INPUT_r_BID,
        m_axi_INPUT_r_BUSER,
        sext_ln24,
        sext_ln24_4,
        sum_7_out,
        sum_7_out_ap_vld,
        grp_fu_1945_p_din0,
        grp_fu_1945_p_din1,
        grp_fu_1945_p_dout0,
        grp_fu_1945_p_ce,
        grp_fu_1949_p_din0,
        grp_fu_1949_p_din1,
        grp_fu_1949_p_opcode,
        grp_fu_1949_p_dout0,
        grp_fu_1949_p_ce
);

parameter    ap_ST_fsm_pp0_stage0 = 3'd1;
parameter    ap_ST_fsm_pp0_stage1 = 3'd2;
parameter    ap_ST_fsm_pp0_stage2 = 3'd4;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output   m_axi_WEIGHTS_AWVALID;
input   m_axi_WEIGHTS_AWREADY;
output  [63:0] m_axi_WEIGHTS_AWADDR;
output  [0:0] m_axi_WEIGHTS_AWID;
output  [31:0] m_axi_WEIGHTS_AWLEN;
output  [2:0] m_axi_WEIGHTS_AWSIZE;
output  [1:0] m_axi_WEIGHTS_AWBURST;
output  [1:0] m_axi_WEIGHTS_AWLOCK;
output  [3:0] m_axi_WEIGHTS_AWCACHE;
output  [2:0] m_axi_WEIGHTS_AWPROT;
output  [3:0] m_axi_WEIGHTS_AWQOS;
output  [3:0] m_axi_WEIGHTS_AWREGION;
output  [0:0] m_axi_WEIGHTS_AWUSER;
output   m_axi_WEIGHTS_WVALID;
input   m_axi_WEIGHTS_WREADY;
output  [31:0] m_axi_WEIGHTS_WDATA;
output  [3:0] m_axi_WEIGHTS_WSTRB;
output   m_axi_WEIGHTS_WLAST;
output  [0:0] m_axi_WEIGHTS_WID;
output  [0:0] m_axi_WEIGHTS_WUSER;
output   m_axi_WEIGHTS_ARVALID;
input   m_axi_WEIGHTS_ARREADY;
output  [63:0] m_axi_WEIGHTS_ARADDR;
output  [0:0] m_axi_WEIGHTS_ARID;
output  [31:0] m_axi_WEIGHTS_ARLEN;
output  [2:0] m_axi_WEIGHTS_ARSIZE;
output  [1:0] m_axi_WEIGHTS_ARBURST;
output  [1:0] m_axi_WEIGHTS_ARLOCK;
output  [3:0] m_axi_WEIGHTS_ARCACHE;
output  [2:0] m_axi_WEIGHTS_ARPROT;
output  [3:0] m_axi_WEIGHTS_ARQOS;
output  [3:0] m_axi_WEIGHTS_ARREGION;
output  [0:0] m_axi_WEIGHTS_ARUSER;
input   m_axi_WEIGHTS_RVALID;
output   m_axi_WEIGHTS_RREADY;
input  [31:0] m_axi_WEIGHTS_RDATA;
input   m_axi_WEIGHTS_RLAST;
input  [0:0] m_axi_WEIGHTS_RID;
input  [8:0] m_axi_WEIGHTS_RFIFONUM;
input  [0:0] m_axi_WEIGHTS_RUSER;
input  [1:0] m_axi_WEIGHTS_RRESP;
input   m_axi_WEIGHTS_BVALID;
output   m_axi_WEIGHTS_BREADY;
input  [1:0] m_axi_WEIGHTS_BRESP;
input  [0:0] m_axi_WEIGHTS_BID;
input  [0:0] m_axi_WEIGHTS_BUSER;
output   m_axi_INPUT_r_AWVALID;
input   m_axi_INPUT_r_AWREADY;
output  [63:0] m_axi_INPUT_r_AWADDR;
output  [0:0] m_axi_INPUT_r_AWID;
output  [31:0] m_axi_INPUT_r_AWLEN;
output  [2:0] m_axi_INPUT_r_AWSIZE;
output  [1:0] m_axi_INPUT_r_AWBURST;
output  [1:0] m_axi_INPUT_r_AWLOCK;
output  [3:0] m_axi_INPUT_r_AWCACHE;
output  [2:0] m_axi_INPUT_r_AWPROT;
output  [3:0] m_axi_INPUT_r_AWQOS;
output  [3:0] m_axi_INPUT_r_AWREGION;
output  [0:0] m_axi_INPUT_r_AWUSER;
output   m_axi_INPUT_r_WVALID;
input   m_axi_INPUT_r_WREADY;
output  [31:0] m_axi_INPUT_r_WDATA;
output  [3:0] m_axi_INPUT_r_WSTRB;
output   m_axi_INPUT_r_WLAST;
output  [0:0] m_axi_INPUT_r_WID;
output  [0:0] m_axi_INPUT_r_WUSER;
output   m_axi_INPUT_r_ARVALID;
input   m_axi_INPUT_r_ARREADY;
output  [63:0] m_axi_INPUT_r_ARADDR;
output  [0:0] m_axi_INPUT_r_ARID;
output  [31:0] m_axi_INPUT_r_ARLEN;
output  [2:0] m_axi_INPUT_r_ARSIZE;
output  [1:0] m_axi_INPUT_r_ARBURST;
output  [1:0] m_axi_INPUT_r_ARLOCK;
output  [3:0] m_axi_INPUT_r_ARCACHE;
output  [2:0] m_axi_INPUT_r_ARPROT;
output  [3:0] m_axi_INPUT_r_ARQOS;
output  [3:0] m_axi_INPUT_r_ARREGION;
output  [0:0] m_axi_INPUT_r_ARUSER;
input   m_axi_INPUT_r_RVALID;
output   m_axi_INPUT_r_RREADY;
input  [31:0] m_axi_INPUT_r_RDATA;
input   m_axi_INPUT_r_RLAST;
input  [0:0] m_axi_INPUT_r_RID;
input  [8:0] m_axi_INPUT_r_RFIFONUM;
input  [0:0] m_axi_INPUT_r_RUSER;
input  [1:0] m_axi_INPUT_r_RRESP;
input   m_axi_INPUT_r_BVALID;
output   m_axi_INPUT_r_BREADY;
input  [1:0] m_axi_INPUT_r_BRESP;
input  [0:0] m_axi_INPUT_r_BID;
input  [0:0] m_axi_INPUT_r_BUSER;
input  [61:0] sext_ln24;
input  [61:0] sext_ln24_4;
output  [31:0] sum_7_out;
output   sum_7_out_ap_vld;
output  [31:0] grp_fu_1945_p_din0;
output  [31:0] grp_fu_1945_p_din1;
input  [31:0] grp_fu_1945_p_dout0;
output   grp_fu_1945_p_ce;
output  [31:0] grp_fu_1949_p_din0;
output  [31:0] grp_fu_1949_p_din1;
output  [1:0] grp_fu_1949_p_opcode;
input  [31:0] grp_fu_1949_p_dout0;
output   grp_fu_1949_p_ce;

reg ap_idle;
reg m_axi_WEIGHTS_RREADY;
reg m_axi_INPUT_r_RREADY;
reg sum_7_out_ap_vld;

(* fsm_encoding = "none" *) reg   [2:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    ap_CS_fsm_pp0_stage2;
wire    ap_block_pp0_stage2_subdone;
reg   [0:0] icmp_ln24_reg_201;
reg    ap_condition_exit_pp0_iter0_stage2;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    WEIGHTS_blk_n_R;
wire    ap_CS_fsm_pp0_stage1;
wire    ap_block_pp0_stage1;
reg    INPUT_r_blk_n_R;
wire    ap_block_pp0_stage0_11001;
wire   [0:0] icmp_ln24_fu_126_p2;
reg   [0:0] icmp_ln24_reg_201_pp0_iter1_reg;
reg   [31:0] INPUT_r_addr_read_reg_205;
reg    ap_block_state2_pp0_stage1_iter0;
reg    ap_block_pp0_stage1_11001;
reg   [31:0] WEIGHTS_addr_read_reg_210;
wire   [31:0] input_val_fu_155_p1;
wire    ap_block_pp0_stage2_11001;
wire   [31:0] weight_val_fu_159_p1;
reg   [31:0] mul_3_reg_225;
reg    ap_enable_reg_pp0_iter0_reg;
reg   [31:0] sum_fu_60;
reg   [31:0] ap_sig_allocacmp_sum_load_5;
wire    ap_block_pp0_stage2;
wire    ap_loop_init;
reg   [8:0] indvar_flatten100_fu_64;
wire   [8:0] add_ln24_fu_132_p2;
reg   [8:0] ap_sig_allocacmp_indvar_flatten100_load;
wire    ap_block_pp0_stage0;
wire    ap_block_pp0_stage2_01001;
reg    grp_fu_97_ce;
reg    grp_fu_101_ce;
reg    ap_done_reg;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [2:0] ap_NS_fsm;
wire    ap_block_pp0_stage0_subdone;
reg    ap_idle_pp0_1to2;
reg    ap_block_pp0_stage1_subdone;
wire    ap_enable_pp0;
wire    ap_start_int;
wire    ap_block_pp0_stage2_00001;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 ap_CS_fsm = 3'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0_reg = 1'b0;
#0 sum_fu_60 = 32'd0;
#0 indvar_flatten100_fu_64 = 9'd0;
#0 ap_done_reg = 1'b0;
end

convolution5_hls_flow_control_loop_pipe_sequential_init flow_control_loop_pipe_sequential_init_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(ap_start),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage2),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0_reg <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
            ap_enable_reg_pp0_iter0_reg <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage2)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage2_subdone) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        if (((ap_enable_reg_pp0_iter0 == 1'b1) & (icmp_ln24_fu_126_p2 == 1'd0))) begin
            indvar_flatten100_fu_64 <= add_ln24_fu_132_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            indvar_flatten100_fu_64 <= 9'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        sum_fu_60 <= 32'd0;
    end else if (((1'b0 == ap_block_pp0_stage2_11001) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        sum_fu_60 <= grp_fu_1949_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        INPUT_r_addr_read_reg_205 <= m_axi_INPUT_r_RDATA;
        WEIGHTS_addr_read_reg_210 <= m_axi_WEIGHTS_RDATA;
        mul_3_reg_225 <= grp_fu_1945_p_dout0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        icmp_ln24_reg_201 <= icmp_ln24_fu_126_p2;
        icmp_ln24_reg_201_pp0_iter1_reg <= icmp_ln24_reg_201;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        INPUT_r_blk_n_R = m_axi_INPUT_r_RVALID;
    end else begin
        INPUT_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage1) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        WEIGHTS_blk_n_R = m_axi_WEIGHTS_RVALID;
    end else begin
        WEIGHTS_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_201 == 1'd1) & (1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_pp0_stage0)) begin
        ap_enable_reg_pp0_iter0 = ap_start_int;
    end else begin
        ap_enable_reg_pp0_iter0 = ap_enable_reg_pp0_iter0_reg;
    end
end

always @ (*) begin
    if (((ap_start_int == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0))) begin
        ap_idle_pp0_1to2 = 1'b1;
    end else begin
        ap_idle_pp0_1to2 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_subdone) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_loop_init == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_sig_allocacmp_indvar_flatten100_load = 9'd0;
    end else begin
        ap_sig_allocacmp_indvar_flatten100_load = indvar_flatten100_fu_64;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2) & (ap_enable_reg_pp0_iter2 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage2))) begin
        ap_sig_allocacmp_sum_load_5 = grp_fu_1949_p_dout0;
    end else begin
        ap_sig_allocacmp_sum_load_5 = sum_fu_60;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_101_ce = 1'b1;
    end else begin
        grp_fu_101_ce = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2)) | ((1'b0 == ap_block_pp0_stage1_11001) & (1'b1 == ap_CS_fsm_pp0_stage1)) | ((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0)))) begin
        grp_fu_97_ce = 1'b1;
    end else begin
        grp_fu_97_ce = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_INPUT_r_RREADY = 1'b1;
    end else begin
        m_axi_INPUT_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln24_reg_201 == 1'd0) & (1'b0 == ap_block_pp0_stage1_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage1))) begin
        m_axi_WEIGHTS_RREADY = 1'b1;
    end else begin
        m_axi_WEIGHTS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage2_11001) & (1'b1 == ap_CS_fsm_pp0_stage2) & (icmp_ln24_reg_201_pp0_iter1_reg == 1'd1))) begin
        sum_7_out_ap_vld = 1'b1;
    end else begin
        sum_7_out_ap_vld = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((ap_start_int == 1'b0) & (ap_idle_pp0_1to2 == 1'b1)) & (1'b0 == ap_block_pp0_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_pp0_stage1 : begin
            if ((1'b0 == ap_block_pp0_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage1;
            end
        end
        ap_ST_fsm_pp0_stage2 : begin
            if ((1'b0 == ap_block_pp0_stage2_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage2;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln24_fu_132_p2 = (ap_sig_allocacmp_indvar_flatten100_load + 9'd1);

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_pp0_stage1 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_pp0_stage2 = ap_CS_fsm[32'd2];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage1 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage1_11001 = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

always @ (*) begin
    ap_block_pp0_stage1_subdone = ((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_block_state2_pp0_stage1_iter0));
end

assign ap_block_pp0_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_01001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage2_subdone = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state2_pp0_stage1_iter0 = (((m_axi_WEIGHTS_RVALID == 1'b0) & (icmp_ln24_reg_201 == 1'd0)) | ((icmp_ln24_reg_201 == 1'd0) & (m_axi_INPUT_r_RVALID == 1'b0)));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage2;

assign grp_fu_1945_p_ce = grp_fu_101_ce;

assign grp_fu_1945_p_din0 = input_val_fu_155_p1;

assign grp_fu_1945_p_din1 = weight_val_fu_159_p1;

assign grp_fu_1949_p_ce = grp_fu_97_ce;

assign grp_fu_1949_p_din0 = ap_sig_allocacmp_sum_load_5;

assign grp_fu_1949_p_din1 = mul_3_reg_225;

assign grp_fu_1949_p_opcode = 2'd0;

assign icmp_ln24_fu_126_p2 = ((ap_sig_allocacmp_indvar_flatten100_load == 9'd400) ? 1'b1 : 1'b0);

assign input_val_fu_155_p1 = INPUT_r_addr_read_reg_205;

assign m_axi_INPUT_r_ARADDR = 64'd0;

assign m_axi_INPUT_r_ARBURST = 2'd0;

assign m_axi_INPUT_r_ARCACHE = 4'd0;

assign m_axi_INPUT_r_ARID = 1'd0;

assign m_axi_INPUT_r_ARLEN = 32'd0;

assign m_axi_INPUT_r_ARLOCK = 2'd0;

assign m_axi_INPUT_r_ARPROT = 3'd0;

assign m_axi_INPUT_r_ARQOS = 4'd0;

assign m_axi_INPUT_r_ARREGION = 4'd0;

assign m_axi_INPUT_r_ARSIZE = 3'd0;

assign m_axi_INPUT_r_ARUSER = 1'd0;

assign m_axi_INPUT_r_ARVALID = 1'b0;

assign m_axi_INPUT_r_AWADDR = 64'd0;

assign m_axi_INPUT_r_AWBURST = 2'd0;

assign m_axi_INPUT_r_AWCACHE = 4'd0;

assign m_axi_INPUT_r_AWID = 1'd0;

assign m_axi_INPUT_r_AWLEN = 32'd0;

assign m_axi_INPUT_r_AWLOCK = 2'd0;

assign m_axi_INPUT_r_AWPROT = 3'd0;

assign m_axi_INPUT_r_AWQOS = 4'd0;

assign m_axi_INPUT_r_AWREGION = 4'd0;

assign m_axi_INPUT_r_AWSIZE = 3'd0;

assign m_axi_INPUT_r_AWUSER = 1'd0;

assign m_axi_INPUT_r_AWVALID = 1'b0;

assign m_axi_INPUT_r_BREADY = 1'b0;

assign m_axi_INPUT_r_WDATA = 32'd0;

assign m_axi_INPUT_r_WID = 1'd0;

assign m_axi_INPUT_r_WLAST = 1'b0;

assign m_axi_INPUT_r_WSTRB = 4'd0;

assign m_axi_INPUT_r_WUSER = 1'd0;

assign m_axi_INPUT_r_WVALID = 1'b0;

assign m_axi_WEIGHTS_ARADDR = 64'd0;

assign m_axi_WEIGHTS_ARBURST = 2'd0;

assign m_axi_WEIGHTS_ARCACHE = 4'd0;

assign m_axi_WEIGHTS_ARID = 1'd0;

assign m_axi_WEIGHTS_ARLEN = 32'd0;

assign m_axi_WEIGHTS_ARLOCK = 2'd0;

assign m_axi_WEIGHTS_ARPROT = 3'd0;

assign m_axi_WEIGHTS_ARQOS = 4'd0;

assign m_axi_WEIGHTS_ARREGION = 4'd0;

assign m_axi_WEIGHTS_ARSIZE = 3'd0;

assign m_axi_WEIGHTS_ARUSER = 1'd0;

assign m_axi_WEIGHTS_ARVALID = 1'b0;

assign m_axi_WEIGHTS_AWADDR = 64'd0;

assign m_axi_WEIGHTS_AWBURST = 2'd0;

assign m_axi_WEIGHTS_AWCACHE = 4'd0;

assign m_axi_WEIGHTS_AWID = 1'd0;

assign m_axi_WEIGHTS_AWLEN = 32'd0;

assign m_axi_WEIGHTS_AWLOCK = 2'd0;

assign m_axi_WEIGHTS_AWPROT = 3'd0;

assign m_axi_WEIGHTS_AWQOS = 4'd0;

assign m_axi_WEIGHTS_AWREGION = 4'd0;

assign m_axi_WEIGHTS_AWSIZE = 3'd0;

assign m_axi_WEIGHTS_AWUSER = 1'd0;

assign m_axi_WEIGHTS_AWVALID = 1'b0;

assign m_axi_WEIGHTS_BREADY = 1'b0;

assign m_axi_WEIGHTS_WDATA = 32'd0;

assign m_axi_WEIGHTS_WID = 1'd0;

assign m_axi_WEIGHTS_WLAST = 1'b0;

assign m_axi_WEIGHTS_WSTRB = 4'd0;

assign m_axi_WEIGHTS_WUSER = 1'd0;

assign m_axi_WEIGHTS_WVALID = 1'b0;

assign sum_7_out = sum_fu_60;

assign weight_val_fu_159_p1 = WEIGHTS_addr_read_reg_210;

endmodule //convolution5_hls_convolution5_hls_Pipeline_VITIS_LOOP_24_2_VITIS_LOOP_25_3_VITIS_LOOP_26_43
